{"hash":"4a9dd111f9f2d73a5ca10231c364dc0f850a73b9","data":{"markdownPage":{"id":"c9e874d6515623ddf07f96c922e50aa9","title":"인터넷 강의수강 시스템","description":"","path":"/example-scenario/online-lecture/","timeToRead":10,"content":"<h1 id=\"인터넷-강의수강-시스템\"><a href=\"#%EC%9D%B8%ED%84%B0%EB%84%B7-%EA%B0%95%EC%9D%98%EC%88%98%EA%B0%95-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터넷 강의수강 시스템</h1>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79727114-d3956280-8326-11ea-8862-e01ca9a0f949.png\" alt=\"image\"></p>\n<p>출처 원본: <a href=\"https://github.com/msa-ez/example-academy\" target=\"_blank\" class=\"link-open-text\">https://github.com/msa-ez/example-academy</a></p>\n<h2> 최종 조별과제 - 인터넷 강의수강 시스템</h2>\n<ul>\n<li>체크포인트 : <a href=\"https://workflowy.com/s/assessment-check-po/T5YrzcMewfo4J6LW\" target=\"_blank\" rel=\"noopener noreferrer\">https://workflowy.com/s/assessment-check-po/T5YrzcMewfo4J6LW</a></li>\n</ul>\n<h2 id=\"서비스-시나리오\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 시나리오</h2>\n<p>유데미, Learning Portal</p>\n<p><strong>기능적 요구사항</strong><br>\n1. 학생이 강의를 선택하여 수강신청 한다<br>\n2. 학생이 결제한다<br>\n3. 수강신청이 되면 수강신청 내역이 강사의 강의시스템에 전달된다<br>\n4. 학생이 수강신청을 취소한다<br>\n5. 수강신청이 취소되면 결제가 취소된다<br>\n6. 강사가 강의를 개설한다<br>\n7. 강사가 개설된 강의를 취소한다<br>\n8. 강사가 강의를 취소하면 학생의 수강신청이 취소된다<br>\n9. 학생이 수강신청 내용을 조회한다<br>\n10. 강사가 강의수강 인원을 조회한다<br></p>\n<p><strong>비기능적 요구사항</strong><br>\n1. 트랜잭션</p>\n<ul>\n<li>\n<ol>\n<li>결제가 되지 않은 수강신청은 아예 신청이 성립되지 않아야 한다  Sync 호출 </li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>장애격리</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>강의 관리 기능이 수행되지 않더라도 수강신청은 365일 24시간 받을 수 있어야 한다  Async (event-driven), Eventual Consistency</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>결제시스템이 과중되면 사용자를 잠시동안 받지 않고 결제를 잠시후에 하도록 유도한다  Circuit breaker, fallback</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li>성능</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>학생이 강의관리에서 확인할 수 있는 수강신청내용을 수강신청시스템(프론트엔드)에서 확인할 수 있어야 한다 CQRS</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"체크포인트\"><a href=\"#%EC%B2%B4%ED%81%AC%ED%8F%AC%EC%9D%B8%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>체크포인트</h2>\n<ul>\n<li>분석 설계</li>\n</ul>\n<ul>\n<li>\n<p>이벤트스토밍: </p>\n<ul>\n<li>스티커 색상별 객체의 의미를 제대로 이해하여 헥사고날 아키텍처와의 연계 설계에 적절히 반영하고 있는가?</li>\n<li>각 도메인 이벤트가 의미있는 수준으로 정의되었는가?</li>\n<li>어그리게잇: Command와 Event 들을 ACID 트랜잭션 단위의 Aggregate 로 제대로 묶었는가?</li>\n<li>기능적 요구사항과 비기능적 요구사항을 누락 없이 반영하였는가?    </li>\n</ul>\n</li>\n<li>\n<p>서브 도메인, 바운디드 컨텍스트 분리</p>\n<ul>\n<li>\n<p>팀별 KPI 와 관심사, 상이한 배포주기 등에 따른  Sub-domain 이나 Bounded Context 를 적절히 분리하였고 그 분리 기준의 합리성이 충분히 설명되는가?</p>\n<ul>\n<li>적어도 3개 이상 서비스 분리</li>\n</ul>\n</li>\n<li>폴리글랏 설계: 각 마이크로 서비스들의 구현 목표와 기능 특성에 따른 각자의 기술 Stack 과 저장소 구조를 다양하게 채택하여 설계하였는가?</li>\n<li>서비스 시나리오 중 ACID 트랜잭션이 크리티컬한 Use 케이스에 대하여 무리하게 서비스가 과다하게 조밀히 분리되지 않았는가?</li>\n</ul>\n</li>\n<li>\n<p>컨텍스트 매핑 / 이벤트 드리븐 아키텍처 </p>\n<ul>\n<li>업무 중요성과  도메인간 서열을 구분할 수 있는가? (Core, Supporting, General Domain)</li>\n<li>Request-Response 방식과 이벤트 드리븐 방식을 구분하여 설계할 수 있는가?</li>\n<li>장애격리: 서포팅 서비스를 제거 하여도 기존 서비스에 영향이 없도록 설계하였는가?</li>\n<li>신규 서비스를 추가 하였을때 기존 서비스의 데이터베이스에 영향이 없도록 설계(열려있는 아키택처)할 수 있는가?</li>\n<li>이벤트와 폴리시를 연결하기 위한 Correlation-key 연결을 제대로 설계하였는가?</li>\n</ul>\n</li>\n<li>\n<p>헥사고날 아키텍처</p>\n<ul>\n<li>설계 결과에 따른 헥사고날 아키텍처 다이어그램을 제대로 그렸는가?</li>\n</ul>\n</li>\n<li>\n<p>구현</p>\n<ul>\n<li>\n<p>[DDD] 분석단계에서의 스티커별 색상과 헥사고날 아키텍처에 따라 구현체가 매핑되게 개발되었는가?</p>\n<ul>\n<li>Entity Pattern 과 Repository Pattern 을 적용하여 JPA 를 통하여 데이터 접근 어댑터를 개발하였는가</li>\n<li>[헥사고날 아키텍처] REST Inbound adaptor 이외에 gRPC 등의 Inbound Adaptor 를 추가함에 있어서 도메인 모델의 손상을 주지 않고 새로운 프로토콜에 기존 구현체를 적응시킬 수 있는가?</li>\n<li>분석단계에서의 유비쿼터스 랭귀지 (업무현장에서 쓰는 용어) 를 사용하여 소스코드가 서술되었는가?</li>\n</ul>\n</li>\n<li>\n<p>Request-Response 방식의 서비스 중심 아키텍처 구현</p>\n<ul>\n<li>마이크로 서비스간 Request-Response 호출에 있어 대상 서비스를 어떠한 방식으로 찾아서 호출 하였는가? (Service Discovery, REST, FeignClient)</li>\n<li>서킷브레이커를 통하여  장애를 격리시킬 수 있는가?</li>\n</ul>\n</li>\n<li>\n<p>이벤트 드리븐 아키텍처의 구현</p>\n<ul>\n<li>카프카를 이용하여 PubSub 으로 하나 이상의 서비스가 연동되었는가?</li>\n<li>Correlation-key:  각 이벤트 건 (메시지)가 어떠한 폴리시를 처리할때 어떤 건에 연결된 처리건인지를 구별하기 위한 Correlation-key 연결을 제대로 구현 하였는가?</li>\n<li>Message Consumer 마이크로서비스가 장애상황에서 수신받지 못했던 기존 이벤트들을 다시 수신받아 처리하는가?</li>\n<li>Scaling-out: Message Consumer 마이크로서비스의 Replica 를 추가했을때 중복없이 이벤트를 수신할 수 있는가</li>\n<li>CQRS: Materialized View 를 구현하여, 타 마이크로서비스의 데이터 원본에 접근없이(Composite 서비스나 조인SQL 등 없이) 도 내 서비스의 화면 구성과 잦은 조회가 가능한가?</li>\n</ul>\n</li>\n<li>\n<p>폴리글랏 플로그래밍</p>\n<ul>\n<li>각 마이크로 서비스들이 하나이상의 각자의 기술 Stack 으로 구성되었는가?</li>\n<li>각 마이크로 서비스들이 각자의 저장소 구조를 자율적으로 채택하고 각자의 저장소 유형 (RDB, NoSQL, File System 등)을 선택하여 구현하였는가?</li>\n</ul>\n</li>\n<li>\n<p>API 게이트웨이</p>\n<ul>\n<li>API GW를 통하여 마이크로 서비스들의 집입점을 통일할 수 있는가?</li>\n<li>게이트웨이와 인증서버(OAuth), JWT 토큰 인증을 통하여 마이크로서비스들을 보호할 수 있는가?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>운영</p>\n<ul>\n<li>\n<p>SLA 준수</p>\n<ul>\n<li>셀프힐링: Liveness Probe 를 통하여 어떠한 서비스의 health 상태가 지속적으로 저하됨에 따라 어떠한 임계치에서 pod 가 재생되는 것을 증명할 수 있는가?</li>\n<li>서킷브레이커, 레이트리밋 등을 통한 장애격리와 성능효율을 높힐 수 있는가?</li>\n<li>오토스케일러 (HPA) 를 설정하여 확장적 운영이 가능한가?</li>\n<li>모니터링, 앨럿팅: </li>\n</ul>\n</li>\n<li>\n<p>무정지 운영 CI/CD (10)</p>\n<ul>\n<li>Readiness Probe 의 설정과 Rolling update을 통하여 신규 버전이 완전히 서비스를 받을 수 있는 상태일때 신규버전의 서비스로 전환됨을 siege 등으로 증명 </li>\n<li>Contract Test :  자동화된 경계 테스트를 통하여 구현 오류나 API 계약위반를 미리 차단 가능한가?</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"분석설계\"><a href=\"#%EB%B6%84%EC%84%9D%EC%84%A4%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>분석/설계</h2>\n<h3> - TO-BE 조직 (Vertically-Aligned)</h3>\n<h3 id=\"-event-storming-결과\"><a href=\"#-event-storming-%EA%B2%B0%EA%B3%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Event Storming 결과</h3>\n<p><strong>조직 및 요구사항 도출 도출</strong>\n<img src=\"https://user-images.githubusercontent.com/48303857/79729383-5cfa6400-832a-11ea-89b6-53eca4de1ab8.jpeg\" alt=\"image\"></p>\n<p><strong>이벤트도출, 액터 커맨드 부착, 어그리게잇, 바운디드 컨텍스트로 묶기</strong>\n<img src=\"https://user-images.githubusercontent.com/48303857/79729452-74d1e800-832a-11ea-9b08-0d2807c69a28.jpeg\" alt=\"image\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">- 도메인 서열 분리 \n    - Core Domain:  수강신청(front), 강의관리 : 핵심 서비스이며, 연간 Up-time SLA 수준을 99.999% 목표, 배포주기는 수강신청의 경우 1주일 1회 미만, 강의관리의 경우 1개월 1회 미만\n    - Supporting Domain:   Dashboard : 경쟁력을 내기위한 서비스이며, SLA 수준은 연간 60% 이상 uptime 목표, 배포주기는 각 팀의 자율이나 표준 스프린트 주기가 1주일 이므로 1주일 1회 이상을 기준으로 함.\n    - General Domain:   결제 : 결제서비스로 3rd Party 외부 서비스를 사용하는 것이 경쟁력이 높음 (핑크색으로 이후 전환할 예정)</code></pre>\n<p><strong>폴리시 부착</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79729649-b4003900-832a-11ea-875f-c0e8dfc6ccb4.jpeg\" alt=\"image\"></p>\n<p><strong>폴리시의 이동과 컨텍스트 매핑 (Blue는 Pub/Sub, Orange는 Req/Resp)</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79729705-c67a7280-832a-11ea-828f-fc0cc5510e17.jpeg\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79729768-d72ae880-832a-11ea-9900-8e0e0e281d87.jpeg\" alt=\"image\"></p>\n<p><strong>완성된 1차 모형</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79729946-15c0a300-832b-11ea-8247-4e261f22690d.jpeg\" alt=\"image\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">- View Model 추가</code></pre>\n<p><strong>1차 완성본에 대한 기능적/비기능적 요구사항을 커버하는지 검증</strong></p>\n<pre class=\"language-text\"><code class=\"language-text\">- 학생이 강의를 선택하여 수강신청 한다 (ok)\n- 학생이 결제한다 (ok -sync)\n- 수강신청이 되면 수강신청 내역이 강사의 강의시스템에 전달된다 (ok - event driven)\n- 학생이 수강신청을 취소한다 (ok)\n- 수강신청이 취소되면 결제가 취소된다 (ok)\n- 강사가 강의를 개설한다 (ok)\n- 강사가 개설된 강의를 취소한다 (ok)\n- 강사가 강의를 취소하면 학생의 수강신청이 취소된다 (ok)\n- 학생이 수강신청 내용을 조회한다 (view)\n- 강사가 강의수강 인원을 조회한다 (view)</code></pre>\n<p><strong>1차 모형에서 요구사항을 커버하도록 모델링됨</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79814397-17d14300-83b9-11ea-8c7e-3517658dff13.png\" alt=\"image\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">- 강의 신청 시 결제처리 : 서비스는 강의를 제공하는 강사의 이익을 제공해야 하기 때문에 수강신청시 결제처리에 대해서는  Request-Response 방식 처리한다.\n- 강의 관리 기능은 서비스 제공의 측면이 강하며, 한 번 등록 시 여러명이 학생들이 수강신청을 하기 때문에 수강신청(Front)에 대해 강의관리 서비스는 Async (event-driven), Eventual Consistency 방식으로 처리한다.\n- 결제시스템이 과중되면 사용자를 잠시동안 받지 않고 결제를 잠시후에 하도록 유도한다 Circuit breaker를 사용하여 \n- 학생이 강의관리에서 확인할 수 있는 수강신청내용을 수강신청시스템(프론트엔드)에서 확인할 수 있어야 한다 CQRS\n- 결제를 제외한 나머지 inter-microservice 트랜잭션: 모든 이벤트에 대해 데이터 일관성의 시점이 크리티컬하지 않은 모든 경우가 대부분이라 판단, Eventual Consistency 를 기본으로 채택함.    </code></pre>\n<h3 id=\"-헥사고날-아키텍처-다이어그램-도출\"><a href=\"#-%ED%97%A5%EC%82%AC%EA%B3%A0%EB%82%A0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8-%EB%8F%84%EC%B6%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 헥사고날 아키텍처 다이어그램 도출</h3>\n<p><img src=\"https://user-images.githubusercontent.com/63028469/79846797-d3b26280-83f9-11ea-9ad7-a7e6b4bea18e.png\" alt=\"image\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">- Chris Richardson, MSA Patterns 참고하여 Inbound adaptor와 Outbound adaptor를 구분함\n- 호출관계에서 PubSub 과 Req/Resp 를 구분함\n- 서브 도메인과 바운디드 컨텍스트의 분리:  각 팀의 KPI 별로 아래와 같이 관심 구현 스토리를 나눠가짐</code></pre>\n<h2 id=\"구현\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>구현</h2>\n<p>분석/설계 단계에서 도출된 헥사고날 아키텍처에 따라, 각 BC별로 대변되는 마이크로 서비스들을 스프링부트로 구현하였다. 구현한 각 서비스를 로컬에서 실행하는 방법은 아래와 같다 (각자의 포트넘버는 8081 ~ 808n 이다)</p>\n<pre class=\"language-text\"><code class=\"language-text\">cd courseRegistrationSystem\nmvn spring-boot:run\n\ncd paymentSystem\nmvn spring-boot:run \n\ncd lectureSystem\nmvn spring-boot:run  </code></pre>\n<h3 id=\"-ddd-의-적용\"><a href=\"#-ddd-%EC%9D%98-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· DDD 의 적용</h3>\n<ul>\n<li>각 서비스내에 도출된 핵심 Aggregate Root 객체를 Entity 로 선언하였다: (예시는 paymentSystem 마이크로 서비스). 이때 가능한 현업에서 사용하는 언어 (유비쿼터스 랭귀지)를 그대로 사용하였다. 모델링 시에 영문화 완료하였기 때문에 그대로 개발하는데 큰 지장이 없었다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package skademy;\n\nimport javax.persistence.*;\nimport org.springframework.beans.BeanUtils;\nimport java.util.List;\n\n@Entity\n@Table(name=&quot;PaymentSystem_table&quot;)\npublic class PaymentSystem {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private Long id;\n    private Long courseId;\n\n    @PostPersist\n    public void onPostPersist(){\n        try {\n            Thread.currentThread().sleep((long) (400 + Math.random() * 220));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        PaymentCompleted paymentCompleted = new PaymentCompleted();\n        BeanUtils.copyProperties(this, paymentCompleted);\n        paymentCompleted.publish();\n    }\n\n    @PostRemove\n    public void onPostRemove(){\n        PaymentCanceled paymentCanceled = new PaymentCanceled();\n        BeanUtils.copyProperties(this, paymentCanceled);\n        paymentCanceled.publish();\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public Long getCourseId() {\n        return courseId;\n    }\n\n    public void setCourseId(Long courseId) {\n        this.courseId = courseId;\n    }\n}</code></pre>\n<ul>\n<li>Entity Pattern 과 Repository Pattern 을 적용하여 JPA 를 통하여 다양한 데이터소스 유형 (RDB) 에 대한 별도의 처리가 없도록 데이터 접근 어댑터를 자동 생성하기 위하여 Spring Data REST 의 RestRepository 를 적용하였다</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package skademy;\n\nimport org.springframework.data.repository.PagingAndSortingRepository;\n\npublic interface PaymentSystemRepository extends PagingAndSortingRepository&lt;PaymentSystem, Long&gt;{\n}</code></pre>\n<ul>\n<li>적용 후 REST API 의 테스트</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># courseRegistrationSystem 서비스의 수강신청 처리\nhttp POST localhost:8081/courseRegistrationSystem lectureId=1</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79857038-272bad00-8408-11ea-8096-7f54b482ea54.png\" alt=\"image\"></p>\n<pre class=\"language-text\"><code class=\"language-text\"># 주문 상태 확인\nhttp localhost:8081/courseRegistrationSystem</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79857153-4d514d00-8408-11ea-83be-cf9e002c9ce5.png\" alt=\"image\"></p>\n<h3 id=\"-동기식-호출-과-fallback-처리\"><a href=\"#-%EB%8F%99%EA%B8%B0%EC%8B%9D-%ED%98%B8%EC%B6%9C-%EA%B3%BC-fallback-%EC%B2%98%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 동기식 호출 과 Fallback 처리</h3>\n<p>분석단계에서의 조건 중 하나로 수강신청(courseRegistrationSystem)->결제(paymentSystem) 간의 호출은 동기식 일관성을 유지하는 트랜잭션으로 처리하기로 하였다. 호출 프로토콜은 이미 앞서 Rest Repository 에 의해 노출되어있는 REST 서비스를 FeignClient 를 이용하여 호출하도록 한다. </p>\n<ul>\n<li>결제서비스를 호출하기 위하여 Stub과 (FeignClient) 를 이용하여 Service 대행 인터페이스 (Proxy) 를 구현 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># (courseRegistrationSystem) PaymentService.java\n\n@FeignClient(name =&quot;paymentSystems&quot;, url=&quot;http://52.231.118.204:8080&quot;)\npublic interface PaymentService {\n    @RequestMapping(method = RequestMethod.POST, value = &quot;/paymentSystems&quot;, consumes = &quot;application/json&quot;)\n    void makePayment(PaymentSystem paymentSystem);\n\n}</code></pre>\n<ul>\n<li>수강신청 직후(@PostPersist) 결제를 요청하도록 처리</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">#CourseRegistrationSystem.java (Entity)\n\n    @PostPersist\n    public void onPostPersist(){\n        CourseRegistered courseRegistered = new CourseRegistered();\n        BeanUtils.copyProperties(this, courseRegistered);\n        courseRegistered.publish();\n\n        this.setLectureId(courseRegistered.getLectureId());\n        this.setStudentId(12334);\n        this.setStatus(&quot;수강신청중&quot;);\n\n        System.out.println(&quot;##### POST CourseRegistrationSystem 수강신청 : &quot; + this);\n\n        //Following code causes dependency to external APIs\n        // it is NOT A GOOD PRACTICE. instead, Event-Policy mapping is recommended.\n\n        PaymentSystem paymentSystem = new PaymentSystem();\n        paymentSystem.setCourseId(this.id);\n        // mappings goes here\n\n        //결제 시작\n        PaymentService paymentService = Application.applicationContext.getBean(PaymentService.class);\n        paymentService.makePayment(paymentSystem);\n\n    }</code></pre>\n<ul>\n<li>동기식 호출에서는 호출 시간에 따른 타임 커플링이 발생하며, 결제 시스템이 장애가 나면 주문도 못받는다는 것을 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># 결제(paymentSystem) 서비스를 잠시 내려놓음\n\n#수강신청 처리\nhttp POST localhost:8081/courseRegistrationSystem lectureId=1   #Fail\nhttp POST localhost:8081/courseRegistrationSystem lectureId=2   #Fail</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79857341-9a352380-8408-11ea-908a-d776d192bb8e.png\" alt=\"image\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">#결제서비스 재기동\ncd paymentSystem\nmvn spring-boot:run\n\n#수강신청 처리\nhttp POST localhost:8081/courseRegistrationSystem lectureId=1   #Success\nhttp POST localhost:8081/courseRegistrationSystem lectureId=2   #Success</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79857434-c05ac380-8408-11ea-88d4-8a6ce4af0100.png\" alt=\"image\"></p>\n<ul>\n<li>또한 과도한 요청시에 서비스 장애가 도미노 처럼 벌어질 수 있다. (서킷브레이커, 폴백 처리는 운영단계에서 설명한다.)</li>\n</ul>\n<h3 id=\"-비동기식-호출--시간적-디커플링--장애격리--최종-eventual-일관성-테스트\"><a href=\"#-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%8B%9D-%ED%98%B8%EC%B6%9C--%EC%8B%9C%EA%B0%84%EC%A0%81-%EB%94%94%EC%BB%A4%ED%94%8C%EB%A7%81--%EC%9E%A5%EC%95%A0%EA%B2%A9%EB%A6%AC--%EC%B5%9C%EC%A2%85-eventual-%EC%9D%BC%EA%B4%80%EC%84%B1-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 비동기식 호출 / 시간적 디커플링 / 장애격리 / 최종 (Eventual) 일관성 테스트</h3>\n<p>결제가 이루어진 후에 수강신청시스템으로 이를 알려주는 행위는 동기식이 아니라 비 동기식으로 처리하여 수강신청 완료처리를 위하여 결제가 블로킹 되지 않도록 처리한다.</p>\n<ul>\n<li>이를 위하여 결제시스템에 기록을 남긴 후에 곧바로 결제완료이 되었다는 도메인 이벤트를 카프카로 송출한다(Publish)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">...\n    @PostPersist\n    public void onPostPersist(){\n   \n        PaymentCompleted paymentCompleted = new PaymentCompleted();\n        BeanUtils.copyProperties(this, paymentCompleted);\n        paymentCompleted.publish();\n    }</code></pre>\n<ul>\n<li>수강신청 서비스에서는 결제완료 이벤트에 대해서 이를 수신하여 자신의 정책을 처리하도록 PolicyHandler 를 구현한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">public class PolicyHandler{\n ...\n    \n    @StreamListener(KafkaProcessor.INPUT)\n    public void wheneverPaymentCompleted_수강신청완료(@Payload PaymentCompleted paymentCompleted){\n        try {\n            if (paymentCompleted.isMe()) {\n                System.out.println(&quot;##### listener 수강신청완료 : &quot; + paymentCompleted.toJson());\n                Optional&lt;CourseRegistrationSystem&gt; courseRegistrationSystemOptional = courseRegistrationSystemRepository.findById(paymentCompleted.getCourseId());\n                CourseRegistrationSystem courseRegistrationSystem = courseRegistrationSystemOptional.get();\n                courseRegistrationSystem.setStatus(&quot;결제 완료&quot;);\n                courseRegistrationSystem.setStudentId(courseRegistrationSystem.getStudentId());\n\n                courseRegistrationSystemRepository.save(courseRegistrationSystem);\n            }\n        }catch(Exception e) {\n\n        }\n    }</code></pre>\n<p>강의 시스템은 수강신청/결제와 완전히 분리되어있으며, 이벤트 수신에 따라 처리되기 때문에, 강의 시스템이 유지보수로 인해 잠시 내려간 상태라도 수강신청을 받는데 문제가 없다:</p>\n<pre class=\"language-text\"><code class=\"language-text\"># 강의 서비스 (lectureSystem) 를 잠시 내려놓음\n\n#수강신청 처리\nhttp POST localhost:8081/courseRegistrationSystem lectureId=1   #Success\nhttp POST localhost:8081/courseRegistrationSystem lectureId=2   #Success</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79857884-6d354080-8409-11ea-9307-02288463bb13.png\" alt=\"image\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">#수강신청 완료상태 까지 Event 진행확인</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79857914-79b99900-8409-11ea-8658-030267f42214.png\" alt=\"image\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">#강의 서비스 기동\ncd lectureSystem\nmvn spring-boot:run\n\n#강의수강인원 Update 확인\n콘솔창에서 확인</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/48303857/79857956-8f2ec300-8409-11ea-98dd-2dd3667855b5.png\" alt=\"image\"></p>\n<h2 id=\"운영\"><a href=\"#%EC%9A%B4%EC%98%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>운영</h2>\n<h3 id=\"-cicd-설정\"><a href=\"#-cicd-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· CI/CD 설정</h3>\n<p>각 구현체들은 각자의 source repository 에 구성되었고, 사용한 CI/CD 플랫폼은 Azure를 사용하였으며, pipeline build script 는 각 프로젝트 폴더 이하에 azure-pipeline.yml 에 포함되었다.</p>\n<ul>\n<li>devops를 활용하여 pipeline을 구성하였고, CI CD 자동화를 구현하였다.\n<img src=\"https://user-images.githubusercontent.com/18453570/79851343-2262fb00-8400-11ea-85e9-b4627f9a6d0d.PNG\" alt=\"image\"></li>\n<li>아래와 같이 pod 가 정상적으로 올라간 것을 확인하였다.\n<img src=\"https://user-images.githubusercontent.com/18453570/79851342-21ca6480-8400-11ea-914a-e80e14ea93c7.PNG\" alt=\"image\"></li>\n<li>아래와 같이 쿠버네티스에 모두 서비스로 등록된 것을 확인할 수 있다.\n<img src=\"https://user-images.githubusercontent.com/18453570/79851335-20993780-8400-11ea-988b-33018c526631.PNG\" alt=\"image\"></li>\n</ul>\n<h3 id=\"-동기식-호출--서킷-브레이킹--장애격리\"><a href=\"#-%EB%8F%99%EA%B8%B0%EC%8B%9D-%ED%98%B8%EC%B6%9C--%EC%84%9C%ED%82%B7-%EB%B8%8C%EB%A0%88%EC%9D%B4%ED%82%B9--%EC%9E%A5%EC%95%A0%EA%B2%A9%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 동기식 호출 / 서킷 브레이킹 / 장애격리</h3>\n<ul>\n<li>서킷 브레이킹 프레임워크의 선택: Spring FeignClient + Hystrix 옵션을 사용하여 구현함</li>\n</ul>\n<p>시나리오는 수강신청(courseRegistration)-->결제(payment) 시의 연결을 RESTful Request/Response 로 연동하여 구현이 되어있고, 결제 요청이 과도할 경우 CB 를 통하여 장애격리.</p>\n<ul>\n<li>Hystrix 를 설정:  요청처리 쓰레드에서 처리시간이 610 밀리가 넘어서기 시작하여 어느정도 유지되면 CB 회로가 닫히도록 (요청을 빠르게 실패처리, 차단) 설정</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># application.yml\n\nhystrix:\n  command:\n    # 전역설정\n    default:\n      execution.isolation.thread.timeoutInMilliseconds: 610</code></pre>\n<ul>\n<li>피호출 서비스(결제:payment) 의 임의 부하 처리 - 400 밀리에서 증감 220 밀리 정도 왔다갔다 하게</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># (paymentSystem) PaymentSystem.java (Entity)\n\n    @PostPersist\n    public void onPostPersist(){  //결제이력을 저장한 후 적당한 시간 끌기\n\n        ...\n        \n        try {\n            Thread.currentThread().sleep((long) (400 + Math.random() * 220));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }</code></pre>\n<ul>\n<li>부하테스터 siege 툴을 통한 서킷 브레이커 동작 확인:</li>\n</ul>\n<ul>\n<li>동시사용자 100명</li>\n<li>120초 동안 실시</li>\n</ul>\n<ul>\n<li>요청이 과도하여 CB를 동작함 요청을 차단\n<img src=\"https://user-images.githubusercontent.com/63028499/79851238-01020f00-8400-11ea-85fb-409dd5f9bfd6.PNG\" alt=\"image\"></li>\n<li>요청을 어느정도 돌려보내고나니, 기존에 밀린 일들이 처리되었고, 회로를 닫아 요청을 다시 받기 시작\n<img src=\"https://user-images.githubusercontent.com/63028499/79851242-01020f00-8400-11ea-9cc9-fdd639a91ed8.PNG\" alt=\"image\"></li>\n<li>이후 이러한 패턴이 계속 반복되면서 시스템은 도미노 현상이나 자원 소모의 폭주 없이 잘 운영됨\n<img src=\"https://user-images.githubusercontent.com/63028499/79851236-ffd0e200-83ff-11ea-9941-3e6038bbc89f.PNG\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>운영시스템은 죽지 않고 지속적으로 CB 에 의하여 적절히 회로가 열림과 닫힘이 벌어지면서 자원을 보호하고 있음을 보여줌. 하지만, 66.62% 가 성공하였고, 33.38%가 실패했다는 것은 고객 사용성에 있어 좋지 않기 때문에 Retry 설정과 동적 Scale out (replica의 자동적 추가,HPA) 을 통하여 시스템을 확장 해주는 후속처리가 필요.</li>\n<li>Availability 가 높아진 것을 확인 (siege)</li>\n</ul>\n<p><strong>오토스케일 아웃</strong></p>\n<p>앞서 CB 는 시스템을 안정되게 운영할 수 있게 해줬지만 사용자의 요청을 100% 받아들여주지 못했기 때문에 이에 대한 보완책으로 자동화된 확장 기능을 적용하고자 한다. </p>\n<ul>\n<li>결제서비스에 대한 replica 를 동적으로 늘려주도록 HPA 를 설정한다. 설정은 CPU 사용량이 15프로를 넘어서면 replica 를 10개까지 늘려준다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl autoscale deploy pay --min=1 --max=10 --cpu-percent=15</code></pre>\n<ul>\n<li>CB 에서 했던 방식대로 워크로드를 2분 동안 걸어준다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c100 -t120S -r10 --content-type &quot;application/json&quot; &#39;http://52.231.118.204:8080/courseRegistrationSystems POST {&quot;lectureId&quot;: 1}&#39;</code></pre>\n<ul>\n<li>오토스케일이 어떻게 되고 있는지 모니터링을 걸어둔다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get deploy pay -w</code></pre>\n<ul>\n<li>어느정도 시간이 흐른 후 (약 30초) 스케일 아웃이 벌어지는 것을 확인할 수 있다:\n<img src=\"https://user-images.githubusercontent.com/63028499/79851254-02cbd280-8400-11ea-9c75-4d60ce42d54d.PNG\" alt=\"image\"></li>\n<li>siege 의 로그를 보아도 전체적인 성공률이 높아진 것을 확인 할 수 있다.\n<img src=\"https://user-images.githubusercontent.com/63028499/79851251-02cbd280-8400-11ea-96e7-ea092375e77d.PNG\" alt=\"image\"></li>\n</ul>\n<h3 id=\"-무정지-재배포\"><a href=\"#-%EB%AC%B4%EC%A0%95%EC%A7%80-%EC%9E%AC%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 무정지 재배포</h3>\n<ul>\n<li>먼저 무정지 재배포가 100% 되는 것인지 확인하기 위해서 Readiness Probe 와 Autoscaler가 있는 상태에서 테스트를 진행함.\n그 결과, 100%로 배포기간 동안 Availability 가 변화없기 때문에 무정지 재배포가 성공한 것으로 확인됨.\n<img src=\"https://user-images.githubusercontent.com/18453570/79856578-79b89980-8407-11ea-9daf-697365e0a388.PNG\" alt=\"image\"></li>\n<li>이후, Readiness와 Autoscaler를 제거한 상태에서 테스트를 진행하여 Availability의 변화를 확인함. 그 결과 20% 대로 떨어진 것을 확인할 수 있음.\n<img src=\"https://user-images.githubusercontent.com/18453570/79856571-79200300-8407-11ea-84a9-946f3a2a076d.PNG\" alt=\"image\"></li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"인터넷 강의수강 시스템","anchor":"#인터넷-강의수강-시스템"},{"depth":2,"value":"서비스 시나리오","anchor":"#서비스-시나리오"},{"depth":2,"value":"체크포인트","anchor":"#체크포인트"},{"depth":2,"value":"분석/설계","anchor":"#분석설계"},{"depth":3,"value":"· Event Storming 결과","anchor":"#-event-storming-결과"},{"depth":3,"value":"· 헥사고날 아키텍처 다이어그램 도출","anchor":"#-헥사고날-아키텍처-다이어그램-도출"},{"depth":2,"value":"구현","anchor":"#구현"},{"depth":3,"value":"· DDD 의 적용","anchor":"#-ddd-의-적용"},{"depth":3,"value":"· 동기식 호출 과 Fallback 처리","anchor":"#-동기식-호출-과-fallback-처리"},{"depth":3,"value":"· 비동기식 호출 / 시간적 디커플링 / 장애격리 / 최종 (Eventual) 일관성 테스트","anchor":"#-비동기식-호출--시간적-디커플링--장애격리--최종-eventual-일관성-테스트"},{"depth":2,"value":"운영","anchor":"#운영"},{"depth":3,"value":"· CI/CD 설정","anchor":"#-cicd-설정"},{"depth":3,"value":"· 동기식 호출 / 서킷 브레이킹 / 장애격리","anchor":"#-동기식-호출--서킷-브레이킹--장애격리"},{"depth":3,"value":"· 무정지 재배포","anchor":"#-무정지-재배포"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/wireframe-generate/","title":"모델 기반 바이브코딩을 통한 프론트엔드 구현"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/ddl-to-eventstorming2/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}