{"hash":"dbe4667f391ffaebd2e2f88ca0e25610f527c243","data":{"markdownPage":{"id":"62ca8085ac028d79cee530aa8b3244cd","title":"숙소예약","description":"","path":"/example-scenario/accommodation-reservation/","timeToRead":21,"content":"<h1 id=\"숙소예약\"><a href=\"#%EC%88%99%EC%86%8C%EC%98%88%EC%95%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>숙소예약</h1>\n<p><img src=\"https://user-images.githubusercontent.com/15603058/119284989-fefe2580-bc7b-11eb-99ca-7a9e4183c16f.jpg\" alt=\"image\">\n출처 원본: <a href=\"https://github.com/msa-ez/airbnb_project\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/msa-ez/airbnb_project</a></p>\n<h2>숙소예약(AirBnB)</h2>\n<p>본 예제는 MSA/DDD/Event Storming/EDA 를 포괄하는 분석/설계/구현/운영 전단계를 커버하도록 구성한 예제입니다.\n이는 클라우드 네이티브 애플리케이션의 개발에 요구되는 체크포인트들을 통과하기 위한 예시 답안을 포함합니다.</p>\n<ul>\n<li>체크포인트 : <a href=\"https://workflowy.com/s/assessment-check-po/T5YrzcMewfo4J6LW\" target=\"_blank\" rel=\"noopener noreferrer\">https://workflowy.com/s/assessment-check-po/T5YrzcMewfo4J6LW</a></li>\n</ul>\n<h2 id=\"서비스-시나리오\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 시나리오</h2>\n<p>AirBnB 커버하기</p>\n<p><strong>기능적 요구사항</strong><br>\n1. 호스트가 임대할 숙소를 등록/수정/삭제한다.<br>\n2. 고객이 숙소를 선택하여 예약한다.<br>\n3. 예약과 동시에 결제가 진행된다.<br>\n4. 예약이 되면 예약 내역(Message)이 전달된다.<br>\n5. 고객이 예약을 취소할 수 있다.<br>\n6. 예약 사항이 취소될 경우 취소 내역(Message)이 전달된다.<br>\n7. 숙소에 후기(review)를 남길 수 있다.<br>\n8. 전체적인 숙소에 대한 정보 및 예약 상태 등을 한 화면에서 확인 할 수 있다.(viewpage)</p>\n<p><strong>비기능적 요구사항</strong><br>\n1. 트랜잭션</p>\n<ul>\n<li>\n<ol>\n<li>결제가 되지 않은 예약 건은 성립되지 않아야 한다.  (Sync 호출)</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>장애격리</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>숙소 등록 및 메시지 전송 기능이 수행되지 않더라도 예약은 365일 24시간 받을 수 있어야 한다  Async (event-driven), Eventual Consistency</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>예약 시스템이 과중되면 사용자를 잠시동안 받지 않고 잠시 후에 하도록 유도한다  Circuit breaker, fallback</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li>성능</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>모든 방에 대한 정보 및 예약 상태 등을 한번에 확인할 수 있어야 한다  (CQRS)</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>예약의 상태가 바뀔 때마다 메시지로 알림을 줄 수 있어야 한다  (Event driven)</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"체크포인트\"><a href=\"#%EC%B2%B4%ED%81%AC%ED%8F%AC%EC%9D%B8%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>체크포인트</h2>\n<ul>\n<li>\n<p>분석 설계</p>\n<ul>\n<li>\n<p>이벤트스토밍: </p>\n<ul>\n<li>스티커 색상별 객체의 의미를 제대로 이해하여 헥사고날 아키텍처와의 연계 설계에 적절히 반영하고 있는가?</li>\n<li>각 도메인 이벤트가 의미있는 수준으로 정의되었는가?</li>\n<li>어그리게잇: Command와 Event 들을 ACID 트랜잭션 단위의 Aggregate 로 제대로 묶었는가?</li>\n<li>기능적 요구사항과 비기능적 요구사항을 누락 없이 반영하였는가?    </li>\n</ul>\n</li>\n<li>\n<p>서브 도메인, 바운디드 컨텍스트 분리</p>\n<ul>\n<li>\n<p>팀별 KPI 와 관심사, 상이한 배포주기 등에 따른  Sub-domain 이나 Bounded Context 를 적절히 분리하였고 그 분리 기준의 합리성이 충분히 설명되는가?</p>\n<ul>\n<li>적어도 3개 이상 서비스 분리</li>\n</ul>\n</li>\n<li>폴리글랏 설계: 각 마이크로 서비스들의 구현 목표와 기능 특성에 따른 각자의 기술 Stack 과 저장소 구조를 다양하게 채택하여 설계하였는가?</li>\n<li>서비스 시나리오 중 ACID 트랜잭션이 크리티컬한 Use 케이스에 대하여 무리하게 서비스가 과다하게 조밀히 분리되지 않았는가?</li>\n</ul>\n</li>\n<li>\n<p>컨텍스트 매핑 / 이벤트 드리븐 아키텍처 </p>\n<ul>\n<li>업무 중요성과  도메인간 서열을 구분할 수 있는가? (Core, Supporting, General Domain)</li>\n<li>Request-Response 방식과 이벤트 드리븐 방식을 구분하여 설계할 수 있는가?</li>\n<li>장애격리: 서포팅 서비스를 제거 하여도 기존 서비스에 영향이 없도록 설계하였는가?</li>\n<li>신규 서비스를 추가 하였을때 기존 서비스의 데이터베이스에 영향이 없도록 설계(열려있는 아키택처)할 수 있는가?</li>\n<li>이벤트와 폴리시를 연결하기 위한 Correlation-key 연결을 제대로 설계하였는가?</li>\n</ul>\n</li>\n<li>\n<p>헥사고날 아키텍처</p>\n<ul>\n<li>설계 결과에 따른 헥사고날 아키텍처 다이어그램을 제대로 그렸는가?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>구현</p>\n<ul>\n<li>\n<p>[DDD] 분석단계에서의 스티커별 색상과 헥사고날 아키텍처에 따라 구현체가 매핑되게 개발되었는가?</p>\n<ul>\n<li>Entity Pattern 과 Repository Pattern 을 적용하여 JPA 를 통하여 데이터 접근 어댑터를 개발하였는가</li>\n<li>[헥사고날 아키텍처] REST Inbound adaptor 이외에 gRPC 등의 Inbound Adaptor 를 추가함에 있어서 도메인 모델의 손상을 주지 않고 새로운 프로토콜에 기존 구현체를 적응시킬 수 있는가?</li>\n<li>분석단계에서의 유비쿼터스 랭귀지 (업무현장에서 쓰는 용어) 를 사용하여 소스코드가 서술되었는가?</li>\n</ul>\n</li>\n<li>\n<p>Request-Response 방식의 서비스 중심 아키텍처 구현</p>\n<ul>\n<li>마이크로 서비스간 Request-Response 호출에 있어 대상 서비스를 어떠한 방식으로 찾아서 호출 하였는가? (Service Discovery, REST, FeignClient)</li>\n<li>서킷브레이커를 통하여  장애를 격리시킬 수 있는가?</li>\n</ul>\n</li>\n<li>\n<p>이벤트 드리븐 아키텍처의 구현</p>\n<ul>\n<li>카프카를 이용하여 PubSub 으로 하나 이상의 서비스가 연동되었는가?</li>\n<li>Correlation-key:  각 이벤트 건 (메시지)가 어떠한 폴리시를 처리할때 어떤 건에 연결된 처리건인지를 구별하기 위한 Correlation-key 연결을 제대로 구현 하였는가?</li>\n<li>Message Consumer 마이크로서비스가 장애상황에서 수신받지 못했던 기존 이벤트들을 다시 수신받아 처리하는가?</li>\n<li>Scaling-out: Message Consumer 마이크로서비스의 Replica 를 추가했을때 중복없이 이벤트를 수신할 수 있는가</li>\n<li>CQRS: Materialized View 를 구현하여, 타 마이크로서비스의 데이터 원본에 접근없이(Composite 서비스나 조인SQL 등 없이) 도 내 서비스의 화면 구성과 잦은 조회가 가능한가?</li>\n</ul>\n</li>\n<li>\n<p>폴리글랏 플로그래밍</p>\n<ul>\n<li>각 마이크로 서비스들이 하나이상의 각자의 기술 Stack 으로 구성되었는가?</li>\n<li>각 마이크로 서비스들이 각자의 저장소 구조를 자율적으로 채택하고 각자의 저장소 유형 (RDB, NoSQL, File System 등)을 선택하여 구현하였는가?</li>\n</ul>\n</li>\n<li>\n<p>API 게이트웨이</p>\n<ul>\n<li>API GW를 통하여 마이크로 서비스들의 집입점을 통일할 수 있는가?</li>\n<li>게이트웨이와 인증서버(OAuth), JWT 토큰 인증을 통하여 마이크로서비스들을 보호할 수 있는가?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>운영</p>\n<ul>\n<li>\n<p>SLA 준수</p>\n<ul>\n<li>셀프힐링: Liveness Probe 를 통하여 어떠한 서비스의 health 상태가 지속적으로 저하됨에 따라 어떠한 임계치에서 pod 가 재생되는 것을 증명할 수 있는가?</li>\n<li>서킷브레이커, 레이트리밋 등을 통한 장애격리와 성능효율을 높힐 수 있는가?</li>\n<li>오토스케일러 (HPA) 를 설정하여 확장적 운영이 가능한가?</li>\n<li>모니터링, 앨럿팅: </li>\n</ul>\n</li>\n<li>\n<p>무정지 운영 CI/CD (10)</p>\n<ul>\n<li>Readiness Probe 의 설정과 Rolling update을 통하여 신규 버전이 완전히 서비스를 받을 수 있는 상태일때 신규버전의 서비스로 전환됨을 siege 등으로 증명 </li>\n<li>Contract Test :  자동화된 경계 테스트를 통하여 구현 오류나 API 계약위반를 미리 차단 가능한가?</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"분석설계\"><a href=\"#%EB%B6%84%EC%84%9D%EC%84%A4%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>분석/설계</h2>\n<h3>AS-IS 조직 (Horizontally-Aligned)</h3>\n<p>  <img src=\"https://user-images.githubusercontent.com/77129832/119316165-96ca3680-bcb1-11eb-9a91-f2b627890bab.png\" alt=\"image\"></p>\n<h3>TO-BE 조직 (Vertically-Aligned)</h3>\n<p>  <img src=\"https://user-images.githubusercontent.com/77129832/119315258-a09f6a00-bcb0-11eb-9940-c2a82f2f7d09.png\" alt=\"image\"></p>\n<h3>Event Storming 결과</h3>\n<p><strong><a href=\"http://www.msaez.io/#/storming/QtpQtDiH1Je3wad2QxZUJVvnLzO2/6f36e16efdf8c872da3855fedf7f3ea9\" target=\"_blank\" rel=\"noopener noreferrer\">MSAEz 로 모델링한 이벤트스토밍 결과</a></strong></p>\n<p><strong>이벤트 도출</strong>\n<img src=\"https://user-images.githubusercontent.com/15603058/119298548-337fda80-bc98-11eb-9f96-7d583d156fb9.png\" alt=\"image\"></p>\n<p><strong>부적격 이벤트 탈락</strong>\n<img src=\"https://user-images.githubusercontent.com/15603058/119298594-4f837c00-bc98-11eb-9f67-ec2e882e1f33.png\" alt=\"image\"></p>\n<ul>\n<li>\n<p>과정중 도출된 잘못된 도메인 이벤트들을 걸러내는 작업을 수행함</p>\n<ul>\n<li>등록시>RoomSearched, 예약시>RoomSelected :  UI 의 이벤트이지, 업무적인 의미의 이벤트가 아니라서 제외</li>\n</ul>\n</li>\n</ul>\n<p><strong>액터, 커맨드 부착하여 읽기 좋게</strong>\n<img src=\"https://user-images.githubusercontent.com/15603058/119298993-113a8c80-bc99-11eb-9bae-4b911317d810.png\" alt=\"image\"></p>\n<p><strong>어그리게잇으로 묶기</strong>\n<img src=\"https://user-images.githubusercontent.com/15603058/119299589-2663eb00-bc9a-11eb-83b9-de7f3efe7548.png\" alt=\"image\"></p>\n<ul>\n<li>Room, Reservation, Payment, Review 은 그와 연결된 command 와 event 들에 의하여 트랜잭션이 유지되어야 하는 단위로 그들 끼리 묶어줌</li>\n</ul>\n<p><strong>바운디드 컨텍스트로 묶기</strong>\n<img src=\"https://user-images.githubusercontent.com/15603058/119300858-6c21b300-bc9c-11eb-9b3f-c85aff51658f.png\" alt=\"image\"></p>\n<ul>\n<li>\n<p>도메인 서열 분리 </p>\n<ul>\n<li>Core Domain:  reservation, room : 없어서는 안될 핵심 서비스이며, 연간 Up-time SLA 수준을 99.999% 목표, 배포주기는 reservation 의 경우 1주일 1회 미만, room 의 경우 1개월 1회 미만</li>\n<li>Supporting Domain:   message, viewpage : 경쟁력을 내기위한 서비스이며, SLA 수준은 연간 60% 이상 uptime 목표, 배포주기는 각 팀의 자율이나 표준 스프린트 주기가 1주일 이므로 1주일 1회 이상을 기준으로 함.</li>\n<li>General Domain:   payment : 결제서비스로 3rd Party 외부 서비스를 사용하는 것이 경쟁력이 높음 </li>\n</ul>\n</li>\n</ul>\n<p><strong>폴리시 부착 (괄호는 수행주체, 폴리시 부착을 둘째단계에서 해놔도 상관 없음. 전체 연계가 초기에 드러남)</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/15603058/119303664-1b608900-bca1-11eb-8667-7545f32c9fb9.png\" alt=\"image\"></p>\n<p><strong>폴리시의 이동과 컨텍스트 매핑 (점선은 Pub/Sub, 실선은 Req/Resp)</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/15603058/119304604-73e45600-bca2-11eb-8f1d-607006919fab.png\" alt=\"image\"></p>\n<p><strong>완성된 1차 모형</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/15603058/119305002-0edd3000-bca3-11eb-9cc0-1ba8b17f2432.png\" alt=\"image\"></p>\n<ul>\n<li>View Model 추가</li>\n</ul>\n<p><strong>1차 완성본에 대한 기능적/비기능적 요구사항을 커버하는지 검증</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/15603058/119306321-f110ca80-bca4-11eb-804c-a965220bad61.png\" alt=\"image\"></p>\n<ul>\n<li>호스트가 임대할 숙소를 등록/수정/삭제한다.(ok)</li>\n<li>고객이 숙소를 선택하여 예약한다.(ok)</li>\n<li>예약과 동시에 결제가 진행된다.(ok)</li>\n<li>예약이 되면 예약 내역(Message)이 전달된다.(?)</li>\n<li>고객이 예약을 취소할 수 있다.(ok)</li>\n<li>예약 사항이 취소될 경우 취소 내역(Message)이 전달된다.(?)</li>\n<li>숙소에 후기(review)를 남길 수 있다.(ok)</li>\n<li>전체적인 숙소에 대한 정보 및 예약 상태 등을 한 화면에서 확인 할 수 있다.(View-green Sticker 추가로 ok)\n</li>\n</ul>\n<p><strong>모델 수정</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/15603058/119307481-b740c380-bca6-11eb-9ee6-fda446e299bc.png\" alt=\"image\"></p>\n<ul>\n<li>수정된 모델은 모든 요구사항을 커버함.</li>\n</ul>\n<p><strong>비기능 요구사항에 대한 검증</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/15603058/119311800-79df3480-bcac-11eb-9c1b-0382d981f92f.png\" alt=\"image\"></p>\n<ul>\n<li>마이크로 서비스를 넘나드는 시나리오에 대한 트랜잭션 처리</li>\n<li>고객 예약시 결제처리:  결제가 완료되지 않은 예약은 절대 받지 않는다고 결정하여, ACID 트랜잭션 적용. 예약 완료시 사전에 방 상태를 확인하는 것과 결제처리에 대해서는 Request-Response 방식 처리</li>\n<li>결제 완료시 Host 연결 및 예약처리:  reservation 에서 room 마이크로서비스로 예약요청이 전달되는 과정에 있어서 room 마이크로 서비스가 별도의 배포주기를 가지기 때문에 Eventual Consistency 방식으로 트랜잭션 처리함.</li>\n<li>나머지 모든 inter-microservice 트랜잭션: 예약상태, 후기처리 등 모든 이벤트에 대해 데이터 일관성의 시점이 크리티컬하지 않은 모든 경우가 대부분이라 판단, Eventual Consistency 를 기본으로 채택함.</li>\n</ul>\n<p><strong>헥사고날 아키텍처 다이어그램 도출</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/80744273/119319091-fc6bf200-bcb4-11eb-9dac-0995c84a82e0.png\" alt=\"image\"></p>\n<ul>\n<li>Chris Richardson, MSA Patterns 참고하여 Inbound adaptor와 Outbound adaptor를 구분함</li>\n<li>호출관계에서 PubSub 과 Req/Resp 를 구분함</li>\n<li>서브 도메인과 바운디드 컨텍스트의 분리:  각 팀의 KPI 별로 아래와 같이 관심 구현 스토리를 나눠가짐</li>\n</ul>\n<h2 id=\"구현\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>구현</h2>\n<p>분석/설계 단계에서 도출된 헥사고날 아키텍처에 따라, 각 BC별로 대변되는 마이크로 서비스들을 스프링부트로 구현하였다. 구현한 각 서비스를 로컬에서 실행하는 방법은 아래와 같다 (각자의 포트넘버는 8081 ~ 808n 이다)</p>\n<pre class=\"language-text\"><code class=\"language-text\">mvn spring-boot:run</code></pre>\n<h3 id=\"-cqrs\"><a href=\"#-cqrs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· CQRS</h3>\n<p>숙소(Room) 의 사용가능 여부, 리뷰 및 예약/결재 등 총 Status 에 대하여 고객(Customer)이 조회 할 수 있도록 CQRS 로 구현하였다.</p>\n<ul>\n<li>room, review, reservation, payment 개별 Aggregate Status 를 통합 조회하여 성능 Issue 를 사전에 예방할 수 있다.</li>\n<li>비동기식으로 처리되어 발행된 이벤트 기반 Kafka 를 통해 수신/처리 되어 별도 Table 에 관리한다</li>\n<li>\n<p>Table 모델링 (ROOMVIEW)</p>\n<p><img src=\"https://user-images.githubusercontent.com/77129832/119319352-4b198c00-bcb5-11eb-93bc-ff0657feeb9f.png\" alt=\"image\"></p>\n</li>\n<li>viewpage MSA ViewHandler 를 통해 구현 (\"RoomRegistered\" 이벤트 발생 시, Pub/Sub 기반으로 별도 Roomview 테이블에 저장)\n<img src=\"https://user-images.githubusercontent.com/77129832/119321162-4d7ce580-bcb7-11eb-9030-29ee6272c40d.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/31723044/119350185-fccab400-bcd9-11eb-8269-61868de41cc7.png\" alt=\"image\"></li>\n<li>실제로 view 페이지를 조회해 보면 모든 room에 대한 전반적인 예약 상태, 결제 상태, 리뷰 건수 등의 정보를 종합적으로 알 수 있다\n<img src=\"https://user-images.githubusercontent.com/31723044/119357063-1b34ad80-bce2-11eb-94fb-a587261ab56f.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"-api-게이트웨이\"><a href=\"#-api-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· API 게이트웨이</h3>\n<ol>\n<li>gateway 스프링부트 App을 추가 후 application.yaml내에 각 마이크로 서비스의 routes 를 추가하고 gateway 서버의 포트를 8080 으로 설정함</li>\n</ol>\n<ul>\n<li>application.yaml 예시</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">spring:\n  profiles: docker\n  cloud:\n    gateway:\n      routes:\n        - id: payment\n          uri: http://payment:8080\n          predicates:\n            - Path=/payments/** \n        - id: room\n          uri: http://room:8080\n          predicates:\n            - Path=/rooms/**, /reviews/**, /check/**\n        - id: reservation\n          uri: http://reservation:8080\n          predicates:\n            - Path=/reservations/**\n        - id: message\n          uri: http://message:8080\n          predicates:\n            - Path=/messages/** \n        - id: viewpage\n          uri: http://viewpage:8080\n          predicates:\n            - Path= /roomviews/**\n      globalcors:\n        corsConfigurations:\n          &#39;[/**]&#39;:\n            allowedOrigins:\n              - &quot;*&quot;\n            allowedMethods:\n              - &quot;*&quot;\n            allowedHeaders:\n              - &quot;*&quot;\n            allowCredentials: true\n\nserver:\n  port: 8080            </code></pre>\n<ol start=\"2\">\n<li>Kubernetes용 Deployment.yaml 을 작성하고 Kubernetes에 Deploy를 생성함</li>\n</ol>\n<ul>\n<li>Deployment.yaml 예시</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gateway\n  namespace: airbnb\n  labels:\n    app: gateway\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: gateway\n  template:\n    metadata:\n      labels:\n        app: gateway\n    spec:\n      containers:\n        - name: gateway\n          image: 247785678011.dkr.ecr.us-east-2.amazonaws.com/gateway:1.0\n          ports:\n            - containerPort: 8080</code></pre>\n<ul>\n<li>Deploy 생성</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f deployment.yaml</code></pre>\n<ul>\n<li>Kubernetes에 생성된 Deploy. 확인\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/80744273/119321943-1d821200-bcb8-11eb-98d7-bf8def9ebf80.png\" alt=\"image\"></p>\n<ol start=\"3\">\n<li>Kubernetes용 Service.yaml을 작성하고 Kubernetes에 Service/LoadBalancer을 생성하여 Gateway 엔드포인트를 확인함. </li>\n</ol>\n<ul>\n<li>Service.yaml 예시</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: v1\n  kind: Service\n  metadata:\n    name: gateway\n    namespace: airbnb\n    labels:\n      app: gateway\n  spec:\n    ports:\n      - port: 8080\n        targetPort: 8080\n    selector:\n      app: gateway\n    type:\n      LoadBalancer           </code></pre>\n<ul>\n<li>Service 생성</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f service.yaml            </code></pre>\n<ul>\n<li>API Gateay 엔드포인트 확인</li>\n<li>Service  및 엔드포인트 확인 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get svc -n airbnb           </code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/80744273/119318358-2a046b80-bcb4-11eb-9d46-ef2d498c2cff.png\" alt=\"image\"></p>\n<h2 id=\"correlation\"><a href=\"#correlation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Correlation</h2>\n<p>Airbnb 프로젝트에서는 PolicyHandler에서 처리 시 어떤 건에 대한 처리인지를 구별하기 위한 Correlation-key 구현을\n이벤트 클래스 안의 변수로 전달받아 서비스간 연관된 처리를 정확하게 구현하고 있습니다. </p>\n<p>아래의 구현 예제를 보면</p>\n<p>예약(Reservation)을 하면 동시에 연관된 방(Room), 결제(Payment) 등의 서비스의 상태가 적당하게 변경이 되고,\n예약건의 취소를 수행하면 다시 연관된 방(Room), 결제(Payment) 등의 서비스의 상태값 등의 데이터가 적당한 상태로 변경되는 것을\n확인할 수 있습니다.</p>\n<p>예약등록\n<img src=\"https://user-images.githubusercontent.com/31723044/119320227-54572880-bcb6-11eb-973b-a9a5cd1f7e21.png\" alt=\"image\">\n예약 후 - 방 상태\n<img src=\"https://user-images.githubusercontent.com/31723044/119320300-689b2580-bcb6-11eb-933e-98be5aadca61.png\" alt=\"image\">\n예약 후 - 예약 상태\n<img src=\"https://user-images.githubusercontent.com/31723044/119320390-810b4000-bcb6-11eb-8c62-48f6765c570a.png\" alt=\"image\">\n예약 후 - 결제 상태\n<img src=\"https://user-images.githubusercontent.com/31723044/119320524-a39d5900-bcb6-11eb-864b-173711eb9e94.png\" alt=\"image\">\n예약 취소\n<img src=\"https://user-images.githubusercontent.com/31723044/119320595-b6b02900-bcb6-11eb-8d8d-0d5c59603c72.png\" alt=\"image\">\n취소 후 - 방 상태\n<img src=\"https://user-images.githubusercontent.com/31723044/119320680-ccbde980-bcb6-11eb-8b7c-66315329aafe.png\" alt=\"image\">\n취소 후 - 예약 상태\n<img src=\"https://user-images.githubusercontent.com/31723044/119320747-dcd5c900-bcb6-11eb-9c44-fd3781c7c55f.png\" alt=\"image\">\n취소 후 - 결제 상태\n<img src=\"https://user-images.githubusercontent.com/31723044/119320806-ee1ed580-bcb6-11eb-8ccf-8c81385cc8ba.png\" alt=\"image\"></p>\n<h3 id=\"-동기식-호출sync-과-fallback-처리\"><a href=\"#-%EB%8F%99%EA%B8%B0%EC%8B%9D-%ED%98%B8%EC%B6%9Csync-%EA%B3%BC-fallback-%EC%B2%98%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 동기식 호출(Sync) 과 Fallback 처리</h3>\n<p>분석 단계에서의 조건 중 하나로 예약 시 숙소(room) 간의 예약 가능 상태 확인 호출은 동기식 일관성을 유지하는 트랜잭션으로 처리하기로 하였다. 호출 프로토콜은 이미 앞서 Rest Repository 에 의해 노출되어있는 REST 서비스를 FeignClient 를 이용하여 호출하도록 한다. 또한 예약(reservation) -> 결제(payment) 서비스도 동기식으로 처리하기로 하였다.</p>\n<ul>\n<li>룸, 결제 서비스를 호출하기 위하여 Stub과 (FeignClient) 를 이용하여 Service 대행 인터페이스 (Proxy) 를 구현 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># PaymentService.java\n\npackage airbnb.external;\n\n&lt;import문 생략&gt;\n\n@FeignClient(name=&quot;Payment&quot;, url=&quot;${prop.room.url}&quot;)\npublic interface PaymentService {\n\n    @RequestMapping(method= RequestMethod.POST, path=&quot;/payments&quot;)\n    public void approvePayment(@RequestBody Payment payment);\n\n}\n\n# RoomService.java\n\npackage airbnb.external;\n\n&lt;import문 생략&gt;\n\n@FeignClient(name=&quot;Room&quot;, url=&quot;${prop.room.url}&quot;)\npublic interface RoomService {\n\n    @RequestMapping(method= RequestMethod.GET, path=&quot;/check/chkAndReqReserve&quot;)\n    public boolean chkAndReqReserve(@RequestParam(&quot;roomId&quot;) long roomId);\n\n}</code></pre>\n<ul>\n<li>예약 요청을 받은 직후(@PostPersist) 가능상태 확인 및 결제를 동기(Sync)로 요청하도록 처리</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># Reservation.java (Entity)\n\n    @PostPersist\n    public void onPostPersist(){\n\n        ////////////////////////////////\n        // RESERVATION에 INSERT 된 경우 \n        ////////////////////////////////\n\n        ////////////////////////////////////\n        // 예약 요청(reqReserve) 들어온 경우\n        ////////////////////////////////////\n\n        // 해당 ROOM이 Available한 상태인지 체크\n        boolean result = ReservationApplication.applicationContext.getBean(airbnb.external.RoomService.class)\n                        .chkAndReqReserve(this.getRoomId());\n        System.out.println(&quot;######## Check Result : &quot; + result);\n\n        if(result) { \n\n            // 예약 가능한 상태인 경우(Available)\n\n            //////////////////////////////\n            // PAYMENT 결제 진행 (POST방식) - SYNC 호출\n            //////////////////////////////\n            airbnb.external.Payment payment = new airbnb.external.Payment();\n            payment.setRsvId(this.getRsvId());\n            payment.setRoomId(this.getRoomId());\n            payment.setStatus(&quot;paid&quot;);\n            ReservationApplication.applicationContext.getBean(airbnb.external.PaymentService.class)\n                .approvePayment(payment);\n\n            /////////////////////////////////////\n            // 이벤트 발행 --&gt; ReservationCreated\n            /////////////////////////////////////\n            ReservationCreated reservationCreated = new ReservationCreated();\n            BeanUtils.copyProperties(this, reservationCreated);\n            reservationCreated.publishAfterCommit();\n        }\n    }</code></pre>\n<ul>\n<li>동기식 호출에서는 호출 시간에 따른 타임 커플링이 발생하며, 결제 시스템이 장애가 나면 주문도 못받는다는 것을 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># 결제 (pay) 서비스를 잠시 내려놓음 (ctrl+c)\n\n# 예약 요청\nhttp POST http://localhost:8088/reservations roomId=1 status=reqReserve   #Fail\n\n# 결제서비스 재기동\ncd payment\nmvn spring-boot:run\n\n# 예약 요청\nhttp POST http://localhost:8088/reservations roomId=1 status=reqReserve   #Success</code></pre>\n<ul>\n<li>또한 과도한 요청시에 서비스 장애가 도미노 처럼 벌어질 수 있다. (서킷브레이커, 폴백 처리는 운영단계에서 설명한다.)</li>\n</ul>\n<h3 id=\"-비동기식-호출--시간적-디커플링--장애격리--최종-eventual-일관성-테스트\"><a href=\"#-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%8B%9D-%ED%98%B8%EC%B6%9C--%EC%8B%9C%EA%B0%84%EC%A0%81-%EB%94%94%EC%BB%A4%ED%94%8C%EB%A7%81--%EC%9E%A5%EC%95%A0%EA%B2%A9%EB%A6%AC--%EC%B5%9C%EC%A2%85-eventual-%EC%9D%BC%EA%B4%80%EC%84%B1-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 비동기식 호출 / 시간적 디커플링 / 장애격리 / 최종 (Eventual) 일관성 테스트</h3>\n<p>결제가 이루어진 후에 숙소 시스템의 상태가 업데이트 되고, 예약 시스템의 상태가 업데이트 되며, 예약 및 취소 메시지가 전송되는 시스템과의 통신 행위는 비동기식으로 처리한다.</p>\n<ul>\n<li>이를 위하여 결제가 승인되면 결제가 승인 되었다는 이벤트를 카프카로 송출한다. (Publish)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># Payment.java\n\npackage airbnb;\n\nimport javax.persistence.*;\nimport org.springframework.beans.BeanUtils;\n\n@Entity\n@Table(name=&quot;Payment_table&quot;)\npublic class Payment {\n\n    ....\n\n    @PostPersist\n    public void onPostPersist(){\n        ////////////////////////////\n        // 결제 승인 된 경우\n        ////////////////////////////\n\n        // 이벤트 발행 -&gt; PaymentApproved\n        PaymentApproved paymentApproved = new PaymentApproved();\n        BeanUtils.copyProperties(this, paymentApproved);\n        paymentApproved.publishAfterCommit();\n    }\n    \n    ....\n}</code></pre>\n<ul>\n<li>예약 시스템에서는 결제 승인 이벤트에 대해서 이를 수신하여 자신의 정책을 처리하도록 PolicyHandler 를 구현한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># Reservation.java\n\npackage airbnb;\n\n    @PostUpdate\n    public void onPostUpdate(){\n    \n        ....\n\n        if(this.getStatus().equals(&quot;reserved&quot;)) {\n\n            ////////////////////\n            // 예약 확정된 경우\n            ////////////////////\n\n            // 이벤트 발생 --&gt; ReservationConfirmed\n            ReservationConfirmed reservationConfirmed = new ReservationConfirmed();\n            BeanUtils.copyProperties(this, reservationConfirmed);\n            reservationConfirmed.publishAfterCommit();\n        }\n        \n        ....\n        \n    }</code></pre>\n<p>그 외 메시지 서비스는 예약/결제와 완전히 분리되어있으며, 이벤트 수신에 따라 처리되기 때문에, 메시지 서비스가 유지보수로 인해 잠시 내려간 상태 라도 예약을 받는데 문제가 없다.</p>\n<pre class=\"language-text\"><code class=\"language-text\"># 메시지 서비스 (message) 를 잠시 내려놓음 (ctrl+c)\n\n# 예약 요청\nhttp POST http://localhost:8088/reservations roomId=1 status=reqReserve   #Success\n\n# 예약 상태 확인\nhttp GET localhost:8088/reservations    #메시지 서비스와 상관없이 예약 상태는 정상 확인</code></pre>\n<h2 id=\"운영\"><a href=\"#%EC%9A%B4%EC%98%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>운영</h2>\n<h3 id=\"-cicd-설정\"><a href=\"#-cicd-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· CI/CD 설정</h3>\n<p>각 구현체들은 각자의 source repository 에 구성되었고, 사용한 CI/CD는 buildspec.yml을 이용한 AWS codebuild를 사용하였습니다.</p>\n<ul>\n<li>CodeBuild 프로젝트를 생성하고 AWS_ACCOUNT_ID, KUBE_URL, KUBE_TOKEN 환경 변수 세팅을 한다</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">SA 생성\nkubectl apply -f eks-admin-service-account.yml</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119293259-ff52ec80-bc8c-11eb-8671-b9a226811762.PNG\" alt=\"codebuild(sa)\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">Role 생성\nkubectl apply -f eks-admin-cluster-role-binding.yml</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119293300-1abdf780-bc8d-11eb-9b07-ad173237efb1.PNG\" alt=\"codebuild(role)\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">Token 확인\nkubectl -n kube-system get secret\nkubectl -n kube-system describe secret eks-admin-token-rjpmq</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119293511-84d69c80-bc8d-11eb-99c7-e8929e6a41e4.PNG\" alt=\"codebuild(token)\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">buildspec.yml 파일 \n마이크로 서비스 room의 yml 파일 이용하도록 세팅</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119283849-30292680-bc79-11eb-9f86-cbb715e74846.PNG\" alt=\"codebuild(buildspec)\"></p>\n<ul>\n<li>codebuild 실행</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">codebuild 프로젝트 및 빌드 이력</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119283851-315a5380-bc79-11eb-9b2a-b4522d22d009.PNG\" alt=\"codebuild(프로젝트)\">\n<img src=\"https://user-images.githubusercontent.com/38099203/119283850-30c1bd00-bc79-11eb-9547-1ff1f62e48a4.PNG\" alt=\"codebuild(로그)\"></p>\n<ul>\n<li>codebuild 빌드 내역 (Message 서비스 세부)</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/31723044/119385500-2b0fba00-bd01-11eb-861b-cc31910ff945.png\" alt=\"image\"></p>\n<ul>\n<li>codebuild 빌드 내역 (전체 이력 조회)</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/31723044/119385401-087da100-bd01-11eb-8b69-ce222e6bb71e.png\" alt=\"image\"></p>\n<h3 id=\"-동기식-호출--서킷-브레이킹--장애격리\"><a href=\"#-%EB%8F%99%EA%B8%B0%EC%8B%9D-%ED%98%B8%EC%B6%9C--%EC%84%9C%ED%82%B7-%EB%B8%8C%EB%A0%88%EC%9D%B4%ED%82%B9--%EC%9E%A5%EC%95%A0%EA%B2%A9%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 동기식 호출 / 서킷 브레이킹 / 장애격리</h3>\n<ul>\n<li>서킷 브레이킹 프레임워크의 선택: istio 사용하여 구현함</li>\n</ul>\n<p>시나리오는 예약(reservation)--> 룸(room) 시의 연결을 RESTful Request/Response 로 연동하여 구현이 되어있고, 예약 요청이 과도할 경우 CB 를 통하여 장애격리.</p>\n<ul>\n<li>DestinationRule 를 생성하여 circuit break 가 발생할 수 있도록 설정\n최소 connection pool 설정</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># destination-rule.yml\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: dr-room\n  namespace: airbnb\nspec:\n  host: room\n  trafficPolicy:\n    connectionPool:\n      http:\n        http1MaxPendingRequests: 1\n        maxRequestsPerConnection: 1\n#    outlierDetection:\n#      interval: 1s\n#      consecutiveErrors: 1\n#      baseEjectionTime: 10s\n#      maxEjectionPercent: 100</code></pre>\n<ul>\n<li>istio-injection 활성화 및 room pod container 확인</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get ns -L istio-injection\nkubectl label namespace airbnb istio-injection=enabled </code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119295450-d6812600-bc91-11eb-8aad-46eeac968a41.PNG\" alt=\"Circuit Breaker(istio-enjection)\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119295568-0cbea580-bc92-11eb-9d2b-8580f3576b47.PNG\" alt=\"Circuit Breaker(pod)\"></p>\n<ul>\n<li>부하테스터 siege 툴을 통한 서킷 브레이커 동작 확인:</li>\n</ul>\n<p>siege 실행</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl run siege --image=apexacme/siege-nginx -n airbnb\nkubectl exec -it siege -c siege -n airbnb -- /bin/bash</code></pre>\n<ul>\n<li>동시사용자 1로 부하 생성 시 모두 정상</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c1 -t10S -v --content-type &quot;application/json&quot; &#39;http://room:8080/rooms POST {&quot;desc&quot;: &quot;Beautiful House3&quot;}&#39;\n\n** SIEGE 4.0.4\n** Preparing 1 concurrent users for battle.\nThe server is now under siege...\nHTTP/1.1 201     0.49 secs:     254 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.05 secs:     254 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     254 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.03 secs:     254 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     254 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     254 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.03 secs:     254 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.03 secs:     254 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.03 secs:     254 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.03 secs:     256 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.03 secs:     256 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     256 bytes ==&gt; POST http://room:8080/rooms</code></pre>\n<ul>\n<li>동시사용자 2로 부하 생성 시 503 에러 168개 발생</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c2 -t10S -v --content-type &quot;application/json&quot; &#39;http://room:8080/rooms POST {&quot;desc&quot;: &quot;Beautiful House3&quot;}&#39;\n\n** SIEGE 4.0.4\n** Preparing 2 concurrent users for battle.\nThe server is now under siege...\nHTTP/1.1 201     0.02 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 503     0.10 secs:      81 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.04 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.05 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.22 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.08 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.07 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 503     0.01 secs:      81 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.03 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 503     0.01 secs:      81 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     258 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 503     0.00 secs:      81 bytes ==&gt; POST http://room:8080/rooms\n\nLifting the server siege...\nTransactions:                   1904 hits\nAvailability:                  91.89 %\nElapsed time:                   9.89 secs\nData transferred:               0.48 MB\nResponse time:                  0.01 secs\nTransaction rate:             192.52 trans/sec\nThroughput:                     0.05 MB/sec\nConcurrency:                    1.98\nSuccessful transactions:        1904\nFailed transactions:             168\nLongest transaction:            0.03\nShortest transaction:           0.00</code></pre>\n<ul>\n<li>kiali 화면에 서킷 브레이크 확인</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119298194-7f7e4f80-bc97-11eb-8447-678eece29e5c.PNG\" alt=\"Circuit Breaker(kiali)\"></p>\n<ul>\n<li>다시 최소 Connection pool로 부하 다시 정상 확인</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">** SIEGE 4.0.4\n** Preparing 1 concurrent users for battle.\nThe server is now under siege...\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.03 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.00 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.00 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.00 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\n\n:\n:\n\nLifting the server siege...\nTransactions:                   1139 hits\nAvailability:                 100.00 %\nElapsed time:                   9.19 secs\nData transferred:               0.28 MB\nResponse time:                  0.01 secs\nTransaction rate:             123.94 trans/sec\nThroughput:                     0.03 MB/sec\nConcurrency:                    0.98\nSuccessful transactions:        1139\nFailed transactions:               0\nLongest transaction:            0.04\nShortest transaction:           0.00</code></pre>\n<ul>\n<li>운영시스템은 죽지 않고 지속적으로 CB 에 의하여 적절히 회로가 열림과 닫힘이 벌어지면서 자원을 보호하고 있음을 보여줌.\nvirtualhost 설정과 동적 Scale out (replica의 자동적 추가,HPA) 을 통하여 시스템을 확장 해주는 후속처리가 필요.</li>\n</ul>\n<p><strong>오토스케일 아웃</strong>\n앞서 CB 는 시스템을 안정되게 운영할 수 있게 해줬지만 사용자의 요청을 100% 받아들여주지 못했기 때문에 이에 대한 보완책으로 자동화된 확장 기능을 적용하고자 한다. </p>\n<ul>\n<li>room deployment.yml 파일에 resources 설정을 추가한다\n<img src=\"https://user-images.githubusercontent.com/38099203/119283787-0a038680-bc79-11eb-8d9b-d8aed8847fef.PNG\" alt=\"Autoscale (HPA)\"></li>\n<li>room 서비스에 대한 replica 를 동적으로 늘려주도록 HPA 를 설정한다. 설정은 CPU 사용량이 50프로를 넘어서면 replica 를 10개까지 늘려준다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl autoscale deployment room -n airbnb --cpu-percent=50 --min=1 --max=10</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119299474-ec92e480-bc99-11eb-9bc3-8c5246b02783.PNG\" alt=\"Autoscale (HPA)(kubectl autoscale 명령어)\"></p>\n<ul>\n<li>부하를 동시사용자 100명, 1분 동안 걸어준다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c100 -t60S -v --content-type &quot;application/json&quot; &#39;http://room:8080/rooms POST {&quot;desc&quot;: &quot;Beautiful House3&quot;}&#39;</code></pre>\n<ul>\n<li>오토스케일이 어떻게 되고 있는지 모니터링을 걸어둔다</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get deploy room -w -n airbnb </code></pre>\n<ul>\n<li>어느정도 시간이 흐른 후 (약 30초) 스케일 아웃이 벌어지는 것을 확인할 수 있다:\n<img src=\"https://user-images.githubusercontent.com/38099203/119299704-6a56f000-bc9a-11eb-9ba8-55e5978f3739.PNG\" alt=\"Autoscale (HPA)(모니터링)\"></li>\n<li>siege 의 로그를 보아도 전체적인 성공률이 높아진 것을 확인 할 수 있다. </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">Lifting the server siege...\nTransactions:                  15615 hits\nAvailability:                 100.00 %\nElapsed time:                  59.44 secs\nData transferred:               3.90 MB\nResponse time:                  0.32 secs\nTransaction rate:             262.70 trans/sec\nThroughput:                     0.07 MB/sec\nConcurrency:                   85.04\nSuccessful transactions:       15675\nFailed transactions:               0\nLongest transaction:            2.55\nShortest transaction:           0.01</code></pre>\n<h3 id=\"-무정지-재배포\"><a href=\"#-%EB%AC%B4%EC%A0%95%EC%A7%80-%EC%9E%AC%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 무정지 재배포</h3>\n<ul>\n<li>먼저 무정지 재배포가 100% 되는 것인지 확인하기 위해서 Autoscaler 이나 CB 설정을 제거함</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete destinationrules dr-room -n airbnb\nkubectl label namespace airbnb istio-injection-\nkubectl delete hpa room -n airbnb</code></pre>\n<ul>\n<li>seige 로 배포작업 직전에 워크로드를 모니터링 함.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c100 -t60S -r10 -v --content-type &quot;application/json&quot; &#39;http://room:8080/rooms POST {&quot;desc&quot;: &quot;Beautiful House3&quot;}&#39;\n\n** SIEGE 4.0.4\n** Preparing 1 concurrent users for battle.\nThe server is now under siege...\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.03 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.00 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.02 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms\nHTTP/1.1 201     0.01 secs:     260 bytes ==&gt; POST http://room:8080/rooms</code></pre>\n<ul>\n<li>새버전으로의 배포 시작</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl set image ...</code></pre>\n<ul>\n<li>seige 의 화면으로 넘어가서 Availability 가 100% 미만으로 떨어졌는지 확인</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c100 -t60S -r10 -v --content-type &quot;application/json&quot; &#39;http://room:8080/rooms POST {&quot;desc&quot;: &quot;Beautiful House3&quot;}&#39;\n\n\nTransactions:                   7732 hits\nAvailability:                  87.32 %\nElapsed time:                  17.12 secs\nData transferred:               1.93 MB\nResponse time:                  0.18 secs\nTransaction rate:             451.64 trans/sec\nThroughput:                     0.11 MB/sec\nConcurrency:                   81.21\nSuccessful transactions:        7732\nFailed transactions:            1123\nLongest transaction:            0.94\nShortest transaction:           0.00</code></pre>\n<ul>\n<li>배포기간중 Availability 가 평소 100%에서 87% 대로 떨어지는 것을 확인. 원인은 쿠버네티스가 성급하게 새로 올려진 서비스를 READY 상태로 인식하여 서비스 유입을 진행한 것이기 때문. 이를 막기위해 Readiness Probe 를 설정함</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># deployment.yaml 의 readiness probe 의 설정:</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119301424-71333200-bc9d-11eb-9f75-f8c98fce70a3.PNG\" alt=\"probe설정\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f kubernetes/deployment.yml</code></pre>\n<ul>\n<li>동일한 시나리오로 재배포 한 후 Availability 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">Lifting the server siege...\nTransactions:                  27657 hits\nAvailability:                 100.00 %\nElapsed time:                  59.41 secs\nData transferred:               6.91 MB\nResponse time:                  0.21 secs\nTransaction rate:             465.53 trans/sec\nThroughput:                     0.12 MB/sec\nConcurrency:                   99.60\nSuccessful transactions:       27657\nFailed transactions:               0\nLongest transaction:            1.20\nShortest transaction:           0.00</code></pre>\n<p>배포기간 동안 Availability 가 변화없기 때문에 무정지 재배포가 성공한 것으로 확인됨.</p>\n<h2 id=\"self-healing-liveness-probe\"><a href=\"#self-healing-liveness-probe\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Self-healing (Liveness Probe)</h2>\n<ul>\n<li>room deployment.yml 파일 수정 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">콘테이너 실행 후 /tmp/healthy 파일을 만들고 \n90초 후 삭제\nlivenessProbe에 &#39;cat /tmp/healthy&#39;으로 검증하도록 함</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119318677-8ff0f300-bcb4-11eb-950a-e3c15feed325.PNG\" alt=\"deployment yml tmp healthy\"></p>\n<ul>\n<li>kubectl describe pod room -n airbnb 실행으로 확인</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">컨테이너 실행 후 90초 동인은 정상이나 이후 /tmp/healthy 파일이 삭제되어 livenessProbe에서 실패를 리턴하게 됨\npod 정상 상태 일때 pod 진입하여 /tmp/healthy 파일 생성해주면 정상 상태 유지됨</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119318781-a9923a80-bcb4-11eb-9783-65051ec0d6e8.PNG\" alt=\"get pod tmp healthy\">\n<img src=\"https://user-images.githubusercontent.com/38099203/119319050-f118c680-bcb4-11eb-8bca-aa135c1e067e.PNG\" alt=\"touch tmp healthy\"></p>\n<h2 id=\"config-map-persistence-volume\"><a href=\"#config-map-persistence-volume\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Config Map/ Persistence Volume</h2>\n<ul>\n<li>Persistence Volume</li>\n</ul>\n<p>1: EFS 생성</p>\n<pre class=\"language-text\"><code class=\"language-text\">EFS 생성 시 클러스터의 VPC를 선택해야함</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119364089-85048580-bce9-11eb-8001-1c20a93b8e36.PNG\" alt=\"클러스터의 VPC를 선택해야함\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119343415-60041880-bcd1-11eb-9c25-1695c858f6aa.PNG\" alt=\"EFS생성\"></p>\n<ol start=\"2\">\n<li>EFS 계정 생성 및 ROLE 바인딩</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f efs-sa.yml\n\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: efs-provisioner\n  namespace: airbnb\n\n\nkubectl get ServiceAccount efs-provisioner -n airbnb\nNAME              SECRETS   AGE\nefs-provisioner   1         9m1s  \n  \n  \n  \nkubectl apply -f efs-rbac.yaml\n\nnamespace를 반듯이 수정해야함\n\n  \napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: efs-provisioner-runner\n  namespace: airbnb\nrules:\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;persistentvolumes&quot;]\n    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;delete&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;persistentvolumeclaims&quot;]\n    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;update&quot;]\n  - apiGroups: [&quot;storage.k8s.io&quot;]\n    resources: [&quot;storageclasses&quot;]\n    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;events&quot;]\n    verbs: [&quot;create&quot;, &quot;update&quot;, &quot;patch&quot;]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: run-efs-provisioner\n  namespace: airbnb\nsubjects:\n  - kind: ServiceAccount\n    name: efs-provisioner\n     # replace with namespace where provisioner is deployed\n    namespace: airbnb\nroleRef:\n  kind: ClusterRole\n  name: efs-provisioner-runner\n  apiGroup: rbac.authorization.k8s.io\n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: leader-locking-efs-provisioner\n  namespace: airbnb\nrules:\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;endpoints&quot;]\n    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: leader-locking-efs-provisioner\n  namespace: airbnb\nsubjects:\n  - kind: ServiceAccount\n    name: efs-provisioner\n    # replace with namespace where provisioner is deployed\n    namespace: airbnb\nroleRef:\n  kind: Role\n  name: leader-locking-efs-provisioner\n  apiGroup: rbac.authorization.k8s.io</code></pre>\n<ol start=\"3\">\n<li>EFS Provisioner 배포</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f efs-provisioner-deploy.yml\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: efs-provisioner\n  namespace: airbnb\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: efs-provisioner\n  template:\n    metadata:\n      labels:\n        app: efs-provisioner\n    spec:\n      serviceAccount: efs-provisioner\n      containers:\n        - name: efs-provisioner\n          image: quay.io/external_storage/efs-provisioner:latest\n          env:\n            - name: FILE_SYSTEM_ID\n              value: fs-562f9c36\n            - name: AWS_REGION\n              value: ap-northeast-2\n            - name: PROVISIONER_NAME\n              value: my-aws.com/aws-efs\n          volumeMounts:\n            - name: pv-volume\n              mountPath: /persistentvolumes\n      volumes:\n        - name: pv-volume\n          nfs:\n            server: fs-562f9c36.efs.ap-northeast-2.amazonaws.com\n            path: /\n\n\nkubectl get Deployment efs-provisioner -n airbnb\nNAME              READY   UP-TO-DATE   AVAILABLE   AGE\nefs-provisioner   1/1     1            1           11m</code></pre>\n<ol start=\"4\">\n<li>설치한 Provisioner를 storageclass에 등록</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f efs-storageclass.yml\n\n\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: aws-efs\n  namespace: airbnb\nprovisioner: my-aws.com/aws-efs\n\n\nkubectl get sc aws-efs -n airbnb\nNAME            PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE\naws-efs         my-aws.com/aws-efs      Delete          Immediate              false                  4s</code></pre>\n<ol start=\"5\">\n<li>PVC(PersistentVolumeClaim) 생성</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f volume-pvc.yml\n\n\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: aws-efs\n  namespace: airbnb\n  labels:\n    app: test-pvc\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: 6Ki\n  storageClassName: aws-efs\n  \n  \nkubectl get pvc aws-efs -n airbnb\nNAME      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\naws-efs   Bound    pvc-43f6fe12-b9f3-400c-ba20-b357c1639f00   6Ki        RWX            aws-efs        4m44s</code></pre>\n<ol start=\"6\">\n<li>room pod 적용</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f deployment.yml</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119349966-bd9c6300-bcd9-11eb-9f6d-08e4a3ec82f0.PNG\" alt=\"pod with pvc\"></p>\n<ol start=\"7\">\n<li>A pod에서 마운트된 경로에 파일을 생성하고 B pod에서 파일을 확인함</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">NAME                              READY   STATUS    RESTARTS   AGE\nefs-provisioner-f4f7b5d64-lt7rz   1/1     Running   0          14m\nroom-5df66d6674-n6b7n             1/1     Running   0          109s\nroom-5df66d6674-pl25l             1/1     Running   0          109s\nsiege                             1/1     Running   0          2d1h\n\n\nkubectl exec -it pod/room-5df66d6674-n6b7n room -n airbnb -- /bin/sh\n/ # cd /mnt/aws\n/mnt/aws # touch intensive_course_work</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119372712-9736f180-bcf2-11eb-8e57-1d6e3f4273a5.PNG\" alt=\"a pod에서 파일생성\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it pod/room-5df66d6674-pl25l room -n airbnb -- /bin/sh\n/ # cd /mnt/aws\n/mnt/aws # ls -al\ntotal 8\ndrwxrws--x    2 root     2000          6144 May 24 15:44 .\ndrwxr-xr-x    1 root     root            17 May 24 15:42 ..\n-rw-r--r--    1 root     2000             0 May 24 15:44 intensive_course_work</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/38099203/119373196-204e2880-bcf3-11eb-88f0-a1e91a89088a.PNG\" alt=\"b pod에서 파일생성 확인\"></p>\n<ul>\n<li>Config Map</li>\n</ul>\n<p>1: cofingmap.yml 파일 생성</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f cofingmap.yml\n\n\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: airbnb-config\n  namespace: airbnb\ndata:\n  # 단일 key-value\n  max_reservation_per_person: &quot;10&quot;\n  ui_properties_file_name: &quot;user-interface.properties&quot;</code></pre>\n<ol start=\"2\">\n<li>deployment.yml에 적용하기</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f deployment.yml\n\n\n.......\n          env:\n\t\t\t# cofingmap에 있는 단일 key-value\n            - name: MAX_RESERVATION_PER_PERSION\n              valueFrom:\n                configMapKeyRef:\n                  name: airbnb-config\n                  key: max_reservation_per_person\n           - name: UI_PROPERTIES_FILE_NAME\n              valueFrom:\n                configMapKeyRef:\n                  name: airbnb-config\n                  key: ui_properties_file_name\n          volumeMounts:\n          - mountPath: &quot;/mnt/aws&quot;\n            name: volume\n      volumes:\n        - name: volume\n          persistentVolumeClaim:\n            claimName: aws-efs</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"숙소예약","anchor":"#숙소예약"},{"depth":2,"value":"서비스 시나리오","anchor":"#서비스-시나리오"},{"depth":2,"value":"체크포인트","anchor":"#체크포인트"},{"depth":2,"value":"분석/설계","anchor":"#분석설계"},{"depth":2,"value":"구현","anchor":"#구현"},{"depth":3,"value":"· CQRS","anchor":"#-cqrs"},{"depth":3,"value":"· API 게이트웨이","anchor":"#-api-게이트웨이"},{"depth":2,"value":"Correlation","anchor":"#correlation"},{"depth":3,"value":"· 동기식 호출(Sync) 과 Fallback 처리","anchor":"#-동기식-호출sync-과-fallback-처리"},{"depth":3,"value":"· 비동기식 호출 / 시간적 디커플링 / 장애격리 / 최종 (Eventual) 일관성 테스트","anchor":"#-비동기식-호출--시간적-디커플링--장애격리--최종-eventual-일관성-테스트"},{"depth":2,"value":"운영","anchor":"#운영"},{"depth":3,"value":"· CI/CD 설정","anchor":"#-cicd-설정"},{"depth":3,"value":"· 동기식 호출 / 서킷 브레이킹 / 장애격리","anchor":"#-동기식-호출--서킷-브레이킹--장애격리"},{"depth":3,"value":"· 무정지 재배포","anchor":"#-무정지-재배포"},{"depth":2,"value":"Self-healing (Liveness Probe)","anchor":"#self-healing-liveness-probe"},{"depth":2,"value":"Config Map/ Persistence Volume","anchor":"#config-map-persistence-volume"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/tool/plsql-2-java/","title":"PL/SQL to Java 자동 테스팅"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}