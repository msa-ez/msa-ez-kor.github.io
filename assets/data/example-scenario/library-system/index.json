{"hash":"d0f9acdb392ff7740d2cd28b1dd4865c031953e3","data":{"markdownPage":{"id":"41a09d1ae23d2ea4ebdf10487aa6aa3d","title":"도서관 시스템","description":"","path":"/example-scenario/library-system/","timeToRead":8,"content":"<h1 id=\"도서관-시스템\"><a href=\"#%EB%8F%84%EC%84%9C%EA%B4%80-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>도서관 시스템</h1>\n<p>출처 원본: <a href=\"https://github.com/msa-ez/example-library\" target=\"_blank\" class=\"link-open-text\">https://github.com/msa-ez/example-library</a></p>\n<p>도서관의 책 대여 및 예약, 관리 시스템입니다.</p>\n<ul>\n<li>체크포인트 : <a href=\"https://workflowy.com/s/assessment-check-po/T5YrzcMewfo4J6LW\" target=\"_blank\" class=\"link-open-text\">https://workflowy.com/s/assessment-check-po/T5YrzcMewfo4J6LW</a></li>\n</ul>\n<h2 id=\"구현-repository\"><a href=\"#%EA%B5%AC%ED%98%84-repository\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>구현 Repository</h2>\n<p>총 5개<br>\n1. <a href=\"https://github.com/Juyounglee95/bookRental\" target=\"_blank\" class=\"link-open-text\">https://github.com/Juyounglee95/bookRental</a><br>\n2. <a href=\"https://github.com/Juyounglee95/gateway\" target=\"_blank\" class=\"link-open-text\">https://github.com/Juyounglee95/gateway</a><br>\n3. <a href=\"https://github.com/Juyounglee95/bookManagement\" target=\"_blank\" class=\"link-open-text\">https://github.com/Juyounglee95/bookManagement</a><br>\n4. <a href=\"https://github.com/Juyounglee95/point\" target=\"_blank\" class=\"link-open-text\">https://github.com/Juyounglee95/point</a><br>\n5. <a href=\"https://github.com/Juyounglee95/view\" target=\"_blank\" class=\"link-open-text\">https://github.com/Juyounglee95/view</a></p>\n<h2 id=\"서비스-시나리오\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 시나리오</h2>\n<p><strong>기능적 요구사항</strong><br>\n1. 관리자는 도서를 등록한다.<br>\n2. 사용자는 도서를 예약한다.<br>\n3. 도서를 예약 시에는 포인트를 사용한다.<br></p>\n<ul>\n<li>3-1. 예약 취소 시에는 포인트가 반납된다.<br></li>\n</ul>\n<ol start=\"4\">\n<li>사용자는 도서를 반납한다.<br></li>\n</ol>\n<p><strong>비기능적 요구사항</strong>\n1. 트랜잭션</p>\n<ul>\n<li>\n<ol>\n<li>결제가 되지 않은 경우 대여할 수 없다.  Sync 호출 </li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>장애격리</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>도서관리 기능이 수행되지 않더라도 대여/예약은 365일 24시간 받을 수 있어야 한다  Async (event-driven), Eventual Consistency</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>결제시스템이 과중되면 사용자를 잠시동안 받지 않고 잠시후에 결제하도록 유도한다  Circuit breaker, fallback</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li>성능</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>사용자는 전체 도서 목록을 확인하여 전체 도서의 상태를 확인할 수 있어야한다. CQRS</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"체크포인트\"><a href=\"#%EC%B2%B4%ED%81%AC%ED%8F%AC%EC%9D%B8%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>체크포인트</h2>\n<ul>\n<li>분석 설계</li>\n</ul>\n<ul>\n<li>\n<p>이벤트스토밍: </p>\n<ul>\n<li>스티커 색상별 객체의 의미를 제대로 이해하여 헥사고날 아키텍처와의 연계 설계에 적절히 반영하고 있는가?</li>\n<li>각 도메인 이벤트가 의미있는 수준으로 정의되었는가?</li>\n<li>어그리게잇: Command와 Event 들을 ACID 트랜잭션 단위의 Aggregate 로 제대로 묶었는가?</li>\n<li>기능적 요구사항과 비기능적 요구사항을 누락 없이 반영하였는가?    </li>\n</ul>\n</li>\n<li>\n<p>서브 도메인, 바운디드 컨텍스트 분리</p>\n<ul>\n<li>\n<p>팀별 KPI 와 관심사, 상이한 배포주기 등에 따른  Sub-domain 이나 Bounded Context 를 적절히 분리하였고 그 분리 기준의 합리성이 충분히 설명되는가?</p>\n<ul>\n<li>적어도 3개 이상 서비스 분리</li>\n</ul>\n</li>\n<li>폴리글랏 설계: 각 마이크로 서비스들의 구현 목표와 기능 특성에 따른 각자의 기술 Stack 과 저장소 구조를 다양하게 채택하여 설계하였는가?</li>\n<li>서비스 시나리오 중 ACID 트랜잭션이 크리티컬한 Use 케이스에 대하여 무리하게 서비스가 과다하게 조밀히 분리되지 않았는가?</li>\n</ul>\n</li>\n<li>\n<p>컨텍스트 매핑 / 이벤트 드리븐 아키텍처 </p>\n<ul>\n<li>업무 중요성과  도메인간 서열을 구분할 수 있는가? (Core, Supporting, General Domain)</li>\n<li>Request-Response 방식과 이벤트 드리븐 방식을 구분하여 설계할 수 있는가?</li>\n<li>장애격리: 서포팅 서비스를 제거 하여도 기존 서비스에 영향이 없도록 설계하였는가?</li>\n<li>신규 서비스를 추가 하였을때 기존 서비스의 데이터베이스에 영향이 없도록 설계(열려있는 아키택처)할 수 있는가?</li>\n<li>이벤트와 폴리시를 연결하기 위한 Correlation-key 연결을 제대로 설계하였는가?</li>\n</ul>\n</li>\n<li>\n<p>헥사고날 아키텍처</p>\n<ul>\n<li>설계 결과에 따른 헥사고날 아키텍처 다이어그램을 제대로 그렸는가?</li>\n</ul>\n</li>\n<li>\n<p>구현</p>\n<ul>\n<li>\n<p>[DDD] 분석단계에서의 스티커별 색상과 헥사고날 아키텍처에 따라 구현체가 매핑되게 개발되었는가?</p>\n<ul>\n<li>Entity Pattern 과 Repository Pattern 을 적용하여 JPA 를 통하여 데이터 접근 어댑터를 개발하였는가</li>\n<li>[헥사고날 아키텍처] REST Inbound adaptor 이외에 gRPC 등의 Inbound Adaptor 를 추가함에 있어서 도메인 모델의 손상을 주지 않고 새로운 프로토콜에 기존 구현체를 적응시킬 수 있는가?</li>\n<li>분석단계에서의 유비쿼터스 랭귀지 (업무현장에서 쓰는 용어) 를 사용하여 소스코드가 서술되었는가?</li>\n</ul>\n</li>\n<li>\n<p>Request-Response 방식의 서비스 중심 아키텍처 구현</p>\n<ul>\n<li>마이크로 서비스간 Request-Response 호출에 있어 대상 서비스를 어떠한 방식으로 찾아서 호출 하였는가? (Service Discovery, REST, FeignClient)</li>\n<li>서킷브레이커를 통하여  장애를 격리시킬 수 있는가?</li>\n</ul>\n</li>\n<li>\n<p>이벤트 드리븐 아키텍처의 구현</p>\n<ul>\n<li>카프카를 이용하여 PubSub 으로 하나 이상의 서비스가 연동되었는가?</li>\n<li>Correlation-key:  각 이벤트 건 (메시지)가 어떠한 폴리시를 처리할때 어떤 건에 연결된 처리건인지를 구별하기 위한 Correlation-key 연결을 제대로 구현 하였는가?</li>\n<li>Message Consumer 마이크로서비스가 장애상황에서 수신받지 못했던 기존 이벤트들을 다시 수신받아 처리하는가?</li>\n<li>Scaling-out: Message Consumer 마이크로서비스의 Replica 를 추가했을때 중복없이 이벤트를 수신할 수 있는가</li>\n<li>CQRS: Materialized View 를 구현하여, 타 마이크로서비스의 데이터 원본에 접근없이(Composite 서비스나 조인SQL 등 없이) 도 내 서비스의 화면 구성과 잦은 조회가 가능한가?</li>\n</ul>\n</li>\n<li>\n<p>폴리글랏 플로그래밍</p>\n<ul>\n<li>각 마이크로 서비스들이 하나이상의 각자의 기술 Stack 으로 구성되었는가?</li>\n<li>각 마이크로 서비스들이 각자의 저장소 구조를 자율적으로 채택하고 각자의 저장소 유형 (RDB, NoSQL, File System 등)을 선택하여 구현하였는가?</li>\n</ul>\n</li>\n<li>\n<p>API 게이트웨이</p>\n<ul>\n<li>API GW를 통하여 마이크로 서비스들의 집입점을 통일할 수 있는가?</li>\n<li>게이트웨이와 인증서버(OAuth), JWT 토큰 인증을 통하여 마이크로서비스들을 보호할 수 있는가?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>운영</p>\n<ul>\n<li>\n<p>SLA 준수</p>\n<ul>\n<li>셀프힐링: Liveness Probe 를 통하여 어떠한 서비스의 health 상태가 지속적으로 저하됨에 따라 어떠한 임계치에서 pod 가 재생되는 것을 증명할 수 있는가?</li>\n<li>서킷브레이커, 레이트리밋 등을 통한 장애격리와 성능효율을 높힐 수 있는가?</li>\n<li>오토스케일러 (HPA) 를 설정하여 확장적 운영이 가능한가?</li>\n<li>모니터링, 앨럿팅: </li>\n</ul>\n</li>\n<li>\n<p>무정지 운영 CI/CD (10)</p>\n<ul>\n<li>Readiness Probe 의 설정과 Rolling update을 통하여 신규 버전이 완전히 서비스를 받을 수 있는 상태일때 신규버전의 서비스로 전환됨을 siege 등으로 증명 </li>\n<li>Contract Test :  자동화된 경계 테스트를 통하여 구현 오류나 API 계약위반를 미리 차단 가능한가?</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"분석설계\"><a href=\"#%EB%B6%84%EC%84%9D%EC%84%A4%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>분석/설계</h2>\n<p><strong><a href=\"http://msaez.io/#/storming/nZJ2QhwVc4NlVJPbtTkZ8x9jclF2/a77281d704710b0c2e6a823b6e6d973a\" target=\"_blank\" rel=\"noopener noreferrer\">MSAEz 로 모델링한 이벤트스토밍 결과</a></strong></p>\n<h3>이벤트 도출</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/79930892-9c3cc800-8484-11ea-9076-39259368f131.png\" alt=\"image\"></p>\n<h3>액터, 커맨드 부착하여 읽기 좋게</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/79931004-de660980-8484-11ea-9573-8cf3d8509e9e.png\" alt=\"image\"></p>\n<h3>어그리게잇으로 묶기</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/79931210-6ea44e80-8485-11ea-959b-2f500a9a7c1d.png\" alt=\"image\"></p>\n<h3>바운디드 컨텍스트로 묶기</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/79931545-32bdb900-8486-11ea-8518-558b5cf02d77.png\" alt=\"image\"></p>\n<pre class=\"language-text\"><code class=\"language-text\">- 도메인 서열 분리 \n    - Core Domain:  bookRental, bookManagement : 핵심 서비스\n    - Supporting Domain:   marketing, customer : 경쟁력을 내기위한 서비스\n    - General Domain:   point : 결제서비스로 3rd Party 외부 서비스를 사용하는 것이 경쟁력이 높음 (핑크색으로 이후 전환할 예정)</code></pre>\n<h3>폴리시 부착</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/79933209-584cc180-848a-11ea-8289-c59468228c67.png\" alt=\"image\"></p>\n<h3>폴리시의 이동과 컨텍스트 매핑 (점선은 Pub/Sub, 실선은 Req/Resp)</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/79933604-76ff8800-848b-11ea-8092-bd7510bf5d0b.png\" alt=\"image\"></p>\n<ul>\n<li>View Model 추가</li>\n</ul>\n<h3>기능적/비기능적 요구사항을 커버하는지 검증</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/79933961-5f74cf00-848c-11ea-9870-cbd05b6348c5.png\" alt=\"image\"></p>\n<p>&#x3C;기능적 요구사항 검증></p>\n<ul>\n<li>관리자는 도서를 등록한다.  ok</li>\n<li>사용자는 도서를 예약한다.  ok</li>\n<li>도서를 예약 시에는 포인트를 사용한다.  ok </li>\n<li>예약 취소 시에는 포인트가 반납된다.  ok</li>\n<li>사용자는 도서를 반납한다.  ok</li>\n<li>사용자는 예약을 취소할 수 있다 (ok)</li>\n<li>예약이 취소되면 포인트가 반납되고, 도서의 상태가 예약 취소로 변경된다 (ok)</li>\n<li>사용자는 도서상태를 중간중간 조회한다 (View-green sticker 의 추가로 ok)</li>\n<li>도서가 등록/예약/예약취소/반납 시, 도서의 상태가 변경되어 전체 도서 리스트에 반영된다. 사용자와 관리자 모두 이를 확인할 수 있다. ok</li>\n</ul>\n<h3>비기능 요구사항에 대한 검증</h3>\n<ul>\n<li>\n<p>마이크로 서비스를 넘나드는 시나리오에 대한 트랜잭션 처리</p>\n<ul>\n<li>도서 예약시 결제처리:  예약완료시 포인트 결제처리에 대해서는 Request-Response 방식 처리</li>\n<li>결제 완료시 도서 상태 변경:  Eventual Consistency 방식으로 트랜잭션 처리함.</li>\n<li>나머지 모든 inter-microservice 트랜잭션: 데이터 일관성의 시점이 크리티컬하지 않은 모든 경우가 대부분이라 판단, Eventual Consistency 를 기본으로 채택함.</li>\n</ul>\n</li>\n</ul>\n<h3>헥사고날 아키텍처 다이어그램 도출</h3>  \n    \n<img src=\"https://user-images.githubusercontent.com/18453570/80059618-5f95cd00-8567-11ea-9855-6fdc2e51bfd0.png\" alt=\"image\">\n<ul>\n<li>Chris Richardson, MSA Patterns 참고하여 Inbound adaptor와 Outbound adaptor를 구분함</li>\n<li>호출관계에서 PubSub 과 Req/Resp 를 구분함</li>\n<li>서브 도메인과 바운디드 컨텍스트의 분리:  각 팀의 KPI 별로 아래와 같이 관심 구현 스토리를 나눠가짐</li>\n</ul>\n<h2 id=\"구현\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>구현</h2>\n<p>분석/설계 단계에서 도출된 헥사고날 아키텍처에 따라, 각 BC별로 대변되는 마이크로 서비스들을 스프링부트로 구현함. 구현한 각 서비스를 로컬에서 실행하는 방법은 아래와 같다 (각자의 포트넘버는 8081 ~ 808n 이다)\nbookManagement/  bookRental/  gateway/  point/  view/</p>\n<pre class=\"language-text\"><code class=\"language-text\">cd bookManagement\nmvn spring-boot:run\n\ncd bookRental\nmvn spring-boot:run \n\ncd gateway\nmvn spring-boot:run  \n\ncd point\nmvn spring-boot:run\n\ncd view\nmvn spring-boot:run</code></pre>\n<h3 id=\"-ddd-의-적용\"><a href=\"#-ddd-%EC%9D%98-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· DDD 의 적용</h3>\n<ul>\n<li>각 서비스내에 도출된 핵심 Aggregate Root 객체를 Entity 로 선언. 이때 가능한 현업에서 사용하는 언어 (유비쿼터스 랭귀지)를 그대로 사용함.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package library;\n\nimport javax.persistence.*;\nimport org.springframework.beans.BeanUtils;\nimport java.util.List;\n\n@Entity\n@Table(name=&quot;PointSystem_table&quot;)\npublic class PointSystem {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private Long id;\n    private Long bookId;\n    private Long pointQty =(long)100;\n\n    @PostPersist\n    public void onPostPersist(){\n        PointUsed pointUsed = new PointUsed(this);\n        BeanUtils.copyProperties(this, pointUsed);\n        pointUsed.publish();\n\n\n    }\n\n    public Long getBookId() {\n        return bookId;\n    }\n\n    public void setBookId(Long bookId) {\n        this.bookId = bookId;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public Long getPointQty() {\n        return pointQty;\n    }\n\n    public void setPointQty(Long pointQty) {\n        this.pointQty = pointQty;\n    }\n}</code></pre>\n<ul>\n<li>Entity Pattern 과 Repository Pattern 을 적용하여 JPA 를 통하여 다양한 데이터소스 유형 (RDB or NoSQL) 에 대한 별도의 처리가 없도록 데이터 접근 어댑터를 자동 생성하기 위하여 Spring Data REST 의 RestRepository 를 적용하였다</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package library;\n\nimport org.springframework.data.repository.PagingAndSortingRepository;\n\npublic interface PointSystemRepository extends PagingAndSortingRepository&lt;PointSystem, Long&gt;{\n\n\n}</code></pre>\n<ul>\n<li>적용 후 REST API 의 테스트</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># bookManagement 서비스의 도서 등록처리\nhttp POST http://52.231.116.117:8080/bookManageSystems bookName=&quot;JPA&quot;\n\n# bookRental 서비스의 예약처리\nhttp POST http://52.231.116.117:8080/bookRentalSystems/returned/1\n\n# bookRental 서비스의 반납처리\nhttp POST http://52.231.116.117:8080/bookRentalSystems/reserve/1\n\n# bookRental 서비스의 예약취소처리\nhttp POST http://52.231.116.117:8080/bookRentalSystems/reserveCanceled/1\n\n# 도서 상태 확인\nhttp://52.231.116.117:8080/bookLists</code></pre>\n<h3 id=\"-동기식-호출-과-비동기식\"><a href=\"#-%EB%8F%99%EA%B8%B0%EC%8B%9D-%ED%98%B8%EC%B6%9C-%EA%B3%BC-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 동기식 호출 과 비동기식</h3>\n<p>분석단계에서의 조건 중 하나로 예약(bookRental)->결제(point) 간의 호출은 동기식 일관성을 유지하는 트랜잭션으로 처리하기로 하였다. 호출 프로토콜은 이미 앞서 Rest Repository 에 의해 노출되어있는 REST 서비스를 FeignClient 를 이용하여 호출하도록 한다. </p>\n<ul>\n<li>결제서비스를 호출하기 위하여 Stub과 (FeignClient) 를 이용하여 Service 대행 인터페이스 (Proxy) 를 구현 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># (app) pointSystemService.java\n\n@FeignClient(name=&quot;point&quot;, url=&quot;http://52.231.116.117:8080&quot;)\npublic interface PointSystemService {\n\n    @RequestMapping(method= RequestMethod.POST, path=&quot;/pointSystems&quot;, consumes = &quot;application/json&quot;)\n    public void usePoints(@RequestBody PointSystem pointSystem);\n\n}</code></pre>\n<ul>\n<li>예약을 받은 직후(@PostPersist) 결제를 요청하도록 처리 -> BookRental의 생성은 BookManageSystem에서 도서를 등록한 직후 발생하기 때문에, Post요청으로 예약이 들어온 후 결제 요청하도록 처리함.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># BookRentalSystemController.java (Entity)\n\n     @PostMapping(&quot;/bookRentalSystems/reserve/{id}&quot;)\n     public void bookReserve(@PathVariable(value=&quot;id&quot;)Long id){\n      PointSystem pointSystem = new PointSystem();\n      pointSystem.setBookId(id);\n      PointSystemService pointSystemService =  Application.applicationContext.\n              getBean(library.external.PointSystemService.class);\n      pointSystemService.usePoints(pointSystem);\n  }\n    }</code></pre>\n<p>결제가 이루어진 후에 도서대여시스템으로 이를 알려주는 행위는 동기식이 아니라 비 동기식으로 처리하여 도서대여시스템의 처리를 위하여 도서 상태 업데이트는 블로킹 되지 않도록 처리한다.</p>\n<ul>\n<li>이를 위하여 결제이력에 기록을 남긴 후에 곧바로 결제승인이 되었다는 도메인 이벤트를 카프카로 송출한다(Publish)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">#PointSystem.Java (Entity)\n{\n @PostPersist\n    public void onPostPersist(){\n        PointUsed pointUsed = new PointUsed(this);\n        BeanUtils.copyProperties(this, pointUsed);\n        pointUsed.publish();\n\n\n    }\n}</code></pre>\n<p>결제 완료 이벤트를 도서대여시스템의 리스너가 받아, 도서의 상태를 예약완료로 변경한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">(BookRentalSystem) PolicyHandler.JAVA\n{\n    @StreamListener(KafkaProcessor.INPUT) //포인트 결제 완료시\n    public void wheneverPointUsed_ChangeStatus(@Payload PointUsed pointUsed){\n        try {\n            if (pointUsed.isMe()) {\n                System.out.println(&quot;##### point use completed : &quot; + pointUsed.toJson());\n                BookRentalSystem bookRentalSystem = bookRentalSystemRepository.findById(pointUsed.getBookId()).get();\n                bookRentalSystem.setBookStatus(&quot;Reserved Complete&quot;);\n                bookRentalSystemRepository.save(bookRentalSystem);\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n<p>도서상태가 변경되면, Reserved라는 이벤트를 발행한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">BookRentalSystem.java (Entity)\n\n{\n   @PostUpdate\n    public void bookStatusUpdate(){\n\n        if(this.getBookStatus().equals(&quot;Returned&quot;)){\n            Returned returned = new Returned(this);\n            BeanUtils.copyProperties(this, returned);\n            returned.publish();\n\n        }else if(this.getBookStatus().equals(&quot;Canceled&quot;)){\n\n            ReservationCanceled reservationCanceled = new ReservationCanceled(this);\n            BeanUtils.copyProperties(this, reservationCanceled);\n            reservationCanceled.publish();\n        }else if(this.getBookStatus().equals(&quot;Reserved Complete&quot;)){\n            Reserved reserved = new Reserved(this);\n            BeanUtils.copyProperties(this, reserved);\n            reserved.publish();\n        }\n\n    }\n    \n}</code></pre>\n<p>결과 : 포인트가 사용된 후에, 예약이 완료되는 것과 도서의 상태가 변경된 것을 BookListView확인 할 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/80061051-12b3f580-856b-11ea-989c-f4cf958613d5.png\" alt=\"image\"></p>\n<h2 id=\"운영\"><a href=\"#%EC%9A%B4%EC%98%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>운영</h2>\n<h3 id=\"-cicd-설정\"><a href=\"#-cicd-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· CI/CD 설정</h3>\n<p>각 구현체들은 각자의 source repository 에 구성되었고, 사용한 CI/CD 플랫폼은 azure를 사용하였으며, pipeline build script 는 각 프로젝트 폴더 이하에 azure-pipeline.yml 에 포함되었다.</p>\n<h3>pipeline 동작 결과</h3>\n<p>아래 이미지는 azure의 pipeline에 각각의 서비스들을 올려, 코드가 업데이트 될때마다 자동으로 빌드/배포 하도록 하였다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/79945720-6b22be80-84a9-11ea-8465-132806bc0f97.png\" alt=\"image\"></p>\n<p>그 결과 kubernetes cluster에 아래와 같이 서비스가 올라가있는 것을 확인할 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/79971771-c2d42080-84cf-11ea-9385-0896baf668a4.png\" alt=\"image\"></p>\n<p>또한, 기능들도 정상적으로 작동함을 알 수 있다.</p>\n<p><strong>&#x3C;이벤트 날리기></strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/80060143-cb2c6a00-8568-11ea-934a-111ccd8c21c9.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/18453570/80060146-ce275a80-8568-11ea-993a-9f206ed4e7e8.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/18453570/80060149-d089b480-8568-11ea-83ef-8a2496163806.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/18453570/80060153-d2537800-8568-11ea-8c01-0a4740373c4a.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/18453570/80060164-d5e6ff00-8568-11ea-8f75-b8e735ba7e18.png\" alt=\"image\"></p>\n<p><strong>&#x3C;동작 결과></strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/80060261-15ade680-8569-11ea-8256-d28b1e7f1e67.png\" alt=\"image\"></p>\n<h3 id=\"-오토스케일-아웃\"><a href=\"#-%EC%98%A4%ED%86%A0%EC%8A%A4%EC%BC%80%EC%9D%BC-%EC%95%84%EC%9B%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 오토스케일 아웃</h3>\n<ul>\n<li>포인트서비스에 대한 replica 를 동적으로 늘려주도록 HPA 를 설정한다. 설정은 CPU 사용량이 15프로를 넘어서면 replica 를 10개까지 늘려준다:</li>\n<li>오토스케일이 어떻게 되고 있는지 모니터링을 걸어둔다:</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/80059958-51947c00-8568-11ea-9567-1b7d69c7381f.png\" alt=\"image\"></p>\n<ul>\n<li>워크로드를 2분 동안 걸어준 후 테스트 결과는 아래와 같다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/80060025-8274b100-8568-11ea-8f60-fa428c62168c.png\" alt=\"image\"></p>\n<h3 id=\"-무정지-재배포\"><a href=\"#-%EB%AC%B4%EC%A0%95%EC%A7%80-%EC%9E%AC%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 무정지 재배포</h3>\n<p>Autoscaler설정과 Readiness 제거를 한뒤, 부하를 넣었다. </p>\n<p>이후 Readiness를 제거한 코드를 업데이트하여 새 버전으로 배포를 시작했다.</p>\n<p>그 결과는 아래는 같다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/80060602-ec418a80-8569-11ea-87ea-34004c1ce5d3.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/18453570/80060605-eea3e480-8569-11ea-9825-a375530f1953.png\" alt=\"image\"></p>\n<p>다시 Readiness 설정을 넣고 부하를 넣었다.</p>\n<p>그리고 새버전으로 배포한 뒤 그 결과는 아래와 같다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18453570/80060772-565a2f80-856a-11ea-9ee3-5d682099b899.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/18453570/80060776-5823f300-856a-11ea-89a9-7c945ea05278.png\" alt=\"image\"></p>\n<p>배포기간 동안 Availability 가 변화없기 때문에 무정지 재배포가 성공한 것으로 확인됨.</p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"도서관 시스템","anchor":"#도서관-시스템"},{"depth":2,"value":"구현 Repository","anchor":"#구현-repository"},{"depth":2,"value":"서비스 시나리오","anchor":"#서비스-시나리오"},{"depth":2,"value":"체크포인트","anchor":"#체크포인트"},{"depth":2,"value":"분석/설계","anchor":"#분석설계"},{"depth":2,"value":"구현","anchor":"#구현"},{"depth":3,"value":"· DDD 의 적용","anchor":"#-ddd-의-적용"},{"depth":3,"value":"· 동기식 호출 과 비동기식","anchor":"#-동기식-호출-과-비동기식"},{"depth":2,"value":"운영","anchor":"#운영"},{"depth":3,"value":"· CI/CD 설정","anchor":"#-cicd-설정"},{"depth":3,"value":"· 오토스케일 아웃","anchor":"#-오토스케일-아웃"},{"depth":3,"value":"· 무정지 재배포","anchor":"#-무정지-재배포"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/wireframe-generate/","title":"모델 기반 바이브코딩을 통한 프론트엔드 구현"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/ddl-to-eventstorming2/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}