{"hash":"dbbad657247c5e3cff992cf79ab240635ccdaf72","data":{"markdownPage":{"id":"5727002f6d0a904a02dc2fa2794b6efe","title":"동물병원 진료시스템","description":"","path":"/example-scenario/animal-hospital/","timeToRead":12,"content":"<h1 id=\"동물병원-진료시스템\"><a href=\"#%EB%8F%99%EB%AC%BC%EB%B3%91%EC%9B%90-%EC%A7%84%EB%A3%8C%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동물병원 진료시스템</h1>\n<p>출처 원본: <a href=\"https://github.com/msa-ez/example-animal-hospital\" target=\"_blank\" class=\"link-open-text\">https://github.com/msa-ez/example-animal-hospital</a></p>\n<h3>2조 과제 - 동물병원 진료시스템 구축</h3>\n<p>이 시스템은 MSA/DDD/Event Storming/EDA 를 포괄하는 분석/설계/구현/운영 전단계를 커버하도록 구성하였습니다.\n이 시스템은 클라우드 네이티브 애플리케이션 Final Project 수행 테스트를 통과하기 위한 답안을 포함합니다.</p>\n<h2 id=\"서비스-시나리오\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 시나리오</h2>\n<p><strong>기능적 요구사항</strong><br>\n1. 고객은 동물병원에 예약 및 예약 취소 변경을 한다.<br>\n2. 예약이 완료된 고객은 진료를 받는다. <br>\n3. 수납은 고객에게 진료비를 청구한다.<br>\n4. 고객이 치료비를 지불한다.<br>\n5. 예약이 변경/취소되면 진료/처방이 변경/취소된다.<br>\n6. 예약상태가 바뀔 때 마다 카톡으로 알림을 보낸다.<br>\n7. 고객은 Lookup 시스템에서 예약 상태를 조회할 수 있다.<br></p>\n<p><strong>비기능적 요구사항</strong><br>\n1. 트랜잭션</p>\n<ul>\n<li>\n<ol>\n<li>진료가 불가능 할 때는 예약이 불가능해야 한다. Sync 호출</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>장애격리</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>예약/진료 시스템(core)만 온전하면 시스템은 정상적으로 수행되어야 한다.  Async (event-driven), Eventual Consistency</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>문자 알림, 치료비 수납 시스템에 장애가 생겨도 예약/진료 (core) 시스템은 정상적으로 작동한다.</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>진료시스템이 과중되면 예약을 잠시후에 하도록 유도한다.  Circuit breaker, fallback</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li>성능</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>고객이 예약/진료/치료 결과를 시스템에서 확인할 수 있어야 한다.(Lookup 시스템으로 구현, CQRS)</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>알림 시스템을 통해 예약/예약취소/예약변경 내용을 문자로 알림을 줄 수 있어야 한다. (Event driven)</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"분석설계\"><a href=\"#%EB%B6%84%EC%84%9D%EC%84%A4%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>분석/설계</h2>\n<ul>\n<li>Core Domain : 예약 (Reservation) 및 진료 (Diagnosis) 도메인</li>\n<li>Supporting Domain : Lookup(CQRS) 도메인</li>\n<li>General Domain : 알림(notice) 시스템.</li>\n</ul>\n<h3 id=\"-헥사고날-아키텍처-다이어그램-도출\"><a href=\"#-%ED%97%A5%EC%82%AC%EA%B3%A0%EB%82%A0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8-%EB%8F%84%EC%B6%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 헥사고날 아키텍처 다이어그램 도출</h3>\n<p><img src=\"https://user-images.githubusercontent.com/38850007/79833622-aad4a200-83e6-11ea-80f1-6eb9a59503af.png\" alt=\"image\"></p>\n<h2 id=\"구현\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>구현</h2>\n<p>분석/설계 단계에서 도출된 헥사고날 아키텍처에 따라, 각 BC별로 대변되는 마이크로 서비스들을 스프링부트로 구현하였다. 구현한 각 서비스를 로컬에서 실행하는 방법은 아래와 같다 (각자의 포트넘버는 8081 ~ 808n 이다)</p>\n<p>동물병원 예약/진료 시스템은 아래의 7가지 마이크로 서비스로 구성되어 있다.</p>\n<ol>\n<li>게이트 웨이: <a href=\"https://github.com/AnimalHospital2/gateway.git\" target=\"_blank\" class=\"link-open-text\">https://github.com/AnimalHospital2/gateway.git</a></li>\n<li>Oauth 시스템: <a href=\"https://github.com/AnimalHospital2/ouath.git\" target=\"_blank\" class=\"link-open-text\">https://github.com/AnimalHospital2/ouath.git</a></li>\n<li>예약 시스템: <a href=\"https://github.com/AnimalHospital2/reservation.git\" target=\"_blank\" class=\"link-open-text\">https://github.com/AnimalHospital2/reservation.git</a></li>\n<li>진료 시스템: <a href=\"https://github.com/AnimalHospital2/diagnosis.git\" target=\"_blank\" class=\"link-open-text\">https://github.com/AnimalHospital2/diagnosis.git</a></li>\n<li>수납 시스템: <a href=\"https://github.com/AnimalHospital2/acceptance.git\" target=\"_blank\" class=\"link-open-text\">https://github.com/AnimalHospital2/acceptance.git</a></li>\n<li>알림 시스템: <a href=\"https://github.com/AnimalHospital2/notice.git\" target=\"_blank\" class=\"link-open-text\">https://github.com/AnimalHospital2/notice.git</a></li>\n</ol>\n<ul>\n<li>게이트웨이 시스템은 수업시간에 이용한 예제를 프로젝트에 맞게 설정을 변경하였다. </li>\n<li>Oauth 시스템은 수업시간에 이용한 예제를 그대로 활용하였다.</li>\n</ul>\n<p>모든 시스템은 Spring Boot로 구현하였고 <code>mvn spring-boot:run</code> 명령어로 실행할 수 있다.</p>\n<h3 id=\"-ddd-의-적용\"><a href=\"#-ddd-%EC%9D%98-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· DDD 의 적용</h3>\n<ul>\n<li>각 서비스내에 도출된 핵심 Aggregate Root 객체를 Entity 로 선언하였다: (예시는 예약 시스템의 Reservation.class). 이때 가능한 현업에서 사용하는 언어 (유비쿼터스 랭귀지)를 그대로 사용하려고 노력했다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>reservation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>reservation<span class=\"token punctuation\">.</span>external<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MedicalRecord</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>reservation<span class=\"token punctuation\">.</span>external<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MedicalRecordService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonProcessingException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectMapper</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Processor</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageChannel</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageHeaders</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageBuilder</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MimeTypeUtils</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"RESERVATION\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Reservation</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> reservatorName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> reservationDate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phoneNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@PostPersist</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishReservationReservedEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">MedicalRecord</span> medicalRecord <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MedicalRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        medicalRecord<span class=\"token punctuation\">.</span><span class=\"token function\">setReservationId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        medicalRecord<span class=\"token punctuation\">.</span><span class=\"token function\">setDoctor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Brad pitt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        medicalRecord<span class=\"token punctuation\">.</span><span class=\"token function\">setMedicalOpinion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"별 이상 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        medicalRecord<span class=\"token punctuation\">.</span><span class=\"token function\">setTreatment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"그냥 집에서 푹 쉬면 나을 것입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ReservationApplication</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MedicalRecordService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diagnosis</span><span class=\"token punctuation\">(</span>medicalRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">// Reserved 이벤트 발생</span>\n\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            json <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReservationReserved</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON format exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Processor</span> processor <span class=\"token operator\">=</span> <span class=\"token class-name\">ReservationApplication</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MessageChannel</span> outputChannel <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        outputChannel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageBuilder</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageHeaders</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONTENT_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MimeTypeUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostUpdate</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishReservationChangedEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            json <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReservationChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON format exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Processor</span> processor <span class=\"token operator\">=</span> <span class=\"token class-name\">ReservationApplication</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MessageChannel</span> outputChannel <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        outputChannel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageBuilder</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageHeaders</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONTENT_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MimeTypeUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostRemove</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishReservationCanceledEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            json <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReservationCanceled</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON format exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Processor</span> processor <span class=\"token operator\">=</span> <span class=\"token class-name\">ReservationApplication</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MessageChannel</span> outputChannel <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        outputChannel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageBuilder</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageHeaders</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONTENT_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MimeTypeUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getReservatorName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> reservatorName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setReservatorName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> reservatorName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reservatorName <span class=\"token operator\">=</span> reservatorName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getReservationDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> reservationDate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setReservationDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> reservationDate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reservationDate <span class=\"token operator\">=</span> reservationDate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> phoneNumber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> phoneNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phoneNumber <span class=\"token operator\">=</span> phoneNumber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Entity Pattern 과 Repository Pattern 을 적용하여 JPA 를 통하여 다양한 데이터소스 유형 (RDB or NoSQL) 에 대한 별도의 처리가 없도록 데이터 접근 어댑터를 자동 생성하기 위하여 Spring Data REST 의 RestRepository 를 적용하였다.\nRDB로는 H2를 사용하였다. </li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>reservation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CrudRepository</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReservationRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CrudRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Reservation</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>적용 후 REST API 의 테스트</li>\n</ul>\n<p>주의!!! reservation 서비스에는 FeignClient가 적용되어 있다. 여기에 diagnosis 시스템의 api 주소가 하드코딩되어 있어 로컬 테스트 환경과\nCloud 테스트 환경에서는 그 값을 달리하여 테스트하여야 한다.</p>\n<p>package com.example.reservation.external.MedicalRecordService의 내용을 테스트 환경에 따라 변경해준다.;</p>\n<ul>\n<li>Local 환경 테스트시 </li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"diagnosis\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:8083\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MedicalRecordService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"/medicalRecords\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">diagnosis</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">MedicalRecord</span> medicalRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Cloud 환경 테스트시</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"diagnosis\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://diagnosis:8080\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MedicalRecordService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"/medicalRecords\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">diagnosis</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">MedicalRecord</span> medicalRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>아래의 명령어는 httpie 프로그램을 사용하여 입력한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\"># 예약 서비스의 예약\nhttp post localhost:8081/reservations reservatorName=&quot;Jackson&quot; reservationDate=&quot;2020-04-30&quot; phoneNumber=&quot;010-1234-5678&quot;\n\n# 예약 서비스의 예약 취소\nhttp delete localhost:8081/reservations/1\n\n# 예약 서비스의 예약 변경\nhttp patch localhost:8081/reservations/1 reservationDate=&quot;2020-05-01&quot;\n\n# 진료 기록 리스트 확인\nhttp localhost:8083/medicalRecords</code></pre>\n<h3 id=\"-동기식-호출과-fallback-처리\"><a href=\"#-%EB%8F%99%EA%B8%B0%EC%8B%9D-%ED%98%B8%EC%B6%9C%EA%B3%BC-fallback-%EC%B2%98%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 동기식 호출과 Fallback 처리</h3>\n<p>분석단계에서의 조건 중 하나로 예약(reservation)->진료(diagnosis) 간의 호출은 동기식 일관성을 유지하는 트랜잭션으로 처리하기로 하였다. 호출 프로토콜은 이미 앞서 Rest Repository 에 의해 노출되어있는 REST 서비스를 FeignClient 를 이용하여 호출하도록 한다. </p>\n<ul>\n<li>진료서비스를 호출하기 위하여 FeignClient를 이용하여 Service 대행 인터페이스 (Proxy) 를 구현 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># (app) 결제이력Service.java\npackage com.example.reservation.external;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@FeignClient(name = &quot;diagnosis&quot;, url = &quot;http://diagnosis:8080&quot;)\n  public interface MedicalRecordService {\n\n    @RequestMapping(method = RequestMethod.POST, path = &quot;/medicalRecords&quot;)\n    public void diagnosis(@RequestBody MedicalRecord medicalRecord);\n}</code></pre>\n<ul>\n<li>예약완료 직후(@PostPersist) 진단을 요청하도록 처리</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># Reservation.java (Entity)\n    @PostPersist\n       public void publishReservationReservedEvent() {\n   \n           // 예약이 발생하면 바로 진료 진행.\n           MedicalRecord medicalRecord = new MedicalRecord();\n   \n           medicalRecord.setReservationId(this.getId());\n           medicalRecord.setDoctor(&quot;Brad pitt&quot;);\n           medicalRecord.setMedicalOpinion(&quot;별 이상 없습니다.&quot;);\n           medicalRecord.setTreatment(&quot;그냥 집에서 푹 쉬면 나을 것입니다.&quot;);\n   \n           ReservationApplication.applicationContext.getBean(MedicalRecordService.class).diagnosis(medicalRecord);\n   \n   \n           // Reserved 이벤트 발생\n           ObjectMapper objectMapper = new ObjectMapper();\n           String json = null;\n   \n           try {\n               json = objectMapper.writeValueAsString(new ReservationReserved(this));\n           } catch (JsonProcessingException e) {\n               throw new RuntimeException(&quot;JSON format exception&quot;, e);\n           }\n   \n           Processor processor = ReservationApplication.applicationContext.getBean(Processor.class);\n           MessageChannel outputChannel = processor.output();\n   \n           outputChannel.send(MessageBuilder\n                   .withPayload(json)\n                   .setHeader(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_JSON)\n                   .build());</code></pre>\n<ul>\n<li>동기식 호출에서는 호출 시간에 따른 타임 커플링이 발생하며, 진단 시스템이 장애가 나면 예약도 못받는다는 것을 확인.(비즈상 무리가 있음..) </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># 진료 (diagnosis) 서비스를 잠시 내려놓음 (ctrl+c)\n\n# 예약 처리\nhttp post localhost:8081/reservations reservatorName=&quot;Jackson&quot; reservationDate=&quot;2020-04-30&quot; phoneNumber=&quot;010-1234-5678&quot; #Fail\n\n#진료 서비스 재기동\ncd diagnosis\nmvn spring-boot:run\n\n#예약처리\nhttp post localhost:8081/reservations reservatorName=&quot;Jackson&quot; reservationDate=&quot;2020-04-30&quot; phoneNumber=&quot;010-1234-5678&quot; #Success</code></pre>\n<h3 id=\"-클러스터-적용-후-rest-api-의-테스트\"><a href=\"#-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EC%A0%81%EC%9A%A9-%ED%9B%84-rest-api-%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 클러스터 적용 후 REST API 의 테스트</h3>\n<pre class=\"language-text\"><code class=\"language-text\">- http://52.231.118.148:8080/medicalRecords/     \t\t//diagnosis 조회\n- http://52.231.118.148:8080/reservations/       \t\t//reservation 조회 \n- http://52.231.118.148:8080/reservations reservatorName=&quot;pdc&quot; reservationDate=&quot;202002&quot; phoneNumber=&quot;0103701&quot; //reservation 요청 \n- Delete http://52.231.118.148:8080/reservations/1 \t//reservation Cancel  Sample\n- http://52.231.118.148:8080/reservationStats/   \t  //lookup  조회\n- http://52.231.118.148:8080/financialManagements/ \t//acceptance 조회</code></pre>\n<ul>\n<li>또한 과도한 예약 요청시에 서비스 장애가 도미노 처럼 벌어질 수 있다. (서킷브레이커, 폴백 처리는 운영단계에서 설명한다.)</li>\n</ul>\n<h3 id=\"-비동기식-호출과-eventual-consistency\"><a href=\"#-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%8B%9D-%ED%98%B8%EC%B6%9C%EA%B3%BC-eventual-consistency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 비동기식 호출과 Eventual Consistency</h3>\n<p>진료가 이루어진 후에 수납시스템으로 이를 알려주는 행위는 동기식이 아니라 비 동기식으로 처리하여 수납 시스템의 처리를 위하여 예약/진료 시스템이 블로킹 되지 않아도록 처리한다.</p>\n<ul>\n<li>이를 위하여 진료이력을 남긴 후에 곧바로 진료가 이루어졌다는 이벤트를를 카프카로 송출한다(Publish)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">// package Animal.Hospital.MedicalRecord;\n\n    @PrePersist\n    public void onPrePersist(){\n        Treated treated = new Treated();\n        BeanUtils.copyProperties(this, treated);\n        treated.publish();\n    }</code></pre>\n<ul>\n<li>수납 서비스에서는 진료완료 이벤트에 대해서 이를 수신하여 자신의 정책을 처리하도록 PolicyHandler 를 구현한다:</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaListener</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">FinancialManagementRepository</span> financialManagementRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">TreatedEvent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">Treated</span> treated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>treated<span class=\"token punctuation\">.</span><span class=\"token function\">getEventType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Treated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"수납요청 되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">FinancialManagement</span> financialManagement <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinancialManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            financialManagement<span class=\"token punctuation\">.</span><span class=\"token function\">setReservationId</span><span class=\"token punctuation\">(</span>treated<span class=\"token punctuation\">.</span><span class=\"token function\">getReservationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            financialManagement<span class=\"token punctuation\">.</span><span class=\"token function\">setFee</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            financialManagementRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>financialManagement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>알림 시스템은 실제로 문자를 보낼 수는 없으므로, 예약/변경/취소 이벤트에 대해서 System.out.println 처리 하였다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>notice</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaListener</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onReservationReservedEvent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">ReservationReserved</span> reservationReserved<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reservationReserved<span class=\"token punctuation\">.</span><span class=\"token function\">getEventType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ReservationReserved\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"예약 되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onReservationChangedEvent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">ReservationChanged</span> reservationChanged<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reservationChanged<span class=\"token punctuation\">.</span><span class=\"token function\">getEventType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ReservationChanged\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"예약 변경 되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onReservationCanceledEvent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">ReservationCanceled</span> reservationCanceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reservationCanceled<span class=\"token punctuation\">.</span><span class=\"token function\">getEventType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ReservationCanceled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"예약 취소 되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>수납, Lookup(CQRS) 시스템은 예약/진료와 완전히 분리되어있으며, 이벤트 수신에 따라 처리되기 때문에, 수납/Lookup 시스템이 유지보수로 인해 잠시 내려간 상태라도 예약/진료를 하는데 문제가 없다:</p>\n<pre class=\"language-text\"><code class=\"language-text\"># 수납 서비스 (acceptance) 를 잠시 내려놓음 (ctrl+c)\n\n#예약처리\nhttp post localhost:8081/reservations reservatorName=&quot;Jackson&quot; reservationDate=&quot;2020-04-30&quot; phoneNumber=&quot;010-1234-5678&quot; #Success\n\n#예약상태 확인\nhttp localhost:8081/reservations     # 예약 추가 된 것 확인\n\n#수납 서비스 기동\ncd acceptance\nmvn spring-boot:run\n\n#수납상태 확인\nhttp localhost:8085/financialManagements     # 모든 예약-진료에 대해서 요금이 청구되엇음을 확인.</code></pre>\n<h3 id=\"-api-게이트웨이\"><a href=\"#-api-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· API 게이트웨이</h3>\n<ul>\n<li>Local 테스트 환경에서는 localhost:8080에서 Gateway API 가 작동.</li>\n<li>Cloud 환경에서는 <code>http://52.231.118.148:8080</code> 에서 Gateway API가 작동.</li>\n<li>application.yml 파일에 프로파일 별로 Gateway 설정.</li>\n</ul>\n<h3> Gateway 설정 파일</h3>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8088</span>\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> default\n  <span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">oauth2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">resourceserver</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">jwt</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">jwk-set-uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8088/.well<span class=\"token punctuation\">-</span>known/jwks.json\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> reservation\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8081</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/reservations/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> diagnosis\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8083</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/medicalRecords/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> lookup\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8084</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/reservationStats/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> acceptance\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8085</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/financialManagements/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> oauth\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8090</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/oauth/<span class=\"token important\">**</span>\n      <span class=\"token key atrule\">globalcors</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">corsConfigurations</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">'[/**]'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">allowedOrigins</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowedMethods</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowedHeaders</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowCredentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> docker\n  <span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">oauth2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">resourceserver</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">jwt</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">jwk-set-uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8080/.well<span class=\"token punctuation\">-</span>known/jwks.json\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> reservation\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//reservation<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/reservations/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> diagnosis\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//diagnosis<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/medicalRecords/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> lookup\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//lookup<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/reservationStats/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> acceptance\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//acceptance<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/financialManagements/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> oauth\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//oauth<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/oauth/<span class=\"token important\">**</span>\n      <span class=\"token key atrule\">globalcors</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">corsConfigurations</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">'[/**]'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">allowedOrigins</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowedMethods</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowedHeaders</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowCredentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span></code></pre>\n<h3 id=\"-oauth-인증-적용\"><a href=\"#-oauth-%EC%9D%B8%EC%A6%9D-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Oauth 인증 적용.</h3>\n<ul>\n<li>Oauth 인증 적용. </li>\n<li>But, 수업 중에 사용한 Oauth 프로젝트를 그대로 이용하여 Gateway에 붙이기만 함.</li>\n</ul>\n<h2 id=\"운영\"><a href=\"#%EC%9A%B4%EC%98%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>운영</h2>\n<h3 id=\"-cicd-설정\"><a href=\"#-cicd-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· CI/CD 설정</h3>\n<p>각 구현체들은 각자의 Git을 통해 빌드되며, Git Master에 트리거 되어 있다. pipeline build script 는 각 프로젝트 폴더 이하에 azure_pipeline.yml 에 포함되었다.</p>\n<p>azure_pipelist.yml 참고</p>\n<p>kubernetes Service</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">trigger</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> self\n\n<span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> common<span class=\"token punctuation\">-</span>value\n  <span class=\"token comment\"># containerRegistry: 'event.azurecr.io'</span>\n  <span class=\"token comment\"># containerRegistryDockerConnection: 'acr'</span>\n  <span class=\"token comment\"># environment: 'aks.default'</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> imageRepository\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'order'</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dockerfilePath\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'**/Dockerfile'</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tag\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'$(Build.BuildId)'</span>\n  <span class=\"token comment\"># Agent VM image name</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> vmImageName\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ubuntu-latest'</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MAVEN_CACHE_FOLDER\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> $(Pipeline.Workspace)/.m2/repository\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MAVEN_OPTS\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'</span>\n\n\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> Build\n  <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> Build stage\n  <span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job</span><span class=\"token punctuation\">:</span> Build\n    <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> Build\n    <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">vmImage</span><span class=\"token punctuation\">:</span> $(vmImageName)\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> CacheBeta@1\n      <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'maven | \"$(Agent.OS)\" | **/pom.xml'</span>\n        <span class=\"token key atrule\">restoreKeys</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n           maven | \"$(Agent.OS)\"\n           maven</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> $(MAVEN_CACHE_FOLDER)\n      <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> Cache Maven local repo\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> Maven@3\n      <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">mavenPomFile</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'pom.xml'</span>\n        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'</span>\n        <span class=\"token key atrule\">javaHomeOption</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'JDKVersion'</span>\n        <span class=\"token key atrule\">jdkVersionOption</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1.8'</span>\n        <span class=\"token key atrule\">jdkArchitectureOption</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'x64'</span>\n        <span class=\"token key atrule\">goals</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'package'</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> Docker@2\n      <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">containerRegistry</span><span class=\"token punctuation\">:</span> $(containerRegistryDockerConnection)\n        <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> $(imageRepository)\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'buildAndPush'</span>\n        <span class=\"token key atrule\">Dockerfile</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'**/Dockerfile'</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          $(tag)</span>\n\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> Deploy\n  <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> Deploy stage\n  <span class=\"token key atrule\">dependsOn</span><span class=\"token punctuation\">:</span> Build\n\n  <span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">deployment</span><span class=\"token punctuation\">:</span> Deploy\n    <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> Deploy\n    <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">vmImage</span><span class=\"token punctuation\">:</span> $(vmImageName)\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span> $(environment)\n    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">runOnce</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> Kubernetes@1\n            <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">connectionType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Kubernetes Service Connection'</span>\n              <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'default'</span>\n              <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'apply'</span>\n              <span class=\"token key atrule\">useConfigurationFile</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n              <span class=\"token key atrule\">configurationType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'inline'</span>\n              <span class=\"token key atrule\">inline</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n                apiVersion: apps/v1\n                kind: Deployment\n                metadata:\n                  name: $(imageRepository)\n                  labels:\n                    app: $(imageRepository)\n                spec:\n                  replicas: 1\n                  selector:\n                    matchLabels:\n                      app: $(imageRepository)\n                  template:\n                    metadata:\n                      labels:\n                        app: $(imageRepository)\n                    spec:\n                      containers:\n                        - name: $(imageRepository)\n                          image: $(containerRegistry)/$(imageRepository):$(tag)\n                          ports:\n                            - containerPort: 8080\n                          readinessProbe:\n                            httpGet:\n                              path: /actuator/health\n                              port: 8080\n                            initialDelaySeconds: 10\n                            timeoutSeconds: 2\n                            periodSeconds: 5\n                            failureThreshold: 10\n                          livenessProbe:\n                            httpGet:\n                              path: /actuator/health\n                              port: 8080\n                            initialDelaySeconds: 120\n                            timeoutSeconds: 2\n                            periodSeconds: 5\n                            failureThreshold: 5</span>\n              <span class=\"token key atrule\">secretType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'dockerRegistry'</span>\n              <span class=\"token key atrule\">containerRegistryType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Azure Container Registry'</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> Kubernetes@1\n            <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">connectionType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Kubernetes Service Connection'</span>\n              <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'default'</span>\n              <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'apply'</span>\n              <span class=\"token key atrule\">useConfigurationFile</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n              <span class=\"token key atrule\">configurationType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'inline'</span>\n              <span class=\"token key atrule\">inline</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n                apiVersion: v1\n                kind: Service\n                metadata:\n                  name: $(imageRepository)\n                  labels:\n                    app: $(imageRepository)\n                spec:\n                  ports:\n                    - port: 8080\n                      targetPort: 8080\n                  selector:\n                    app: $(imageRepository)</span>\n              <span class=\"token key atrule\">secretType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'dockerRegistry'</span>\n              <span class=\"token key atrule\">containerRegistryType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Azure Container Registry'</span></code></pre>\n<h3 id=\"-동기식-호출--서킷-브레이킹--장애격리\"><a href=\"#-%EB%8F%99%EA%B8%B0%EC%8B%9D-%ED%98%B8%EC%B6%9C--%EC%84%9C%ED%82%B7-%EB%B8%8C%EB%A0%88%EC%9D%B4%ED%82%B9--%EC%9E%A5%EC%95%A0%EA%B2%A9%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 동기식 호출 / 서킷 브레이킹 / 장애격리</h3>\n<ul>\n<li>서킷 브레이킹 프레임워크의 선택: Spring FeignClient + Hystrix 옵션을 사용하여 구현함</li>\n</ul>\n<p>시나리오는 예약 시스템(reservation)-->진료(diagnosis) 시의 연결을 RESTful Request/Response 로 연동하여 구현이 되어있고, 진료 요청이 과도할 경우 CB 를 통하여 장애격리.</p>\n<ul>\n<li>Hystrix 를 설정:  요청처리 쓰레드에서 처리시간이 610 밀리가 넘어서기 시작하여 어느정도 유지되면 CB 회로가 닫히도록 (요청을 빠르게 실패처리, 차단) 설정</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># application.yml\n\nserver:\n  port: 8081\nspring:\n  profiles: default\n  cloud:\n    stream:\n      kafka:\n        binder:\n          brokers: localhost:9092\n      bindings:\n        output:\n          destination: animal\n          contentType: application/json\nfeign:\n  hystrix:\n    enabled: true\n    \n    </code></pre>\n<ul>\n<li>피호출 서비스(진료:diagnosis) 의 임의 부하 처리 - 400 밀리에서 증감 220 밀리 정도 왔다갔다 하게</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># (diagnosis) MedicalRecord.java (Entity)\n\n    @PrePersist\n    public void onPrePersist(){  //진료이력을 저장한 후 적당한 시간 끌기\n        ...\n        \n        try {\n            Thread.currentThread().sleep((long) (400 + Math.random() * 220));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }</code></pre>\n<ul>\n<li>부하테스터 siege 툴을 통한 서킷 브레이커 동작 확인:</li>\n</ul>\n<ul>\n<li>동시사용자 100명</li>\n<li>60초 동안 실시</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">$ siege -c100 -t60s -r10 --content-type &quot;application/json&quot; &#39;http://localhost:8081/reservations POST {&quot;reservatorName&quot;: &quot;Jackson&quot;, &quot;phoneNumber&quot;: &quot;01032713104&quot;, &quot;reservationDate&quot;: &quot;2020-05-01&quot;}&#39;\n\nWindows 안에서 작동하는 Ubuntu에서 siege 실행시 &quot;[error] unable to set close control sock.c:141: Invalid argument&quot; 이 발생하여 중간 과정은 알 수 없음.\n\n그러나 아래와 같은 결과를 확인.\n\nLifting the server siege...\nTransactions:                   1067 hits\nAvailability:                  78.92 %\nElapsed time:                  59.46 secs\nData transferred:               0.37 MB\nResponse time:                  5.36 secs\nTransaction rate:              17.94 trans/sec\nThroughput:                     0.01 MB/sec\nConcurrency:                   96.13\nSuccessful transactions:        1067\nFailed transactions:             285\nLongest transaction:            7.01\nShortest transaction:           0.02</code></pre>\n<ul>\n<li>운영시스템은 죽지 않고 지속적으로 CB 에 의하여 적절히 회로가 열림과 닫힘이 벌어지면서 자원을 보호하고 있음을 보여줌. 78.92% 가 성공.</li>\n</ul>\n<h3 id=\"-오토스케일-아웃\"><a href=\"#-%EC%98%A4%ED%86%A0%EC%8A%A4%EC%BC%80%EC%9D%BC-%EC%95%84%EC%9B%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 오토스케일 아웃</h3>\n<p>앞서 CB 는 시스템을 안정되게 운영할 수 있게 해줬지만 사용자의 요청을 100% 받아들여주지 못했기 때문에 이에 대한 보완책으로 자동화된 확장 기능을 적용하고자 한다. </p>\n<ul>\n<li>진료서비스에 대한 replica 를 동적으로 늘려주도록 HPA 를 설정한다. 설정은 CPU 사용량이 15프로를 넘어서면 replica 를 10개까지 늘려준다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl autoscale deploy diagnosis --min=1 --max=10 --cpu-percent=15</code></pre>\n<h3 id=\"-무정지-재배포\"><a href=\"#-%EB%AC%B4%EC%A0%95%EC%A7%80-%EC%9E%AC%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· 무정지 재배포</h3>\n<ul>\n<li>모든 프로젝트의 readiness probe 및 liveness probe 설정 완료.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">readinessProbe</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /actuator/health\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n  <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token key atrule\">failureThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n<span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n     <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /actuator/health\n     <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n  <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">120</span>\n  <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token key atrule\">failureThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"동물병원 진료시스템","anchor":"#동물병원-진료시스템"},{"depth":2,"value":"서비스 시나리오","anchor":"#서비스-시나리오"},{"depth":2,"value":"분석/설계","anchor":"#분석설계"},{"depth":3,"value":"· 헥사고날 아키텍처 다이어그램 도출","anchor":"#-헥사고날-아키텍처-다이어그램-도출"},{"depth":2,"value":"구현","anchor":"#구현"},{"depth":3,"value":"· DDD 의 적용","anchor":"#-ddd-의-적용"},{"depth":3,"value":"· 동기식 호출과 Fallback 처리","anchor":"#-동기식-호출과-fallback-처리"},{"depth":3,"value":"· 클러스터 적용 후 REST API 의 테스트","anchor":"#-클러스터-적용-후-rest-api-의-테스트"},{"depth":3,"value":"· 비동기식 호출과 Eventual Consistency","anchor":"#-비동기식-호출과-eventual-consistency"},{"depth":3,"value":"· API 게이트웨이","anchor":"#-api-게이트웨이"},{"depth":3,"value":"· Oauth 인증 적용.","anchor":"#-oauth-인증-적용"},{"depth":2,"value":"운영","anchor":"#운영"},{"depth":3,"value":"· CI/CD 설정","anchor":"#-cicd-설정"},{"depth":3,"value":"· 동기식 호출 / 서킷 브레이킹 / 장애격리","anchor":"#-동기식-호출--서킷-브레이킹--장애격리"},{"depth":3,"value":"· 오토스케일 아웃","anchor":"#-오토스케일-아웃"},{"depth":3,"value":"· 무정지 재배포","anchor":"#-무정지-재배포"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}