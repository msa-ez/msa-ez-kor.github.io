{"hash":"4cbbea1a93cdc01d690d4bc808cb5fa256693cd8","data":{"markdownPage":{"id":"071d9ce035abd9bda9236f972c2dda45","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 ","description":"","path":"/development/circuit-breaker/","timeToRead":3,"content":"<h1 id=\"reqres-방식에서-장애전파-차단---서킷브레이커\"><a href=\"#reqres-%EB%B0%A9%EC%8B%9D%EC%97%90%EC%84%9C-%EC%9E%A5%EC%95%A0%EC%A0%84%ED%8C%8C-%EC%B0%A8%EB%8B%A8---%EC%84%9C%ED%82%B7%EB%B8%8C%EB%A0%88%EC%9D%B4%EC%BB%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Req/Res 방식에서 장애전파 차단 - 서킷브레이커</h1>\n<h3 id=\"서킷브레이커를-통하여-장애-전파를-차단\"><a href=\"#%EC%84%9C%ED%82%B7%EB%B8%8C%EB%A0%88%EC%9D%B4%EC%BB%A4%EB%A5%BC-%ED%86%B5%ED%95%98%EC%97%AC-%EC%9E%A5%EC%95%A0-%EC%A0%84%ED%8C%8C%EB%A5%BC-%EC%B0%A8%EB%8B%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서킷브레이커를 통하여 장애 전파를 차단</h3>\n<h3 id=\"이벤트스토밍\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%8A%A4%ED%86%A0%EB%B0%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트스토밍</h3>\n<p>서킷브레이커 테스트를 위하여 Order의 order Command 에서 inventory 의 재고량을 조회하는(GET) 호출을 확인한다.</p>\n<blockquote>\n<p>이제 monolith에는 Order 서비스만 존재하여 order로 표현된다.</p>\n</blockquote>\n<ul>\n<li>order command 에서 Inventory Aggregate 로 선을 연결한다. </li>\n</ul>\n<img width=\"899\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190903135-a6bb95c0-d1f6-424e-9444-1bbf0119386a.png\">\n<ul>\n<li>연결한 선을 더블 클릭하여 호출이름을 다음과 같이 준다: get availability</li>\n<li>호출선의 설정에서 Circuit breaker 옵션을 On 한다</li>\n</ul>\n<img width=\"452\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190903010-1f789fc6-bc4e-4ad5-a7fd-a2a51b11c940.png\">\n<h3 id=\"생성-코드-확인과-구현\"><a href=\"#%EC%83%9D%EC%84%B1-%EC%BD%94%EB%93%9C-%ED%99%95%EC%9D%B8%EA%B3%BC-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성 코드 확인과 구현</h3>\n<ul>\n<li>Code > Project IDE로 GitPod를 오픈한다.</li>\n<li>order/../Order.java 의 @PrePersist</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    @PrePersist\n    public void onPrePersist() {\n        // Get request from Inventory\n        Inventory inventory =\n           OrderApplication.applicationContext.getBean(InventoryService.class)\n           .getInventory(Long.valueOf(getProductId()));\n\n        if(inventory.getStock() &lt; getQty()) throw new RuntimeException(&quot;Out of Stock!&quot;);\n\n    }</code></pre>\n<blockquote>\n<p>재고 서비스를 호출한 결과 얻은 재고량을 확인하여 재고가 주문량에 못 미치면 오류를 내도록 하는 검증 로직을 추가</p>\n<ul>\n<li>order/../external/InventoryService.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"></code></pre>\n</blockquote>\n<p>@FeignClient(name = \"inventory\", url = \"${api.url.inventory}\")\npublic interface InventoryService {\n@RequestMapping(method = RequestMethod.GET, path = \"/inventories/{id}\")\npublic Inventory getInventory(@PathVariable(\"id\") Long id);</p>\n<p>  ...\n}</p>\n<pre class=\"language-text\"><code class=\"language-text\">&gt; 재고량을 얻기 위한 GET 호출의 FeignClient Interface 확인\n\n\n\n### 서킷브레이커 설정전 주문해 보기 \n- monolith(Order) 서비스와 inventory 서비스를 실행한다. </code></pre>\n<p>cd order\nmvn clean spring-boot:run</p>\n<p>cd inventory\nmvn clean spring-boot:run</p>\n<pre class=\"language-text\"><code class=\"language-text\">- 충분한 재고량을 입력한다.</code></pre>\n<p>http :8082/inventories id=1 stock=10000</p>\n<pre class=\"language-text\"><code class=\"language-text\">- 부하 툴을 사용하여 동시사용자 2명의 10초간의 주문을 넣어본다.\n-&gt; sudo apt install siege -y 을 통해 설치</code></pre>\n<p>siege -c2 -t10S  -v --content-type \"application/json\" '<a href=\"http://localhost:8081/orders\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8081/orders</a> POST {\"productId\":1, \"qty\":1}'</p>\n<pre class=\"language-text\"><code class=\"language-text\">\t\t\n&gt; 모든 호출이  201 Code 로 성공함을 알 수 있다.\n\n### 서킷브레이커 설정하기\n\n- monolith(Order) 서비스의 application.yaml 파일의 다음 설정을 true 로 하고, 임계치를 610ms로 바꾼다:  \n\n    ````yaml\n  \n    feign:\n      hystrix:\n        enabled: true\n    \n    hystrix:\n      command:\n        # 전역설정\n        default:\n          execution.isolation.thread.timeoutInMilliseconds: 610\n    ````\n\n- inventory 서비스의 Inventory.java 에 성능이 느려지도록 강제 딜레이를 발생시키는 코드를 추가한다.  \n\n\n   ````java\n    @PostLoad\n    public void makeDelay(){\n        try {\n            Thread.currentThread().sleep((long) (400 + Math.random() * 220));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n    }</code></pre>\n<h3 id=\"서킷브레이커-설정후-주문해-보기\"><a href=\"#%EC%84%9C%ED%82%B7%EB%B8%8C%EB%A0%88%EC%9D%B4%EC%BB%A4-%EC%84%A4%EC%A0%95%ED%9B%84-%EC%A3%BC%EB%AC%B8%ED%95%B4-%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서킷브레이커 설정후 주문해 보기</h3>\n<ul>\n<li>monolith와 inventory 서비스를 모두 재시작한다. </li>\n<li>재시작 후, 인벤트로의 재고량을 충분히 설정한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories id=1 stock=10000</code></pre>\n<ul>\n<li>\n<p>다시 부하 툴을 사용하여 주문을 넣어본다.  </p>\n<pre class=\"language-text\"><code class=\"language-text\">```\nsiege -c2 -t20S  -v --content-type &quot;application/json&quot; &#39;http://localhost:8081/orders POST {&quot;productId&quot;:1, &quot;qty&quot;:1}&#39;\n```</code></pre>\n<blockquote>\n<p>Delay 가 발생함에 따라 적당히 201 code 와 500 오류 코드가 반복되며 inventory 로 부하를 조절하면서 요청을 관리하는 것을 확인할 수 있다.\n결과적으로 Availability 는 60~90% 수준이 유지되면서 서비스는 유지된다.</p>\n</blockquote>\n</li>\n<li>monolith(Order) 서비스의 로그를 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">java.lang.RuntimeException: Hystrix circuit short-circuited and is OPEN</code></pre>\n<blockquote>\n<p>서킷 브레이커가 발동하여 오류가 발생한 것을 확인할 수 있다.</p>\n</blockquote>\n<p>~~ [Tip] 임계치를 바꾸거나 delay 를 바꾸어 가면서 테스트해보세요 ~~</p>\n<h3 id=\"fallback-처리-장애시에-적당한-대체값\"><a href=\"#fallback-%EC%B2%98%EB%A6%AC-%EC%9E%A5%EC%95%A0%EC%8B%9C%EC%97%90-%EC%A0%81%EB%8B%B9%ED%95%9C-%EB%8C%80%EC%B2%B4%EA%B0%92\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>fallback 처리 (장애시에 적당한 대체값)</h3>\n<ul>\n<li>inventory 서비스가 중지된 상태로 주문을 넣어본다. ( 500 에러 )</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 qty=1 </code></pre>\n<ul>\n<li>order 서비스의 external/InventoryService.java 의 FeignClient에 fallback 옵션을 설정한다.</li>\n<li>\n<p>10라인 FeignClient 설정을 아래 코드로 Replace 한다.    </p>\n<pre class=\"language-text\"><code class=\"language-text\">@FeignClient(name = &quot;inventory&quot;, url = &quot;${api.url.inventory}&quot;, fallback = InventoryServiceFallback.class)</code></pre>\n</li>\n<li>monolith(Order) 서비스에 Fallback 구현체를 추가한다:</li>\n<li>external 패키지 상에서 New File >  InventoryServiceFallback.java 파일을 생성하고 아래 샘플코드를 붙여넣는다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package labshoppubsub.external;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class InventoryServiceFallback implements InventoryService{\n    public Inventory getInventory(Long id){\n        Inventory fallbackValue = new Inventory();\n        fallbackValue.setStock(1L);\n\n        return fallbackValue;\n    }\n}</code></pre>\n<ul>\n<li>\n<p>monolith(Order) 서비스를 재실행 후 주문을 넣어본다. ( 주문 가능 )</p>\n<ul>\n<li>이때 inventory 서비스는 중지 상태 이어야 한다.  </li>\n<li>InventoryServiceImpl 의 getInventory 메서드가 실행되어 적당한 가짜 값인 1이 리턴되어 재고량이 있는 것으로 리턴하게 하는 것을 확인할 수 있다. </li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 qty=1   # will succeed!</code></pre>\n<ul>\n<li>qty를 1이상인 값으로도 호출해본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 qty=3   # will fail!</code></pre>\n<h3 id=\"다른-circuit-breaker-들\"><a href=\"#%EB%8B%A4%EB%A5%B8-circuit-breaker-%EB%93%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다른 Circuit Breaker 들</h3>\n<p><a href=\"https://dzone.com/articles/comparing-envoy-and-istio-circuit-breaking-with-ne?fbclid=IwAR0wYnXPiAZSVtluJ-17Ywb9dK3xrytAMo3ImIZv8KwoOo2WGGnyTKm6c04\" target=\"_blank\" rel=\"noopener noreferrer\">https://dzone.com/articles/comparing-envoy-and-istio-circuit-breaking-with-ne?fbclid=IwAR0wYnXPiAZSVtluJ-17Ywb9dK3xrytAMo3ImIZv8KwoOo2WGGnyTKm6c04</a></p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커","anchor":"#reqres-방식에서-장애전파-차단---서킷브레이커"},{"depth":3,"value":"서킷브레이커를 통하여 장애 전파를 차단","anchor":"#서킷브레이커를-통하여-장애-전파를-차단"},{"depth":3,"value":"이벤트스토밍","anchor":"#이벤트스토밍"},{"depth":3,"value":"생성 코드 확인과 구현","anchor":"#생성-코드-확인과-구현"},{"depth":3,"value":"서킷브레이커 설정후 주문해 보기","anchor":"#서킷브레이커-설정후-주문해-보기"},{"depth":3,"value":"fallback 처리 (장애시에 적당한 대체값)","anchor":"#fallback-처리-장애시에-적당한-대체값"},{"depth":3,"value":"다른 Circuit Breaker 들","anchor":"#다른-circuit-breaker-들"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/tool/wireframe-generate/","title":"모델 기반 UI 자동 생성"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/ddl-to-eventstorming2/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}