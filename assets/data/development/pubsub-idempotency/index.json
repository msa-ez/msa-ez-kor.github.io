{"hash":"f0ae7aa92c70db42b7abbf0758aa4b61df3c9a7e","data":{"markdownPage":{"id":"702a0c958bf957703378ed3960585c94","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency","description":"","path":"/development/pubsub-idempotency/","timeToRead":2,"content":"<h1 id=\"pubsub-방식의-연동---choreography-with-idempotency\"><a href=\"#pubsub-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%97%B0%EB%8F%99---choreography-with-idempotency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub 방식의 연동 - Choreography with Idempotency</h1>\n<h2 id=\"12st-mall에-중복실행-방지-적용\"><a href=\"#12st-mall%EC%97%90-%EC%A4%91%EB%B3%B5%EC%8B%A4%ED%96%89-%EB%B0%A9%EC%A7%80-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12st Mall에 중복실행 방지 적용</h2>\n<ul>\n<li>12st Mall의 Consumer 사이드에 Idempotency(멱등성)를 추가함으로써 진정한 Eventual Consistency를 구현한다.</li>\n<li>프로세스 처리 중 실패하게 되면 Reject에 따라 보상처리(Compensation)가 벌어진다.</li>\n<li>Mall에서 보상처리가 한번 이상 벌어져도 상품재고가 두번, 세번 차감되어서는 안된다.</li>\n</ul>\n<h3 id=\"gitpod-환경-구성\"><a href=\"#gitpod-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GitPod 환경 구성</h3>\n<ul>\n<li>모델을 내 리파지토리로 복사(Fork)한다.</li>\n<li>CODE > Code Preview 메뉴로 코드 창을 오픈한다.</li>\n<li>GitHub 메뉴 팝업에서 코드를 Fork하여 생성한다.\n<img src=\"https://user-images.githubusercontent.com/108639319/204209954-0f47ea0f-0ca5-4e0a-9c3e-226ad4eabb37.png\" alt=\"image\"></li>\n<li>'Open GitPod'를 클릭하여 코드를 로드한다.</li>\n</ul>\n<h3 id=\"12st-mall-테스트\"><a href=\"#12st-mall-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12st Mall 테스트</h3>\n<h4 id=\"topic-리스닝\"><a href=\"#topic-%EB%A6%AC%EC%8A%A4%EB%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Topic 리스닝</h4>\n<ul>\n<li>새로운 터미널에서 kafka 컨슈머로 토픽을 모니터링한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin\n./kafka-console-consumer --bootstrap-server localhost:9092 --topic choreography.with.idempotency</code></pre>\n<h4 id=\"서비스-실행-데이터-초기화\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%A4%ED%96%89-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 실행, 데이터 초기화</h4>\n<ul>\n<li>주문과 배송 서비스를 각각 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nmvn clean spring-boot:run\n\ncd delivery\nmvn clean spring-boot:run</code></pre>\n<ul>\n<li>상품 마이크로서비스를 실행하고, 2개의 상품 데이터를 등록한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd product \nmvn clean spring-boot:run\n\nhttp :8083/inventories productName=TV stock=1000   # id=1\nhttp :8083/inventories productName=RADIO stock=1000  # id=2</code></pre>\n<ul>\n<li>주문을 발행하고, 카프카 토픽과 상품 재고를 모니터링한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders customerId=1 productId=1 productName=TV qty=10\n\nhttp :8081/orders/1\nhttp :8083/inventories</code></pre>\n<ul>\n<li>재고량을 초과하는 상품번호로 주문을 발행하고 카프카 토픽의 이벤트를 모니터링한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders customerId=1 productId=2 productName=TV qty=200</code></pre>\n<ul>\n<li>\n<p>상품 서비스에서 StockDecreasedFailed 가 Publish되어 Order Reject에 따라 보상(Compensation)처리가 벌어진다. </p>\n<blockquote>\n<p>OrderCreated - DeliveryStarted - StockDecreaseFailed - OrderRejected - DeliveryCancelled</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"12st-mall에-중복실행-방지-적용-1\"><a href=\"#12st-mall%EC%97%90-%EC%A4%91%EB%B3%B5%EC%8B%A4%ED%96%89-%EB%B0%A9%EC%A7%80-%EC%A0%81%EC%9A%A9-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12st Mall에 중복실행 방지 적용</h3>\n<ul>\n<li>카프카 파티션 수가 변하거나, Consumer Group의 Client가 Scaling되면 Kafka에서는 리밸런싱이 일어난다.</li>\n<li>리밸런싱이 일어나면, Offset이 처리되지 않은 파티션에 Consumer가 재할당 되어 메시지를 재수신하는 일이 벌어진다.</li>\n<li>Consumer 사이드에서 한번 처리된 메시지가 중복 처리되지 않도록 멱등성을 적용해 본다.</li>\n</ul>\n<h4 id=\"delivery-서비스\"><a href=\"#delivery-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Delivery 서비스</h4>\n<p>Delivery Aggregate를 열어보자.</p>\n<ul>\n<li>Delivery 서비스의 Key 필드인 orderId 자동 생성 dsiable; 19 라인  </li>\n<li>주문 서비스의 Order Id를 Key 필드로 저장 </li>\n<li>메시지 중복 실행(저장) 멱등성 관리; 40 라인</li>\n<li>Compensate가 벌어질 때, Key 필드 삭제 : 보상처리 멱등성 관리; 55 라인</li>\n</ul>\n<h4 id=\"inventory-서비스\"><a href=\"#inventory-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Inventory 서비스</h4>\n<ul>\n<li>\n<p>멱등성 관리를 위한 Transaction 리파지토리를 생성한다.</p>\n<ul>\n<li>product > domain 패키지에 Transaction.java를 생성한다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package choreography.with.idempotency.domain;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\nimport choreography.with.idempotency.ProductApplication;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class Transaction {\n    @Id\n    Long orderId;\n    Integer stockOrdered;\n    String customerId;\n\n    public static TransactionRepository repository(){\n        return ProductApplication.applicationContext.getBean(TransactionRepository.class);\n    }\n}</code></pre>\n<ul>\n<li>product > domain 패키지에 TransactionRepository.java를 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package choreography.with.idempotency.domain;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface TransactionRepository extends JpaRepository&lt;Transaction, Long&gt;{\n    \n}</code></pre>\n<ul>\n<li>Inventory.java에 Idempotency 적용</li>\n</ul>\n<p>생성한 Transaction 리파지토리에 주문번호를 Key로 멱등성을 적용한다.</p>\n<ol>\n<li>(34~35라인 주석해제) 한번 처리된 메시지는 중복처리 되지 않는다 - 멱등성 관리</li>\n<li>(44~48라인 주석해제) 정상 처리된 주문에 대해 Trx 리파지토리에 등록(,Or 플래그 처리)</li>\n<li>(63, 69, 73~77라인 주석해제) 보상처리 멱등성 관리를 위해 처리 후 삭제한다.</li>\n</ol>\n<h3 id=\"멱등성이-적용된-서비스-테스트\"><a href=\"#%EB%A9%B1%EB%93%B1%EC%84%B1%EC%9D%B4-%EC%A0%81%EC%9A%A9%EB%90%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>멱등성이 적용된 서비스 테스트</h3>\n<ul>\n<li>상품 마이크로서비스를 재실행하고, 2개의 상품 데이터를 등록한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd product \nmvn clean spring-boot:run\n\nhttp :8083/inventories productName=TV stock=100   # id=1\nhttp :8083/inventories productName=RADIO stock=100  # id=2</code></pre>\n<ul>\n<li>주문을 발행하고, 카프카 토픽과 상품 재고를 모니터링한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders customerId=1 productId=1 productName=TV qty=10\n\nhttp :8081/orders/1\nhttp :8083/inventories</code></pre>\n<ul>\n<li>재고량을 초과하는 상품번호로 주문을 발행하고 카프카 토픽의 이벤트를 모니터링한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders customerId=1 productId=2 productName=TV qty=200</code></pre>\n<ul>\n<li>결과는 동일하게 작동한다.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Pub/Sub 방식의 연동 - Choreography with Idempotency","anchor":"#pubsub-방식의-연동---choreography-with-idempotency"},{"depth":2,"value":"12st Mall에 중복실행 방지 적용","anchor":"#12st-mall에-중복실행-방지-적용"},{"depth":3,"value":"GitPod 환경 구성","anchor":"#gitpod-환경-구성"},{"depth":3,"value":"12st Mall 테스트","anchor":"#12st-mall-테스트"},{"depth":4,"value":"Topic 리스닝","anchor":"#topic-리스닝"},{"depth":4,"value":"서비스 실행, 데이터 초기화","anchor":"#서비스-실행-데이터-초기화"},{"depth":3,"value":"12st Mall에 중복실행 방지 적용","anchor":"#12st-mall에-중복실행-방지-적용-1"},{"depth":4,"value":"Delivery 서비스","anchor":"#delivery-서비스"},{"depth":4,"value":"Inventory 서비스","anchor":"#inventory-서비스"},{"depth":3,"value":"멱등성이 적용된 서비스 테스트","anchor":"#멱등성이-적용된-서비스-테스트"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/plsql-2-java/","title":"PL/SQL to Java 자동 테스팅"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}