{"hash":"0e9061015c593e592de94975705a10d63dafb702","data":{"markdownPage":{"id":"a1dc1f9cbb8c643989748fc8683dba3c","title":"Kafka Scaling ","description":"","path":"/development/kafka-scaling/","timeToRead":2,"content":"<h1 id=\"kafka-scaling\"><a href=\"#kafka-scaling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Scaling</h1>\n<h3 id=\"kafka-스케일링\"><a href=\"#kafka-%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 스케일링</h3>\n<h4 id=\"kafka-partition-vs-consumers\"><a href=\"#kafka-partition-vs-consumers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Partition vs. Consumers</h4>\n<ul>\n<li>Kafka Topic 생성시, default partition은 1개로 생성된다. </li>\n<li>kafka에서 하나의 Partition은 반드시 하나의 Consumer가 매칭되어 메시지를 소비한다. </li>\n<li>Partiton 수보다 동일한 Group id를 가진 Consumer 수가 많다면 일부 Consumer들은 partition에 binding되지 못해 message를 Polling 하지 못하는 현상이 일어난다. </li>\n<li>아래의 Instruction을 따라 일부 Consumer가 메시지를 poll 해오지 못하는 현상을 확인한다. </li>\n<li>Order 서비스 시작</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> order\nmvn spring-boot:run</code></pre>\n<ul>\n<li>inventory 서비스 시작 (port=8082)</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> inventory\nmvn spring-boot:run</code></pre>\n<ul>\n<li>inventory 2 서비스 시작 (port=8083)</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> inventory\nmvn spring-boot:run -Dspring-boot.run.arguments<span class=\"token operator\">=</span>--server.port<span class=\"token operator\">=</span><span class=\"token number\">8083</span></code></pre>\n<blockquote>\n<p>inventory1 서비스와는 달리 inventory2 마이크로서비스의 Console 창을 통해 파티션 할당이 일어나지 않았음을 확인할 수 있다.\npartitions assigned: []</p>\n</blockquote>\n<ul>\n<li>Consumer 그룹정보를 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin\n\n./kafka-topics --bootstrap-server 127.0.0.1:9092 --topic labshoppubsub --describe\n\n./kafka-consumer-groups --bootstrap-server localhost:9092 --describe --group inventory</code></pre>\n<blockquote>\n<p>Inventory Group 의  Consumer (마이크로서비스 레플리카)가 2개임에도 파티션이 1개이므로, 매칭된 Consumer가  1개로 확인된다.</p>\n</blockquote>\n<ul>\n<li>실험을 위하여 8082, 8083 의 inventory 에 각각 10개의 재고를 등록한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories id=1 stock=10\nhttp :8083/inventories id=1 stock=10</code></pre>\n<ul>\n<li>주문 4건을 등록한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders productId=1 qty=1\nhttp :8081/orders productId=1 qty=1\nhttp :8081/orders productId=1 qty=1\nhttp :8081/orders productId=1 qty=1</code></pre>\n<ul>\n<li>해당 주문에 대한 재고 감소가 8082 혹은 8083 한 곳에서만 발생한 것을 확인한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories/1\nhttp :8083/inventories/1</code></pre>\n<h4 id=\"kafka-partition-scale-out\"><a href=\"#kafka-partition-scale-out\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Partition Scale out</h4>\n<ul>\n<li>Kafka Partition을 확장한다. </li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">./kafka-topics --bootstrap-server <span class=\"token number\">127.0</span>.0.1:9092 <span class=\"token parameter variable\">--alter</span> <span class=\"token parameter variable\">--topic</span> labshoppubsub <span class=\"token parameter variable\">-partitions</span> <span class=\"token number\">2</span></code></pre>\n<ul>\n<li>Inventory2 마이크로서비스를 재시작하거나 2~3분 정도 기다리면 Partition Rebalancing이 일어나면서 Inventory2 서비스도 partition assigned로 바뀌며 message를 Polling할 수 있는 상태로 변경된다.</li>\n<li>토픽정보와 Consumer Group 정보를 재확인한다.</li>\n</ul>\n<blockquote>\n<p>Partition 0,1 각각에 Consumer가 매핑된 것을 확인할 수 있다.</p>\n</blockquote>\n<ul>\n<li>Order 서비스에 POST로 메시지를 발행하면 Inventory 1, Inventory 2 서비스가 차례로 메시지를 수신하기 때문에 8082, 8083이 나누어서 재고량이 1씩 감소된다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders productId=1 qty=1\nhttp :8082/inventories/1\nhttp :8083/inventories/1\n\nhttp :8081/orders productId=1 qty=1\nhttp :8082/inventories/1\nhttp :8083/inventories/1\n\nhttp :8081/orders productId=1 qty=1\nhttp :8082/inventories/1\nhttp :8083/inventories/1</code></pre>\n<blockquote>\n<p>물론, 실제 inventory 이 production 될때는 같은 데이터베이스를 사용하도록 production 될 것이기 때문에 재고량의 차이가 생기지는 않는다.</p>\n</blockquote>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Kafka Scaling","anchor":"#kafka-scaling"},{"depth":3,"value":"Kafka 스케일링","anchor":"#kafka-스케일링"},{"depth":4,"value":"Kafka Partition vs. Consumers","anchor":"#kafka-partition-vs-consumers"},{"depth":4,"value":"Kafka Partition Scale out","anchor":"#kafka-partition-scale-out"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/wireframe-generate/","title":"DDD 기반 UI 설계 및 자동 구현"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/ddl-to-eventstorming2/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/","title":"이벤트스토밍"}}]}},"context":{}}