{"hash":"0e9061015c593e592de94975705a10d63dafb702","data":{"markdownPage":{"id":"f49669fffa01e020ab34c63bb8736b40","title":"Data Projection with GraphQL","description":"","path":"/development/dp-graphql/","timeToRead":4,"content":"<h1 id=\"data-projection-with-graphql\"><a href=\"#data-projection-with-graphql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Projection with GraphQL</h1>\n<h3 id=\"graphql로-백엔드-데이터-통합\"><a href=\"#graphql%EB%A1%9C-%EB%B0%B1%EC%97%94%EB%93%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%86%B5%ED%95%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL로 백엔드 데이터 통합</h3>\n<p>Data Projection의 두번째 방법으로  Backend에서 Data를 Projection하는 전용의 서버로 구현하는 BFF 패턴을 소개한다: (Apollo 서버 활용)</p>\n<ul>\n<li>우측의 모델을 lab-shop-graphql 이름으로 'Fork'하여 커스터마이징 한다.</li>\n<li>GraphQL 용 Apollo Server 를 생성하기 위하여 CODE Preview > TOPPINGS 에서 \"Apollo GraphQL\" 선택</li>\n</ul>\n<img width=\"697\"  src=\"https://user-images.githubusercontent.com/487999/191050930-bca7a84e-ab92-4c41-a746-a4b40da3e58d.png\">\n<ul>\n<li>apollo 마이크로 서비스 폴더가 생성된 것을 확인하고, 코드를 Git 으로 PUSH 한다.</li>\n<li>Project IDE 를 Open 한다.</li>\n<li>GitPod가 로딩된 후, 커밋된 모델의 소스코드를 확인한다:</li>\n</ul>\n<ul>\n<li>주문,재고,배송 서비스를 모두 기동한다.</li>\n<li>주문서비스 기동(8081)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nmvn spring-boot:run</code></pre>\n<ul>\n<li>재고서비스 기동(8082)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd inventory\nmvn spring-boot:run</code></pre>\n<ul>\n<li>배송서비스 기동(8083)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd delivery\nmvn spring-boot:run</code></pre>\n<ul>\n<li>상품을 등록하고 해당 상품을 주문한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8082/inventories id=1 stock=10\n\nhttp localhost:8081/orders productId=1 qty=1 customerId=&quot;1@uengine.org&quot;</code></pre>\n<ul>\n<li>GraphQL 기동(8089)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd apollo_graphql\nnpm install\nyarn start</code></pre>\n<ul>\n<li>\n<p>GraphQL Playground </p>\n<blockquote>\n<p>작성한 GraphQL Type, Resolver 명세확인, 데이터 요청 및 테스트가 가능한 워크벤치</p>\n</blockquote>\n</li>\n<li>Remote Explorer 에서 WebUI에 접속</li>\n</ul>\n<img width=\"1161\" alt=\"스크린샷 2022-09-23 오후 3 48 53\" src=\"https://user-images.githubusercontent.com/58163635/191912194-88d4b4a0-44fd-4f13-a014-73fc0b503797.png\">\n<p>** 이 때 서비스를 Make Public 꼭 해주어야 조회가 가능하다.</p>\n<h3 id=\"서비스-조회\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 조회</h3>\n<ul>\n<li>전체 주문서비스</li>\n</ul>\n<pre class=\"language-gql\"><code class=\"language-gql\">query getOrders {\n  orders {\n    productId\n    qty\n  }\n}</code></pre>\n<ul>\n<li>단일 주문서비스( id=1 주문서비스 )</li>\n</ul>\n<pre class=\"language-gql\"><code class=\"language-gql\">query getOrderById {\n  order(id: 1) {\n    productId\n    qty\n  }\n}</code></pre>\n<ul>\n<li>복합 서비스 조회</li>\n</ul>\n<p>복합적인 서비스 조회를 위하여 서브쿼리에 대한 Resolver 전략을 작성한다:</p>\n<ul>\n<li>resolver.ts</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">const resolvers = {\n    Order: {\n        delivery: async (root, {deliveryId}, {dataSources}) =&gt; {\n            try {\n                if (root &amp;&amp; root._links.self.href) {\n                    var parseLink = root._links.self.href.split(&#39;/&#39;)\n                    var getOrderId = parseLink[parseLink.length - 1]\n                    var deliveries = await dataSources.deliveryRestApi.getDeliveries();\n\n                    if(deliveries){\n                        var rtnVal = null\n                        Object.values(deliveries).forEach(function (delivery) {\n                            if(delivery &amp;&amp; delivery.orderId == getOrderId){\n                                rtnVal = delivery\n                            }\n                        })\n                        return rtnVal\n                    }\n                }\n                return null;\n            } catch (e) {\n                return null;\n            }\n        },\n        \n        inventory: async (root, {productId}, {dataSources}) =&gt; {\n            if (!productId) productId = root.productId\n\n            if (productId) {\n                return await dataSources.inventoryRestApi.getInventory(productId);\n            }\n            return null;\n        }\n    },\n    Inventory: {\n        // set Query\n    },\n    Delivery: {\n        // set Query\n    },\n\n    Query: {\n        order : async (_, { id }, { dataSources }) =&gt; {\n            return dataSources.orderRestApi.getOrder(id);\n        },\n        orders : async (_, __, { dataSources }) =&gt; {\n            return dataSources.orderRestApi.getOrders();\n        },\n        inventory : async (_, { id }, { dataSources }) =&gt; {\n            return dataSources.inventoryRestApi.getInventory(id);\n        },\n        inventories : async (_, __, { dataSources }) =&gt; {\n            return dataSources.inventoryRestApi.getInventories();\n        },\n        delivery : async (_, { id }, { dataSources }) =&gt; {\n            return dataSources.deliveryRestApi.getDelivery(id);\n        },\n        deliveries : async (_, __, { dataSources }) =&gt; {\n            return dataSources.deliveryRestApi.getDeliveries();\n        },\n    }\n};\n\nexport default resolvers;</code></pre>\n<ul>\n<li>Type 선언에 속성추가 :  typeDefs.ts</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    type Order {\n    \tid: Long! \n\t\t\tproductId: String \n\t\t\tqty: Integer \n\t\t\tcustomerId: String \n\t\t\tamount: Double \n\t\t\tstatus: String \n\t\t\taddress: String\n      delivery: Delivery\n      inventory: Inventory\n    }</code></pre>\n<p>order 서비스의 연결된 product, delivery 정보조회</p>\n<pre class=\"language-gql\"><code class=\"language-gql\">query {\n  orders {\n    qty\n    customerId\n    \n    delivery {\n      orderId\n    }\n\n    inventory{\n      stock\n    }\n  }\n\n}</code></pre>\n<ul>\n<li>호출결과</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;data&quot;: {\n    &quot;orders&quot;: [\n      {\n        &quot;qty&quot;: 1,\n        &quot;customerId&quot;: &quot;1@uengine.org&quot;,\n        &quot;delivery&quot;: {\n          &quot;orderId&quot;: 1\n        },\n        &quot;inventory&quot;: {\n          &quot;stock&quot;: 9\n        }\n      }\n    ]\n  }\n}</code></pre>\n<h4 id=\"graphql-파일-참고\"><a href=\"#graphql-%ED%8C%8C%EC%9D%BC-%EC%B0%B8%EA%B3%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL 파일 참고</h4>\n<ol>\n<li>src/graphql/resolvers.js</li>\n</ol>\n<ul>\n<li>데이터를 가져오는 구체적인 과정을 구현     </li>\n<li>서비스의 액션들을 함수로 지정, 요청에 따라 데이터를 반환(Query), Mutation(입력, 수정, 삭제) 하는 Query 또는 구현체 작성</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">예시)\nconst resolvers = {\n  //typeDefs의 객체 유형 정보(Order, Query, Product) 호출 선언\n  \n  Query: {\n     //...\n  } \n  Order: {\n      deliveries: (root, args, {dataSources}) =&gt; {}\n\n      //  함수명: (parent, args, context, info) =&gt; {}\n      //  * parent  : 루트에 대한 resolver의 반환 값.\n      //  * args    : 함수 호출시 args 또는 {parameter}으로 인자값.\n      //  * context : \n            특정 작업을 위해 실행되는 모든 resolver에 전달되는 개체,\n            데이터베이스 연결과 같은 컨텍스트를 공유.\n          {dataSources}: xxx-rest-api.js와 연결된 데이터 호출.\n      //  * info    : 필드명, 루트에서 필드까지의 경로 등 작업의 실행 상태.\n  }\n}</code></pre>\n<ol start=\"2\">\n<li>\n<p>src/graphql/typeDefs.js</p>\n<ul>\n<li>GraphQL 명세서에서 사용될 데이터, 요청의 타입 (gql로 생성됨)</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>Type Definitions</li>\n<li>객체 타입과 필드명 선언</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">type Delivery {\n        id: Long!\n        orderId: Long \n        productId: Long \n        customerId: String \n        deliveryAddress: String \n        deliveryState: String \n        orders: [Order]\n        order(orderId: Long): Order\n    }\n  \n    type Order {\n        id: Long! \n        productId: Long\n        customerId: String\n        state: String\n        deliveries: [Delivery]\n        delivery(deliveryId: Long): Delivery\n    }\n\n    // []: 배열\n    //  !: 필수값</code></pre>\n<ol start=\"3\">\n<li>\n<p>src/restApiServer/xxx-rest-api.js</p>\n<ul>\n<li>apollo-datasource-rest의 해당 서비스의 호출 함수및 호출 경로 설정.</li>\n</ul>\n</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">import {RESTDataSource} from &#39;apollo-datasource-rest&#39;;\n// apollo-datasource-rest 모듈\n\nclass orderRestApi extends RESTDataSource {\n    constructor() {\n        super();\n        this.baseURL = &#39;http://order:8080&#39;;\n        // 해당 서비스의 호출 주소 정보.\n    }\n\n    // 함수명() \n    async getOrders() {\n        const data = await this.get(&#39;/orders&#39;, {})\n        // baseURL 이후 url 호출 정보.\n\n        var value = this.stringToJson(data);\n        // 호출정보 String to Json 으로 변경. \n        \n        return value\n        // 호출 정보 리턴.\n    }\n\n    async getOrder(id) {\n        // ...\n    }\n\n    stringToJson(str){\n        if(typeof str == &#39;string&#39;){\n            str = JSON.parse(str);\n        }\n        return str;\n    }\n}</code></pre>\n<ol start=\"4\">\n<li>\n<p>src/index.js</p>\n<ul>\n<li>선언부 호출 매핑및 선언.</li>\n</ul>\n</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">import {ApolloServer} from &#39;apollo-server&#39;;\nimport resolvers from &#39;./graphql/resolvers.js&#39;;\nimport typeDefs from &#39;./graphql/typeDefs.js&#39;;\nimport orderRestApi from &#39;./restApiServer/order-rest-api.js&#39;\nimport deliveryRestApi from &#39;./restApiServer/delivery-rest-api.js&#39;\n\nconst server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    dataSources: () =&gt; ({\n        orderRestApi: new orderRestApi(),\n        deliveryRestApi: new deliveryRestApi()\n    }),\n    // dataSources 선언 하여 xxxRestApi 호출정보.\n});\n\nserver.listen({\n    port: 8089,\n}).then(({url}) =&gt; {\n    console.log(`🚀  Server ready at ${url}`);\n});</code></pre>\n<h3 id=\"미션--delivery-조회를-위한-resolver-효율화\"><a href=\"#%EB%AF%B8%EC%85%98--delivery-%EC%A1%B0%ED%9A%8C%EB%A5%BC-%EC%9C%84%ED%95%9C-resolver-%ED%9A%A8%EC%9C%A8%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>미션:  delivery 조회를 위한 resolver 효율화</h3>\n<p>현재 주문에 대한 배송건을 찾는 로직은 전체 배송을 모두 조회한 후 orderId와 비교하는 비효율적인 조회를 하고 있다. 이를 다음과 같이 findByOrderId 를 통해 백엔드에서 DB 조회한 결과를 가져오도록 변경하기 위하여 data source 부분의 코드와 delivery 서비스를 개선하시오:</p>\n<pre class=\"language-text\"><code class=\"language-text\">const resolvers = {\n    Order: {\n        delivery: async (root, {deliveryId}, {dataSources}) =&gt; {\n            var parseLink = root._links.self.href.split(&#39;/&#39;)\n            var orderId = parseLink[parseLink.length - 1]\n            var deliveries = await dataSources.deliveryRestApi.findByOrderId(orderId);\n\n            if(deliveries &amp;&amp; deliveries.length&gt;0)\n                return deliveries[0];\n\n            return null;\n        },\n      ...</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Data Projection with GraphQL","anchor":"#data-projection-with-graphql"},{"depth":3,"value":"GraphQL로 백엔드 데이터 통합","anchor":"#graphql로-백엔드-데이터-통합"},{"depth":3,"value":"서비스 조회","anchor":"#서비스-조회"},{"depth":4,"value":"GraphQL 파일 참고","anchor":"#graphql-파일-참고"},{"depth":3,"value":"미션:  delivery 조회를 위한 resolver 효율화","anchor":"#미션--delivery-조회를-위한-resolver-효율화"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/wireframe-generate/","title":"DDD 기반 UI 설계 및 자동 구현"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/ddl-to-eventstorming2/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/","title":"이벤트스토밍"}}]}},"context":{}}