{"hash":"6b2f5115e514f6a6b675c225c549059bf001aa0b","data":{"markdownPage":{"id":"5a7c9a2871abafa799a0b0592d2b9534","title":"Application Packaging with Container (Docker)","description":"","path":"/development/ops-docker/","timeToRead":4,"content":"<h1 id=\"application-packaging-with-container-docker\"><a href=\"#application-packaging-with-container-docker\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Application Packaging with Container (Docker)</h1>\n<h3 id=\"도커-이미지-무작정-따라해-보기\"><a href=\"#%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%AC%B4%EC%9E%91%EC%A0%95-%EB%94%B0%EB%9D%BC%ED%95%B4-%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>도커 이미지 무작정 따라해 보기</h3>\n<h4 id=\"이미지-기반-컨테이너-생성\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B8%B0%EB%B0%98-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이미지 기반 컨테이너 생성</h4>\n<pre class=\"language-text\"><code class=\"language-text\">docker image ls\ndocker image pull nginx:latest\ndocker run --name my-nginx -d -p 8080:80 nginx:latest\ndocker run --name my-new-nginx -d -p 8081:80 nginx:latest\n\ndocker container ls   # = docker ps</code></pre>\n<ul>\n<li>서비스 확인</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http GET http://localhost:8080\nhttp GET http://localhost:8081</code></pre>\n<h4 id=\"이미지-삭제하기\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이미지 삭제하기</h4>\n<pre class=\"language-text\"><code class=\"language-text\">docker image rm nginx:latest</code></pre>\n<ul>\n<li>삭제하려는 이미지를 사용하는 컨테이너 정리가 우선</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">docker container ls ; 실행중인 컨테이너 확인\ndocker container stop my-nginx  #docker stop &lt;containerid&gt;\ndocker container stop my-new-nginx\ndocker container rm my-nginx\ndocker container rm my-new-nginx\ndocker image rm nginx\ndocker images</code></pre>\n<ul>\n<li>한번에 삭제:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">docker stop $(docker ps -a -q) &amp;&amp; docker rm $(docker ps -a -q)</code></pre>\n<h3 id=\"이미지-만들기\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이미지 만들기</h3>\n<ul>\n<li>\n<p>어플리케이션 및 이미지 빌드 스크립트(Dockerfile) 생성</p>\n<ul>\n<li>Cloud IDE > New Folder > Docker 입력</li>\n<li>생성한 폴더 하위에 아래 2개 파일 생성</li>\n<li>Cloud IDE > New File > index.html 입력</li>\n<li>아래 내용을 복사하여 저장   </li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;html&gt;\n&lt;body&gt;\n&lt;center&gt;\n&lt;br/&gt;&lt;/br&gt;\n&lt;img src=&quot;https://raw.githubusercontent.com/acmexii/demo/master/materials/smile.jpg&quot;&gt;\n&lt;br/&gt;&lt;/br&gt;\n&lt;h1&gt; Hi~ My name is Hong Gil-Dong...~~~ &lt;/h1&gt;\n&lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<ul>\n<li>Cloud IDE > New File > Dockerfile (확장자 없음)</li>\n<li>아래 내용을 복사하여 저장 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">FROM nginx\nCOPY index.html /usr/share/nginx/html/</code></pre>\n<h4 id=\"이미지-빌드하기\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이미지 빌드하기</h4>\n<pre class=\"language-text\"><code class=\"language-text\">docker build -t My-Dockerhub-Id/welcome:v1 .\ndocker image ls</code></pre>\n<h4 id=\"이미지-remote-registryhubdockercom에-푸시하기\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-remote-registryhubdockercom%EC%97%90-%ED%91%B8%EC%8B%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이미지 Remote Registry(Hub.docker.com)에 푸시하기</h4>\n<ul>\n<li>도커허브 계정 생성</li>\n<li>\n<p><a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com</a> 접속</p>\n<ul>\n<li>가입(Sign-Up) 및 E-Mail verification 수행  </li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">docker push My-Dockerhub-Id/welcome:v1\n# 권한 오류 발생시,docker login 실행</code></pre>\n<h4 id=\"docker-hub에-생성된-이미지-확인\"><a href=\"#docker-hub%EC%97%90-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Hub에 생성된 이미지 확인</h4>\n<ul>\n<li><a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com</a> 접속</li>\n<li>repositories 메뉴 Reload 후 Push된 이미지 확인</li>\n</ul>\n<h4 id=\"docker-hub-이미지-기반-컨테이너-생성\"><a href=\"#docker-hub-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B8%B0%EB%B0%98-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Hub 이미지 기반 컨테이너 생성</h4>\n<pre class=\"language-text\"><code class=\"language-text\"># 먼저 로컬 이미지를 삭제하자.\ndocker image rm My-Dockerhub-Id/welcome:v1\ndocker run --name=welcome -d -p 8080:80 My-Dockerhub-Id/welcome:v1</code></pre>\n<ul>\n<li>서비스가 잘 기동 되었는지 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">$ http http://localhost:8080\n\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nConnection: keep-alive\nContent-Length: 23\nContent-Type: text/html\nDate: Wed, 12 May 2021 05:12:28 GMT\nETag: &quot;609b5cd7-17&quot;\nLast-Modified: Wed, 12 May 2021 04:43:03 GMT\nServer: nginx/1.19.10\n\n&lt;h1&gt; Hello world &lt;/h1&gt;</code></pre>\n<h3 id=\"자바-애플리케이션의-패키징\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%ED%8C%A8%ED%82%A4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 애플리케이션의 패키징</h3>\n<ul>\n<li>터미널을 열어서 order 와 delivery, gateway 폴더로 각각 이동하여 아래 명령어를 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd inventory\nmvn package -B -Dmaven.test.skip=true</code></pre>\n<ul>\n<li>target 폴더에 jar 파일이 생성이 되었는지 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">java -jar target/inventory-0.0.1-SNAPSHOT.jar</code></pre>\n<p>명령으로 실행이 가능한지 확인한다.</p>\n<ul>\n<li>ctrl+c 를 눌러서 jar 실행에서 빠져 나온다.</li>\n</ul>\n<ul>\n<li>order 와 delivery, gateway 의 최상위 root 에 Dockerfile 이 있는지 확인 한다.</li>\n<li>Dockerfile 파일이 있는 경로에서 아래 명령을 실행 한다.  </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"> docker login\n docker build -t [dockerhub ID]/inventory:[오늘날짜] .     \n docker images\n docker push [dockerhub ID]/inventory:[오늘날짜]  </code></pre>\n<ul>\n<li>\n<p>docker run 으로 실행해보기</p>\n<pre class=\"language-text\"><code class=\"language-text\">docker run  [dockerhub ID]/inventory:[오늘날짜]  </code></pre>\n</li>\n</ul>\n<h3 id=\"다음과정-미리보기\"><a href=\"#%EB%8B%A4%EC%9D%8C%EA%B3%BC%EC%A0%95-%EB%AF%B8%EB%A6%AC%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다음과정 미리보기</h3>\n<p>쿠버네티스 샌드박스: <a href=\"https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-interactive/\" target=\"_blank\" rel=\"noopener noreferrer\">https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-interactive/</a></p>\n<pre class=\"language-text\"><code class=\"language-text\">$ kubectl run myhomepage --image=jinyoung/welcome:v1\n\ndeployment.apps/myhomepage created\n\n\n$ kubectl expose deploy myhomepage --port=80 --type=LoadBalancer\n\nservice/myhomepage exposed\n\n\n$ kubectl get svc -w\nNAME         TYPE           CLUSTER-IP      EXTERNAL-IP                                                                   PORT(S)        AGE\nmyhomepage   LoadBalancer   10.100.98.191   addef84b932ff416186e2166ff397d74-589148294.ap-northeast-2.elb.amazonaws.com   80:30271/TCP   9s\n\n\n$ http addef84b932ff416186e2166ff397d74-589148294.ap-northeast-2.elb.amazonaws.com:80\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nConnection: keep-alive\nContent-Length: 23\nContent-Type: text/html\nDate: Wed, 12 May 2021 05:36:40 GMT\nETag: &quot;609b5cd7-17&quot;\nLast-Modified: Wed, 12 May 2021 04:43:03 GMT\nServer: nginx/1.19.10\n\n&lt;h1&gt; Hello world &lt;/h1&gt;\n\n\nkubectl get all\nNAME                              READY   STATUS    RESTARTS   AGE\npod/myhomepage-58dd9ffb74-kw5km   1/1     Running   0          17m\n\nNAME                 TYPE           CLUSTER-IP      EXTERNAL-IP                                                                   PORT(S)        AGE\nservice/myhomepage   LoadBalancer   10.100.98.191   addef84b932ff416186e2166ff397d74-589148294.ap-northeast-2.elb.amazonaws.com   80:30271/TCP   15m\n\nNAME                         READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/myhomepage   1/1     1            1           17m\n\nNAME                                    DESIRED   CURRENT   READY   AGE\nreplicaset.apps/myhomepage-58dd9ffb74   1         1         1       17m\n\n\n$ kubectl get rs -w\nNAME                    DESIRED   CURRENT   READY   AGE\nmyhomepage-58dd9ffb74   1         1         1       27m\n\n\n\n#### 새 터미널\n\n$ kubectl delete po --all\n\npod &quot;myhomepage-58dd9ffb74-wjf68&quot; deleted\n\n\n\n### 아까 터미널에서 rs 의 desired 와 current 가 유지됨 (pod 가 재생됨)을 확인:\n\nmyhomepage-58dd9ffb74   1         0         0       28m\nmyhomepage-58dd9ffb74   1         1         0       28m\nmyhomepage-58dd9ffb74   1         1         1       28m</code></pre>\n<h3 id=\"github-container-registry-사용하기\"><a href=\"#github-container-registry-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Github Container Registry 사용하기</h3>\n<h4 id=\"login\"><a href=\"#login\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Login</h4>\n<pre class=\"language-text\"><code class=\"language-text\">docker login ghcr.io -u &lt;github계정명&gt; -p &lt;Personal Access Token&gt;</code></pre>\n<ul>\n<li>github 계정명은 이메일주소가 아닌 github 자체 계정 문자열입니다. </li>\n<li>Personal Access Token을 얻으려면, Account > Settings > Developer Settings > Personal Access Token 에서 Generate New Token 한후, 권한으로 \"write package\" 를 부여하신 후 생성된 토큰을 얻으면 됩니다.</li>\n</ul>\n<h4 id=\"build--push예시\"><a href=\"#build--push%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Build / Push예시</h4>\n<pre class=\"language-text\"><code class=\"language-text\">docker build -t ghcr.io/jinyoung/welcome:v2021101202 .\n\ndocker push ghcr.io/jinyoung/homepage:v2021101202</code></pre>\n<ul>\n<li>build 시 이미지명은 앞에 꼭 ghcr.io/를 추가</li>\n<li>push 시에는 항상 동일한 이미지명 준수</li>\n</ul>\n<h4 id=\"이미지-확인-및-접근권한설정\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%ED%99%95%EC%9D%B8-%EB%B0%8F-%EC%A0%91%EA%B7%BC%EA%B6%8C%ED%95%9C%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이미지 확인 및 접근권한설정</h4>\n<p>Account > Your Repositories > Packages 에서 확인가능</p>\n<p>권한을 설정하기 위해서는 Setting package 를 클릭한 후, Set Visibility 를 클릭하고 팝업에서 Public 설정 후, 이름을 확인해주고 설정완료.</p>\n<h4 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h4>\n<div style=\"position: relative; padding-bottom: 56.25%; padding-top: 0px; height: 0; overflow: hidden;\">\n\t<iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" \n        src=\"https://www.youtube.com/embed/RO3Mw8Gks9Q\" \n        frameborder=\"0\" crolling=\"no\" frameborder=\"none\" allowfullscreen=\"\">\n    </iframe>\n</div>\n<br>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Application Packaging with Container (Docker)","anchor":"#application-packaging-with-container-docker"},{"depth":3,"value":"도커 이미지 무작정 따라해 보기","anchor":"#도커-이미지-무작정-따라해-보기"},{"depth":4,"value":"이미지 기반 컨테이너 생성","anchor":"#이미지-기반-컨테이너-생성"},{"depth":4,"value":"이미지 삭제하기","anchor":"#이미지-삭제하기"},{"depth":3,"value":"이미지 만들기","anchor":"#이미지-만들기"},{"depth":4,"value":"이미지 빌드하기","anchor":"#이미지-빌드하기"},{"depth":4,"value":"이미지 Remote Registry(Hub.docker.com)에 푸시하기","anchor":"#이미지-remote-registryhubdockercom에-푸시하기"},{"depth":4,"value":"Docker Hub에 생성된 이미지 확인","anchor":"#docker-hub에-생성된-이미지-확인"},{"depth":4,"value":"Docker Hub 이미지 기반 컨테이너 생성","anchor":"#docker-hub-이미지-기반-컨테이너-생성"},{"depth":3,"value":"자바 애플리케이션의 패키징","anchor":"#자바-애플리케이션의-패키징"},{"depth":3,"value":"다음과정 미리보기","anchor":"#다음과정-미리보기"},{"depth":3,"value":"Github Container Registry 사용하기","anchor":"#github-container-registry-사용하기"},{"depth":4,"value":"Login","anchor":"#login"},{"depth":4,"value":"Build / Push예시","anchor":"#build--push예시"},{"depth":4,"value":"이미지 확인 및 접근권한설정","anchor":"#이미지-확인-및-접근권한설정"},{"depth":4,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/ddl-to-eventstorming2/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}