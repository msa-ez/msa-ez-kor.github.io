{"hash":"dbe4667f391ffaebd2e2f88ca0e25610f527c243","data":{"markdownPage":{"id":"4cf4209d2325d07d12f0b8752dd5411b","title":"JWT Token 기반 인증 인가","description":"","path":"/development/oauth2with-keycloak/","timeToRead":4,"content":"<h1 id=\"jwt-token-기반-인증-인가\"><a href=\"#jwt-token-%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D-%EC%9D%B8%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT Token 기반 인증 인가</h1>\n<div style=\"position: relative; padding-bottom: 56.25%; padding-top: 0px; height: 0; overflow: hidden;\">\n\t<iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" \n        src=\"https://www.youtube.com/embed/byxWzQIAQTE\" \n        frameborder=\"0\" crolling=\"no\" frameborder=\"none\" allowfullscreen=\"\">\n    </iframe>\n</div>\n<br>\n<p>마이크로서비스와 OAuth2 구성요소인 Authorization Server/ Client/ Resource Server를 활용해 Single Sign-On 구현 모형을 실습합니다. </p>\n<p>단일 접점인 Gateway가 Client가 되고, 각 마이크로서비스가 Resource Server에 해당됩니다. 그리고 Authorization Server로는 Keycloak을 활용합니다. </p>\n<p>본 랩에서는 Gateway가 Client와 Resource Server역할을 가집니다.</p>\n<h2 id=\"jwt기반-인증-w-keycloak\"><a href=\"#jwt%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D-w-keycloak\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT기반 인증 w/ Keycloak</h2>\n<ul>\n<li>OAuth2.0 기반의 Spring Security와 Resource Owner, Client, Authorization Server, Resource Server간의 인증/인가를 실습합니다.</li>\n<li>JWT기반 Access_Token을 활용합니다.</li>\n<li>인증/인가 서버로 <strong><a href=\"https://www.keycloak.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Keycloak</a></strong> 서버를 활용합니다.</li>\n</ul>\n<h2 id=\"이벤트스토밍-모델-준비\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%8A%A4%ED%86%A0%EB%B0%8D-%EB%AA%A8%EB%8D%B8-%EC%A4%80%EB%B9%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트스토밍 모델 준비</h2>\n<ul>\n<li>아래 모델을 새 탭에서 로딩합니다.\n<a href=\"https://www.msaez.io/#/storming/labshopoauthkeycloak-0821\" target=\"_blank\" rel=\"noopener noreferrer\">모델 링크</a></li>\n<li>브라우져에 모델이 로딩되지 않으면, 우측 상단의 (사람모양) 아바타 아이콘을 클릭하여 <strong>깃헙(Github)</strong> 계정으로 로그인 후 리로드하면 아래처럼 랩에 필요한 이벤트스토밍 기본 모델이 출력됩니다. </li>\n<li>로딩된 모델은 우측 팔레트 영역에 스티커 목록이 나타나지 않습니다. 상단 메뉴영역에서 포크 아이콘(FORK)을 클릭해 주어진 모델을 복제합니다.</li>\n</ul>\n<p><img src=\"https://github.com/acmexii/demo/assets/35618409/08eb03f8-c7e3-42e8-a13c-4d473de56f1a\" alt=\"image\"></p>\n<ul>\n<li>우측 팔레트 영역에 스티커 목록들이 나타나는 것이 확인됩니다.</li>\n</ul>\n<h3 id=\"keycloak-토핑설정-및-코드-push\"><a href=\"#keycloak-%ED%86%A0%ED%95%91%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%BD%94%EB%93%9C-push\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak 토핑설정 및 코드 Push</h3>\n<ul>\n<li>우측 상단의 <strong>CODE</strong> 버튼을 눌러 <strong>TOPPINGS</strong>를 클릭합니다.</li>\n<li><strong>Oauth by Keycloak</strong>이 체크되어 있어야 합니다.</li>\n<li>\n<p>상단의 <strong>Push to Git</strong> 메뉴를 클릭해 나타나는 다이얼로그 박스에서 <strong>Create New Repository</strong>를 선택하고, <strong>CREATE</strong>를 누릅니다.</p>\n<blockquote>\n<p>초기 Github 계정으로 로그인 하였으므로, 나의 Git 정보가 자동으로 표시됩니다.</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://github.com/acmexii/demo/assets/35618409/557f256e-9949-4546-bcde-d3d405f448df\" alt=\"image\"></p>\n<ul>\n<li>모델 기반 코드가 내 Github에 Push됩니다.</li>\n</ul>\n<p><img src=\"https://github.com/acmexii/demo/assets/35618409/6581f400-adb8-4963-bf03-511d459c5e32\" alt=\"image\"></p>\n<ul>\n<li>좌측 메뉴 <strong>IDE</strong>를 누른 다음, Cloud IDE 목록에서 <strong>Open GitPod</strong>를 클릭합니다.</li>\n</ul>\n<h3 id=\"keycloak-server-실행\"><a href=\"#keycloak-server-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak Server 실행</h3>\n<ul>\n<li>Cloud IDE 터미널에서 keycloak 폴더로 이동하여 컨테이너를 생성하고 및 Keycloak 서버를 실행합니다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> keycloak\n<span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></code></pre>\n<ul>\n<li>Keycloak이 사용하는 9090 포트가 목록에 나타납니다.</li>\n</ul>\n<h4 id=\"keycloak-서버-오픈-및-접속하기\"><a href=\"#keycloak-%EC%84%9C%EB%B2%84-%EC%98%A4%ED%94%88-%EB%B0%8F-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak 서버 오픈 및 접속하기</h4>\n<ul>\n<li>오른쪽 하단의 포트 목록을 눌러 keycloak이 사용하는 9090 포트를 Public으로 오픈합니다. (두번째 자물쇠)</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/215235038-8e362605-75b5-4271-923d-d2c0cd3fffbf.png\" alt=\"image\"></p>\n<ul>\n<li>첫 번째 아이콘을 클릭하여, KeyCloak의 풀 URL을 클립보드에 복사합니다.</li>\n<li>Keycloak 마지막 브라우저 아이콘을 눌러, 웹 브라우저에서 접속합니다.</li>\n<li>Administration Console을 클릭해 설정된 관리자 정보(admin / admin)로 로그인합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/190956899-9c7efca3-04ac-4f11-851c-1e199debaa02.png\" alt=\"image\"></p>\n<ul>\n<li>Keycloak 메인 화면이 아래와 같이 출력됩니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/190957013-3a6669d9-0928-498b-9529-cbac6fad8cd5.png\" alt=\"image\"></p>\n<h2 id=\"oauth-client-설정\"><a href=\"#oauth-client-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth Client 설정</h2>\n<h3 id=\"keycloak-설정\"><a href=\"#keycloak-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak 설정</h3>\n<ul>\n<li>Master Realm에서 <strong>Tokens</strong> 탭을 눌러 Access Token Lifespan을 1시간으로 수정합니다.</li>\n<li>수정 후, 하단의 <strong>Save</strong> 를 눌러 저장합니다.</li>\n</ul>\n<h3 id=\"oauth-client-설정-1\"><a href=\"#oauth-client-%EC%84%A4%EC%A0%95-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth Client 설정</h3>\n<ul>\n<li>Keycloak 서버의 왼쪽메뉴에서 Clients를 눌러 12stmall 을 추가합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/190959198-145da6e6-f82d-412c-843c-9f5caf47c09e.png\" alt=\"image\"></p>\n<ul>\n<li>등록된 Client 설정에서 Access Type을 confidential로 설정합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/190959505-5adf84bf-cda5-4cd9-ba90-e8c7d806a8dc.png\" alt=\"image\"></p>\n<ul>\n<li>아래에 있는 Valid Redirect URIs 설정에 다음과 같이 입력합니다.</li>\n<li>규칙 : Gateway Endpoint URL + /login/oauth2/code/ + ClientId(12stmall)</li>\n<li>오른쪽 하단의 포트목록을 눌러 keycloak이 사용하는 9090 포트의 첫번째 URL 복사 아이콘을 클릭합니다.</li>\n<li>GitPod에서는 이처럼 포트로 시작하는 도메인 정보로 노출됩니다. 이 9090을 게이트웨이 포트인 8088로 변경합니다.  </li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/191009706-1033fa72-194b-4806-b9e7-33cffcffcf42.png\" alt=\"image\"></p>\n<ul>\n<li>Valid Redirect URIs 정보는 이후 Gateway에도 추가합니다.</li>\n<li>저장 후, Credentials 탭을 확인하면 Secret(비밀번호)이 확인되는데 이는 이후 Gateway에도 추가합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/190960454-9348d122-30d3-49b0-b63d-6389107a305e.png\" alt=\"image\"></p>\n<h3 id=\"gateway-client-설정\"><a href=\"#gateway-client-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gateway Client 설정</h3>\n<ul>\n<li>Keycloak Client설정에 필요한 아래 템플릿 환경정보를 설정합니다.</li>\n<li>Gateway > applicaion.yml 8라인에 KeyCloak SSO 서버의 엔드포인트를 설정합니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">keycloak-client:\n  server-url: https://9090-acmexii-labshopoauthkey-sgn5ady40al.ws-us94.gitpod.io\n  realm: master</code></pre>\n<blockquote>\n<p>server-url 값의 맨뒤에 / 가 없도록 주의합니다.</p>\n</blockquote>\n<ul>\n<li>Spring OAuth2 Security 설정을 마무리합니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">  security:\n    oauth2:\n      client:\n        provider:\n          keycloak:\n            issuer-uri: ${keycloak-client.server-url}/realms/${keycloak-client.realm}\n            user-name-attribute: preferred_username\n        registration:\n          keycloak:\n            client-id: **&lt;client-id&gt;**\n            client-secret: \n            redirect-uri: **gateway-path/login/oauth2/code/client-name**\n            authorization-grant-type: authorization_code\n            scope: openid\n      resourceserver:\n        jwt:\n          jwk-set-uri: ${keycloak-client.server-url}/realms/${keycloak-client.realm}/protocol/openid-connect/certs</code></pre>\n<blockquote>\n<p>51라인에 OAuth Client value인 12stmall 입력</p>\n<p>52라인에 KeyCloakd에 생성된 client-secret 입력</p>\n<p>53라인에 KeyCloakd에 설정한 redirect-uri 입력 </p>\n</blockquote>\n<h3 id=\"test-user-생성\"><a href=\"#test-user-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test User 생성</h3>\n<ul>\n<li>Keycloak 서버의 왼쪽 메뉴에서 Manage > Users를 눌러 사용자를 등록합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/190961205-3c69d45e-2705-4ba2-af18-edbff2f57bf4.png\" alt=\"image\"></p>\n<ul>\n<li>user@naver.com 으로 저장합니다.</li>\n<li>등록한 사용자의 Credentials 탭에서 비밀번호를 설정하고, Temporary를 OFF로 한 다음 설정합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/190961449-1acc3c93-f448-42be-8b6e-dd6f4c99ac20.png\" alt=\"image\"></p>\n<ul>\n<li>동일한 방식으로 admin@naver.com도 생성해둡니다.</li>\n</ul>\n<h3 id=\"keycloak-sso-test\"><a href=\"#keycloak-sso-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak SSO Test</h3>\n<ul>\n<li>Gateway와 마이크로서비스를 재시작합니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd gateway\nmvn clean spring-boot:run</code></pre>\n<ul>\n<li>실행된 Gateway 서비스도 외부에서 접속이 가능하도록 GitPod에서 8088 Port를 오픈합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/190962087-a82b9e08-0cde-4d28-8e10-05cd89c938ea.png\" alt=\"image\"></p>\n<ul>\n<li>마이크로서비스를 시작합니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nmvn clean spring-boot:run</code></pre>\n<ul>\n<li>다음의 오류 발생시, 새 터미널에서 kafka를 시작합니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">Broker may not be available.\n2022-09-19 06:43:53.548  WARN [monolith,,,] 5204 --- [| adminclient-2] org.apache.kafka.clients.NetworkClient   : [AdminClient clientId=adminclient-2] Connection to node -1 (localhost/127.0.0.1:9092) could not be established. Broker may not be available.</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose up -d</code></pre>\n<h2 id=\"token-based-authentication-테스트\"><a href=\"#token-based-authentication-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Token based Authentication 테스트</h2>\n<ul>\n<li>크롬의 Secret 창 또는 다른 브라우저(Edge, 네이버웨일)에서 Gateway를 경유하는 Order서비스에 접속해 봅니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/orders\n(Gateway URL need to be modified)</code></pre>\n<ul>\n<li>\n<p>비인가된 Resource 접근으로 Keycloak SSO 로그인 창이 나타납니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/190966067-a39781e6-87bc-47e6-9688-eea7f7f7cd86.png\" alt=\"image\"></p>\n</li>\n<li>관리콘솔에서 등록한 사용자(user@naver.com / 1)로 인증합니다.</li>\n<li>인증 성공 후, 주문서비스의 응답이 정상적으로 출력됩니다.</li>\n</ul>\n<h2 id=\"token-based-authorization-테스트\"><a href=\"#token-based-authorization-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Token based Authorization 테스트</h2>\n<ul>\n<li>특정 API를 권한을 가진 사용자만 접근할 수 있도록 권한(CUSTOMER, ADMIN)을 생성합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/236124984-ce3f8568-bded-4bf8-b6cd-27baa11f0452.png\" alt=\"image\"></p>\n<ul>\n<li>생성된 사용자에 각각 Role을 매핑합니다.</li>\n<li>User > admin@naver.com를 선택하고, Role Mappings를 클릭합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/236125504-a42fb63f-8c95-450c-b275-036e815a0630.png\" alt=\"image\"></p>\n<ul>\n<li>Realm Roles에 있는 ADMIN 권한을 Assign 합니다.</li>\n<li>마찬가지 방법으로 user@naver.com 사용자에게 CUSTOMER 권한을 Assign 합니다.</li>\n</ul>\n<h3 id=\"order-resouces-권한-확인\"><a href=\"#order-resouces-%EA%B6%8C%ED%95%9C-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order Resouces 권한 확인</h3>\n<ul>\n<li>브라우저에서 주문 리소스에 user@naver.com 사용자로 접속해 봅니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/orders/placeOrder</code></pre>\n<ul>\n<li>이어서, 주문관리 리소스에 접속해 봅니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/orders/manageOrder</code></pre>\n<p>user@naver.com의 권한으로는 접근이 불가능하여 정제되지 않은 403 오류가 리턴됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/236128025-33798965-23ae-4922-87a0-32435b0a2597.png\" alt=\"image\"></p>\n<h3 id=\"사용자-jwt-token-확인\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-jwt-token-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>사용자 JWT Token 확인</h3>\n<ul>\n<li>다음 URL로 접속하여 사용자 토큰 정보를 확인하고 전체 토큰값을 복사합니다. (아래 URL에서 내 Gateway 정보로 수정합니다.)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/test/token</code></pre>\n<ul>\n<li><a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://jwt.io/</a> 에 접속후 나타나는 Encoded Token에 복사한 토큰을 붙여넣습니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/236128936-454e2550-8c74-4dd2-b31f-39014ab856da.png\" alt=\"image\"></p>\n<ul>\n<li>Decoded Token의 Payload에서 User Claim의 Role확인이 가능하다.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"JWT Token 기반 인증 인가","anchor":"#jwt-token-기반-인증-인가"},{"depth":2,"value":"JWT기반 인증 w/ Keycloak","anchor":"#jwt기반-인증-w-keycloak"},{"depth":2,"value":"이벤트스토밍 모델 준비","anchor":"#이벤트스토밍-모델-준비"},{"depth":3,"value":"Keycloak 토핑설정 및 코드 Push","anchor":"#keycloak-토핑설정-및-코드-push"},{"depth":3,"value":"Keycloak Server 실행","anchor":"#keycloak-server-실행"},{"depth":4,"value":"Keycloak 서버 오픈 및 접속하기","anchor":"#keycloak-서버-오픈-및-접속하기"},{"depth":2,"value":"OAuth Client 설정","anchor":"#oauth-client-설정"},{"depth":3,"value":"Keycloak 설정","anchor":"#keycloak-설정"},{"depth":3,"value":"OAuth Client 설정","anchor":"#oauth-client-설정-1"},{"depth":3,"value":"Gateway Client 설정","anchor":"#gateway-client-설정"},{"depth":3,"value":"Test User 생성","anchor":"#test-user-생성"},{"depth":3,"value":"Keycloak SSO Test","anchor":"#keycloak-sso-test"},{"depth":2,"value":"Token based Authentication 테스트","anchor":"#token-based-authentication-테스트"},{"depth":2,"value":"Token based Authorization 테스트","anchor":"#token-based-authorization-테스트"},{"depth":3,"value":"Order Resouces 권한 확인","anchor":"#order-resouces-권한-확인"},{"depth":3,"value":"사용자 JWT Token 확인","anchor":"#사용자-jwt-token-확인"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/tool/plsql-2-java/","title":"PL/SQL to Java 자동 테스팅"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}