{"hash":"58b67e3f92abd124c90f67e74605f7491bfa0e3e","data":{"markdownPage":{"id":"619eb74e8e698ab73e1563bb4a597398","title":"Kafka Retry & Dead Letter Queue ","description":"","path":"/development/kafka-retry-dlq/","timeToRead":2,"content":"<h1 id=\"kafka-retry--dead-letter-queue\"><a href=\"#kafka-retry--dead-letter-queue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Retry &#x26; Dead Letter Queue</h1>\n<h3 id=\"retry--dlq\"><a href=\"#retry--dlq\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Retry &#x26; DLQ</h3>\n<h4 id=\"kafka-retry\"><a href=\"#kafka-retry\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Retry</h4>\n<ul>\n<li>Consumer가 message를 처리하던 중 오류가 발생하면 해당 Message를 다시 Polling하여 처리해야 한다. </li>\n<li>이를 Retry라고 하며, 간단하게 Kafka 설정으로 동작할 수 있다. </li>\n<li>Inventory 마이크로서비스 application.yml 의 cloud.stream.bindings.event-in 하위의 설정을 주석해제하고 저장한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">bindings:\n  event-in:\n    group: product\n    destination: kafkatest\n    contentType: application/json\n    consumer:\n      max-attempts: <span class=\"token number\">3</span>\n      back-off-initial-interval: <span class=\"token number\">1000</span>\n      back-off-max-interval: <span class=\"token number\">1000</span>\n      back-off-multiplier: <span class=\"token number\">1.0</span>\n      defaultRetryable: <span class=\"token boolean\">false</span>  </code></pre>\n<ul>\n<li>3번의 retry를 수행하는데 Retry시 백오프 초기간격이 1초, 이후 최대 1초 간격으로 retry를 실행한다. </li>\n<li>Inventory 서비스의 PolicyHandler.java에서 아래 오류 발생 코드를 주입한다: </li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaProcessor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wheneverOrderPlaced_DecreaseStock</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">OrderPlaced</span> orderPlaced<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\t\t\t\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//always fail</span>\n\n    <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Order와 Product 마이크로서비스를 기동한다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> order\nmvn spring-boot:run</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> inventory\nmvn spring-boot:run</code></pre>\n<ul>\n<li>재고를 등록한다</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories id=1 stock=1000</code></pre>\n<ul>\n<li>Order 서비스에 포스팅하여 Kafka Event를 발행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders productId=1 qty=3</code></pre>\n<ul>\n<li>Inventory에서 Message를 subscribe하여 내용을 출력한다. </li>\n<li>throw new RuntimeException에 의해 Kafka retry가 수행되는지 Console의 log로 확인한다.</li>\n<li>허나, </li>\n<li>해당 메시지는 처리될 수 없으므로 파티션 Lag가 항상 잔존하게 된다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">./kafka-consumer-groups --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--group</span> inventory <span class=\"token parameter variable\">--describe</span></code></pre>\n<ul>\n<li>이는 별도의 Topic에 저장한 후 백오피스에서 처리해야 할 대상인 것이다. </li>\n</ul>\n<h4 id=\"kafka-dead-letter-queuedlq\"><a href=\"#kafka-dead-letter-queuedlq\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Dead Letter Queue(DLQ)</h4>\n<ul>\n<li>Kafka에서 retry를 통해서도 처리하지 못하는 message를 Posion pill이라고 한다.</li>\n<li>Kafka에서 Posion pill은 별도의 메시지 저장소인 DLQ로 보내지게 된다. </li>\n<li>DLQ는 또 하나의 topic이며 Consumer에서 정상적으로 처리되지 못한 message들이 쌓여있다. </li>\n<li>DLQ를 설정하기 위해서 아래와 같이 Inventory의 application.yml를 변경한다. </li>\n<li>cloud.stream.kafka 아래에 있는 아래 설정을 주석해제 한다. </li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">bindings</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">event-in</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">consumer</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">enableDlq</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n      <span class=\"token key atrule\">dlqName</span><span class=\"token punctuation\">:</span> dlq<span class=\"token punctuation\">-</span>kafkatest\n      <span class=\"token key atrule\">dlqPartitions</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code></pre>\n<ul>\n<li>저장 후 Inventory 마이크로서비스를 재기동한다.</li>\n</ul>\n<blockquote>\n<p>서비스가 기동되면서 Retry를 반복하게 되고, 그래도 처리하지 못한 메시지를 DLQ로 보내는 것이 Console에 확인된다.\nSent to DLQ  a message with key='null' and payload='{123, 34, 101, 118, 101, 110, 116, 84, 121, 112, 1...' received from 0</p>\n</blockquote>\n<ul>\n<li>설정에서 지정한 DLQ 토픽이 생성되었는지 확인한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> kafka\n<span class=\"token function\">docker-compose</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka /bin/bash\n<span class=\"token builtin class-name\">cd</span> /bin\n./kafka-topics --bootstrap-server http://localhost:9092  <span class=\"token parameter variable\">--list</span></code></pre>\n<h4 id=\"kafka-dlq-test\"><a href=\"#kafka-dlq-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka DLQ Test</h4>\n<ul>\n<li>Order 서비스에 포스팅하여 Kafka Event를 추가 발행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST :8081/orders productId=1 qty=1</code></pre>\n<ul>\n<li>Product에서 retry 3번 시도 후, 자동으로 DLQ로 보낸다. </li>\n<li>아래 명령어를 통해 DLQ에 해당 message가 쌓였는지 확인한다. </li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">./kafka-console-consumer --bootstrap-server http://localhost:9092 <span class=\"token parameter variable\">--topic</span> dlq-kafkatest --from-beginning</code></pre>\n<ul>\n<li>커밋모드가 자동일때 Dlq에 처리되지 않은 메세지를 보낸 후, 자동으로 Offset을 증가시켜 Lag가 쌓이지 않게 된다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">./kafka-consumer-groups --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--group</span> inventory <span class=\"token parameter variable\">--describe</span></code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Kafka Retry & Dead Letter Queue","anchor":"#kafka-retry--dead-letter-queue"},{"depth":3,"value":"Retry & DLQ","anchor":"#retry--dlq"},{"depth":4,"value":"Kafka Retry","anchor":"#kafka-retry"},{"depth":4,"value":"Kafka Dead Letter Queue(DLQ)","anchor":"#kafka-dead-letter-queuedlq"},{"depth":4,"value":"Kafka DLQ Test","anchor":"#kafka-dlq-test"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}