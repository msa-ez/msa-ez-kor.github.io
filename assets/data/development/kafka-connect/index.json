{"hash":"dab75dae6b4e6632bb15138b603988f0d7678a61","data":{"markdownPage":{"id":"59a15b326dd00387c07c16407776b927","title":"CDC(Change Data Capture) with Kafka","description":"","path":"/development/kafka-connect/","timeToRead":4,"content":"<h1 id=\"cdcchange-data-capture-with-kafka\"><a href=\"#cdcchange-data-capture-with-kafka\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDC(Change Data Capture) with Kafka</h1>\n<h3 id=\"kafka-connect에-의한-데이터-동기화\"><a href=\"#kafka-connect%EC%97%90-%EC%9D%98%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%8F%99%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Connect에 의한 데이터 동기화</h3>\n<ul>\n<li>Kafka Connect를 이용한 CDC(Change Data Capture)를 통해 주문팀에서 생성된 데이터가 추천상품을 위해, 패턴 분석이 필요한 마케팅팀에 동기화 되는지를 실습한다. </li>\n<li>Connect는 Connector를 실행시켜주는 서버로 DB동기화시, 벤더사가 만든 Connector, 또는 OSS(Debezium, Confluent) 계열의 Connector를 사용한다. </li>\n<li>Lab에서는 MySQL DB를 설치하여 CDC 테스트를 적용한다. MySQL DB는 시작과 동시에 실행된다. (3306 Open)</li>\n</ul>\n<h3 id=\"kafka-서버-실행\"><a href=\"#kafka-%EC%84%9C%EB%B2%84-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 서버 실행</h3>\n<h4 id=\"connector-다운로드\"><a href=\"#connector-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Connector 다운로드</h4>\n<ul>\n<li>Kafka Connect를 위한 JDBC 드라이브를 다운로드한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">git</span> clone https://github.com/acmexii/kafka-connect.git\n<span class=\"token builtin class-name\">cd</span> kafka-connect</code></pre>\n<h4 id=\"kafka-수동-실행\"><a href=\"#kafka-%EC%88%98%EB%8F%99-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 수동 실행</h4>\n<p>kafka를 수동설치 후, zookeeper를 실행한다.</p>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">curl</span> <span class=\"token string\">\"https://archive.apache.org/dist/kafka/2.7.1/kafka_2.13-2.7.1.tgz\"</span> <span class=\"token parameter variable\">-o</span> ./kafka-2.7.1.tgz\n<span class=\"token function\">tar</span> xvfz kafka-2.7.1.tgz</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka_2.13-2.7.1/\nbin/zookeeper-server-start.sh config/zookeeper.properties &amp;</code></pre>\n<ul>\n<li>2181 포트로 zookeeper가 실행된다.</li>\n<li>새로운 터미널에서 kafka 데몬을 실행한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> kafka-connect\n<span class=\"token builtin class-name\">cd</span> kafka_2.13-2.7.1/\nbin/kafka-server-start.sh config/server.properties <span class=\"token operator\">&amp;</span></code></pre>\n<h3 id=\"kafka-connect-서버-실행\"><a href=\"#kafka-connect-%EC%84%9C%EB%B2%84-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Connect 서버 실행</h3>\n<h4 id=\"jdbc-connector-설치\"><a href=\"#jdbc-connector-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JDBC Connector 설치</h4>\n<ul>\n<li>Connect 서버 실행전, 동기화 대상 데이터베이스의 JDBC 드라이버를 설치한다.</li>\n<li>Connector를 설치할 폴더를 생성한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> kafka-connect/kafka_2.13-2.7.1/\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">kafka_home</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PWD</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"export kafka_home=/workspace/kafka-cdc/kafka-connect/kafka_2.13-2.7.1/\"</span> <span class=\"token operator\">>></span> ~/.bashrc\n<span class=\"token function\">mkdir</span> connectors\n<span class=\"token builtin class-name\">cd</span> connectors</code></pre>\n<ul>\n<li>다운받은 confluentinc-kafka-connect-jdbc-10.2.5.zip을 복사 후 unzip 한다. </li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">cp</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/confluentinc-kafka-connect-jdbc-10.2.5.zip ./\n<span class=\"token function\">unzip</span> confluentinc-kafka-connect-jdbc-10.2.5.zip</code></pre>\n<ul>\n<li>$kafka_home/config 폴더로 이동 후 connect-distributed.properties에 unzip한 폴더를 등록해 준다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$kafka_home</span>/config \n<span class=\"token function\">vi</span> connect-distributed.properties</code></pre>\n<ul>\n<li>마지막 행으로 이동하여 주석을 제거한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">plugin.path=/workspace/kafka-cdc/kafka-connect/kafka_2.13-2.7.1/connectors</code></pre>\n<ul>\n<li>위와 같이 편집하고 저장종료한다. </li>\n</ul>\n<h4 id=\"kafka-connect-서버-실행-1\"><a href=\"#kafka-connect-%EC%84%9C%EB%B2%84-%EC%8B%A4%ED%96%89-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Connect 서버 실행</h4>\n<ul>\n<li>Connect CDC Server를 실행한다. </li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$kafka_home</span>\nbin/connect-distributed.sh config/connect-distributed.properties </code></pre>\n<ul>\n<li>Kafka Connect는 default 8083 포트로 실행이 된다. </li>\n</ul>\n<ul>\n<li>Connect 서버 실행 후, Kafka Server의 Topic을 확인해 본다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token variable\">$kafka_home</span>/bin/kafka-topics.sh --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--list</span></code></pre>\n<ul>\n<li>\n<p>Connect를 위한 토픽이 추가되었다.</p>\n<blockquote>\n<p>connect-configs, connect-offsets, connect-status</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"connector-설치\"><a href=\"#connector-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Connector 설치</h3>\n<h4 id=\"source-connector-설치\"><a href=\"#source-connector-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Source Connector 설치</h4>\n<ul>\n<li>Kafka connect의 REST API를 통해 Source 및 Sink connector를 등록한다. </li>\n</ul>\n<pre class=\"language-curl\"><code class=\"language-curl\">curl -i -X POST -H \"Accept:application/json\" \\\n    -H  \"Content-Type:application/json\" http://localhost:8083/connectors/ \\\n    -d '{\n    \"name\": \"mysql-source-connector\",\n    \"config\": {\n        \"connector.class\": \"io.confluent.connect.jdbc.JdbcSourceConnector\",\n        \"connection.url\": \"jdbc:mysql://localhost:3306/my-database?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=UTF-8\",\n        \"connection.user\":\"root\",\n        \"connection.password\":\"1234\",\n        \"mode\":\"incrementing\",\n        \"useSSL\":\"false\",\n        \"incrementing.column.name\" : \"id\",\n        \"table.whitelist\" : \"ORDER_TABLE\",\n        \"topic.prefix\" : \"SYNC_\",\n        \"tasks.max\" : \"1\"\n    }\n}'</code></pre>\n<blockquote>\n<p>Connector 등록시, 'No suitable driver' 오류가 발생할 경우, Classpath에 mysql driver를 설정해 준다.</p>\n</blockquote>\n<ul>\n<li>등록한 Connector를 확인한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http localhost:8083/connectors</code></pre>\n<h4 id=\"order-마이크로서비스-설정\"><a href=\"#order-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 마이크로서비스 설정</h4>\n<ul>\n<li>주문 서비스가 로컬에 실행된 MySQL DB를 사용한다.</li>\n<li>Order의 application.yml을 열어 default profile의 datasource를 확인한다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//$<span class=\"token punctuation\">{</span>_DATASOURCE_ADDRESS<span class=\"token punctuation\">:</span>localhost<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span><span class=\"token punctuation\">}</span>/$<span class=\"token punctuation\">{</span>_DATASOURCE_TABLESPACE<span class=\"token punctuation\">:</span>my<span class=\"token punctuation\">-</span>database<span class=\"token punctuation\">}</span><span class=\"token punctuation\">?</span>serverTimezone=UTC<span class=\"token important\">&amp;characterEncoding=UTF-</span><span class=\"token number\">8</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>_DATASOURCE_USERNAME<span class=\"token punctuation\">:</span>root<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>_DATASOURCE_PASSWORD<span class=\"token punctuation\">:</span><span class=\"token number\">1234</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">driverClassName</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver </code></pre>\n<h4 id=\"소스-테이블에-data-입력\"><a href=\"#%EC%86%8C%EC%8A%A4-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90-data-%EC%9E%85%EB%A0%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>소스 테이블에 Data 입력</h4>\n<ul>\n<li>order 마이크로서비스를 기동하고 소스 테이블에 샘플데이터를 생성(주문발행)한다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> order\nmvn spring-boot:run</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">http POST :8081/orders productId=1 qty=10 customerId=1000 price=10000\nhttp POST :8081/orders productId=2 qty=20 customerId=2000 price=20000</code></pre>\n<ul>\n<li>Kafka topic을 확인해 본다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token variable\">$kafka_home</span>/bin/kafka-topics.sh --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--list</span></code></pre>\n<ul>\n<li>\n<p>'SYNC_ORDER_TABLE' 토픽이 추가되어 목록에 나타난다.</p>\n<blockquote>\n<p>Kafka Connect는 테이블 단위로 토픽이 생성되어 Provider와 Consumer간 데이터를 Sync합니다. </p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">$kafka_home/bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic SYNC_ORDER_TABLE --from-beginning</code></pre>\n<h4 id=\"sink-connector-설치\"><a href=\"#sink-connector-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sink Connector 설치</h4>\n<pre class=\"language-curl\"><code class=\"language-curl\">curl -i -X POST -H \"Accept:application/json\" \\\n    -H  \"Content-Type:application/json\" http://localhost:8083/connectors/ \\\n    -d '{\n    \"name\": \"mysql-sink-connector\",\n    \"config\": {\n        \"connector.class\": \"io.confluent.connect.jdbc.JdbcSinkConnector\",\n        \"connection.url\": \"jdbc:mysql://localhost:3306/my-database?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=UTF-8\",\n        \"connection.user\":\"root\",\n        \"connection.password\":\"1234\",\n        \"useSSL\":\"false\",        \n        \"auto.create\":\"true\",       \n        \"auto.evolve\":\"true\",       \n        \"delete.enabled\":\"false\",\n        \"tasks.max\":\"1\",\n        \"topics\":\"SYNC_ORDER_TABLE\"\n    }\n}'</code></pre>\n<h4 id=\"mysql-client로-복제된-테이블-확인하기\"><a href=\"#mysql-client%EB%A1%9C-%EB%B3%B5%EC%A0%9C%EB%90%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>mysql client로 복제된 테이블 확인하기</h4>\n<ul>\n<li>새 터미널을 열고 아래 커맨드로 Mysql Client를 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd mysql\ndocker-compose exec -it master-server bash\nmysql --user=root --password=1234\nuse my-database;\nshow tables;</code></pre>\n<ul>\n<li>Kafka Connect 서버가 복제한 SYNC_ORDER_TABLE 이 존재한다.</li>\n</ul>\n<h4 id=\"sync_order_table을-사용하는-marketing-서비스-실행\"><a href=\"#sync_order_table%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-marketing-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SYNC_ORDER_TABLE을 사용하는 Marketing 서비스 실행</h4>\n<ul>\n<li>marketing 서비스가 로컬에 실행된 MySQL DB를 사용한다.</li>\n<li>marketing 서비스의 application.yml을 열어 default profile의 datasource를 확인한다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//$<span class=\"token punctuation\">{</span>_DATASOURCE_ADDRESS<span class=\"token punctuation\">:</span>localhost<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span><span class=\"token punctuation\">}</span>/$<span class=\"token punctuation\">{</span>_DATASOURCE_TABLESPACE<span class=\"token punctuation\">:</span>my<span class=\"token punctuation\">-</span>database<span class=\"token punctuation\">}</span><span class=\"token punctuation\">?</span>serverTimezone=UTC<span class=\"token important\">&amp;characterEncoding=UTF-</span><span class=\"token number\">8</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>_DATASOURCE_USERNAME<span class=\"token punctuation\">:</span>root<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>_DATASOURCE_PASSWORD<span class=\"token punctuation\">:</span><span class=\"token number\">1234</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">driverClassName</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver </code></pre>\n<ul>\n<li>새 터미널에서 marketing 서비스를 실행하고, 분석을 위해 동기화된 데이터를 조회한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http GET :8082/syncOrders</code></pre>\n<ul>\n<li>Sink Connector를 통해 주문서비스에서 입력한 데이터가 CDC를 통해 마케팅 테이블(SYNC_ORDER_TABLE)에 복제된 데이터가 조회된다.</li>\n</ul>\n<ul>\n<li>다시한번 Orders 테이블에 데이터를 입력하고 마케팅팀에 주문 데이터 동기화가 되는지 확인해 본다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">http POST :8081/orders <span class=\"token assign-left variable\">productId</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">qty</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token assign-left variable\">customerId</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span> <span class=\"token assign-left variable\">price</span><span class=\"token operator\">=</span><span class=\"token number\">10000</span>\nhttp GET :8082/syncOrders</code></pre>\n<h3 id=\"source-connector-mode\"><a href=\"#source-connector-mode\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Source Connector Mode</h3>\n<ul>\n<li>Lab에서 사용한 jdbc Source Connector의 incrementing 모드에서는 기존 row의 수정이나 삭제는 감지하지 못한다. </li>\n<li>Mode 옵션</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">1) bulk : 데이터를 폴링할 때 마다 전체 테이블을 복사\n\n2) incrementing : 특정 컬럼의 중가분만 감지되며, 기존 행의 수정과 삭제는 감지되지 않음\nincrementing.column.name : incrementing 모드에서 새 행을 감지하는데 사용할 컬럼명\n\n3) timestamp : timestamp형 컬럼일 경우, 새 행과 수정된 행을 감지함\ntimestamp.column.name : timestamp 모드에서 대상 행을 감지하는데 사용할 컬럼명\n\n4) timestamp+incrementing : 위의 두 컬럼을 모두 사용하는 옵션</code></pre>\n<p>참고 URL: <a href=\"https://presentlee.tistory.com/7\" target=\"_blank\" rel=\"noopener noreferrer\">https://presentlee.tistory.com/7</a></p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"CDC(Change Data Capture) with Kafka","anchor":"#cdcchange-data-capture-with-kafka"},{"depth":3,"value":"Kafka Connect에 의한 데이터 동기화","anchor":"#kafka-connect에-의한-데이터-동기화"},{"depth":3,"value":"Kafka 서버 실행","anchor":"#kafka-서버-실행"},{"depth":4,"value":"Connector 다운로드","anchor":"#connector-다운로드"},{"depth":4,"value":"Kafka 수동 실행","anchor":"#kafka-수동-실행"},{"depth":3,"value":"Kafka Connect 서버 실행","anchor":"#kafka-connect-서버-실행"},{"depth":4,"value":"JDBC Connector 설치","anchor":"#jdbc-connector-설치"},{"depth":4,"value":"Kafka Connect 서버 실행","anchor":"#kafka-connect-서버-실행-1"},{"depth":3,"value":"Connector 설치","anchor":"#connector-설치"},{"depth":4,"value":"Source Connector 설치","anchor":"#source-connector-설치"},{"depth":4,"value":"Order 마이크로서비스 설정","anchor":"#order-마이크로서비스-설정"},{"depth":4,"value":"소스 테이블에 Data 입력","anchor":"#소스-테이블에-data-입력"},{"depth":4,"value":"Sink Connector 설치","anchor":"#sink-connector-설치"},{"depth":4,"value":"mysql client로 복제된 테이블 확인하기","anchor":"#mysql-client로-복제된-테이블-확인하기"},{"depth":4,"value":"SYNC_ORDER_TABLE을 사용하는 Marketing 서비스 실행","anchor":"#sync_order_table을-사용하는-marketing-서비스-실행"},{"depth":3,"value":"Source Connector Mode","anchor":"#source-connector-mode"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}