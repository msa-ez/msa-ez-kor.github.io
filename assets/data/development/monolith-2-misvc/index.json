{"hash":"dbbad657247c5e3cff992cf79ab240635ccdaf72","data":{"markdownPage":{"id":"ef4d8b57992d63248437c51e699b88c4","title":"Req/Res 방식의 MSA 연동 ","description":"","path":"/development/monolith-2-misvc/","timeToRead":3,"content":"<h1 id=\"reqres-방식의-msa-연동\"><a href=\"#reqres-%EB%B0%A9%EC%8B%9D%EC%9D%98-msa-%EC%97%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Req/Res 방식의 MSA 연동</h1>\n<div style=\"position: relative; padding-bottom: 56.25%; padding-top: 0px; height: 0; overflow: hidden;\">\n\t<iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" \n        src=\"https://www.youtube.com/embed/jL_i3o0IEbY\" \n        frameborder=\"0\" crolling=\"no\" frameborder=\"none\" allowfullscreen=\"\">\n    </iframe>\n</div>\n<br>\n<p>모노리식 서비스에서 특정 부분을 마이크로서비스로 떼어내고, 모노리스와 마이크로서비스가 Req/Res 방식으로 상호 통신하는 예제를 가이드를 따라 수행합니다. </p>\n<h2 id=\"이벤트스토밍-모델-준비\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%8A%A4%ED%86%A0%EB%B0%8D-%EB%AA%A8%EB%8D%B8-%EC%A4%80%EB%B9%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트스토밍 모델 준비</h2>\n<ul>\n<li>아래 모델을 새 탭에서 로딩합니다.\n<a href=\"https://www.msaez.io/#/storming/labshopmonolith-230822\" target=\"_blank\" rel=\"noopener noreferrer\">모델 링크</a></li>\n<li>브라우져에 모델이 로딩되지 않으면, 우측 상단의 (사람모양) 아바타 아이콘을 클릭하여 <strong>깃헙(Github)</strong> 계정으로 로그인 후 리로드하면 아래처럼 랩에 필요한 이벤트스토밍 기본 모델이 출력됩니다. </li>\n<li>로딩된 모델은 우측 팔레트 영역에 스티커 목록이 나타나지 않습니다. 상단 메뉴영역에서 포크 아이콘(FORK)을 클릭해 주어진 모델을 복제합니다. </li>\n</ul>\n<p><img src=\"https://github.com/acmexii/demo/assets/35618409/7950c0df-eee8-44e3-a79f-7448a4caa30e\" alt=\"image\"></p>\n<ul>\n<li>우측 팔레트 영역에 스티커 목록들이 나타나는 것이 확인됩니다.</li>\n</ul>\n<h3 id=\"기존-monolith에서-일부-영역을-마이크로서비스로-분리\"><a href=\"#%EA%B8%B0%EC%A1%B4-monolith%EC%97%90%EC%84%9C-%EC%9D%BC%EB%B6%80-%EC%98%81%EC%97%AD%EC%9D%84-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A1%9C-%EB%B6%84%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>기존 Monolith에서 일부 영역을 마이크로서비스로 분리</h3>\n<p>본 랩에 주어진 모델을 활용하여 가이드에 따라 모노리스에서 상품서비스를 분리하는 모델링을 수행합니다. </p>\n<h3 id=\"이벤트스토밍\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%8A%A4%ED%86%A0%EB%B0%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트스토밍</h3>\n<ul>\n<li>monolith 바운디드 컨텍스트를 주문 도메인 스티커에만 한정</li>\n<li>새로운 bounded context를 추가하고 이름을 \"inventory\"로 설정</li>\n<li>inventory aggregate 객체들을 묶음 선택하여 inventory bounded context 내로 이동</li>\n</ul>\n<img width=\"874\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896320-72973cf1-c1dc-44f4-a46a-9be87d072284.png\">\n<ul>\n<li>재고량을 감소시키는 Command 추가 : inventory BC 내에 Command  스티커를 추가하고, 아래 커맨드 이름을 복사하여 사용합니다. </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">decrease stock</code></pre>\n<ul>\n<li>이때 Command 스티커는 Inventory Aggregate 스티커의 왼쪽에 인접하게 부착합니다.</li>\n<li>Command 의 설정:  \"decrease stock\" command 를 더블클릭한 후, Method Type을 <strong>Extend Verb URI</strong>를 선택하고 <strong>Attribute로 type: Integer, name: qty를 추가</strong>해 줍니다.</li>\n<li>속성 추가후, <strong>Add Attribute</strong> 를 클릭하거나 엔터키로 설정을 확인합니다. </li>\n</ul>\n<img width=\"784\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896393-30889e96-6cbc-4e7f-9631-25c0d004635d.png\">\n<ul>\n<li>원격 호출선 연결:  monolith 내의 OrderPlaced Event 스티커와 inventory 의 decrease stock Command 스티커를 연결. 이때 Req/res 라는 표시가 나타남.</li>\n</ul>\n<img width=\"859\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896427-f91962cd-f8ab-4113-bd85-5abe1ada3bcd.png\">\n<h2 id=\"code-생성-및-내-git-repository에-push\"><a href=\"#code-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EB%82%B4-git-repository%EC%97%90-push\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code 생성 및 내 Git Repository에 Push</h2>\n<ul>\n<li>모델링 메뉴의 <strong>CODE</strong> > <strong>Code Preview</strong>를 클릭합니다. </li>\n<li>상단의 <strong>Push to Git</strong> 메뉴를 클릭해 나타나는 다이얼로그 박스에서 <strong>Create New Repository</strong>를 선택하고, <strong>CREATE</strong>를 클릭합니다.</li>\n<li>초기 Github 계정으로 로그인 하였으므로, 나의 Git 정보가 자동으로 표시됩니다. </li>\n</ul>\n<p><img src=\"https://github.com/acmexii/demo/assets/35618409/dcb1966e-e0d1-43f3-9920-457660923259\" alt=\"image\"></p>\n<ul>\n<li>모델 기반 코드가 내 Github에 Push됩니다.</li>\n</ul>\n<p><img src=\"https://github.com/acmexii/demo/assets/35618409/6581f400-adb8-4963-bf03-511d459c5e32\" alt=\"image\"></p>\n<ul>\n<li>좌측 메뉴 <strong>IDE</strong>를 누른다음, Cloud IDE 목록에서 <strong>Open GitPod</strong>를 클릭합니다.</li>\n</ul>\n<h3 id=\"호출-측-소스코드의-확인\"><a href=\"#%ED%98%B8%EC%B6%9C-%EC%B8%A1-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C%EC%9D%98-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>호출 측 소스코드의 확인</h3>\n<ul>\n<li>Cloud IDE상에 로딩된 코드 목록에서 아래 리소스를 찾아 봅니다.</li>\n<li>monolith/../ Order.java 의 <strong>@PostPersist</strong> 내에 호출을 위해 생성된 샘플코드를 확인합니다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@PostPersist\npublic void onPostPersist() {\n    labshopmonolith.external.DecreaseStockCommand decreaseStockCommand = new labshopmonolith.external.DecreaseStockCommand();\n\n  // 주문수량 정보를 커맨드 객체에 적재합니다. \n    decreaseStockCommand.setQty(getQty()); \n    \n  // InventoryService Proxy를 통해 커맨드 객체와 함께 원격호출 합니다.\n    MonolithApplication.applicationContext\n        .getBean(labshopmonolith.external.InventoryService.class)\n        .decreaseStock((Long.valueOf(getProductId())), decreaseStockCommand);\n}</code></pre>\n<blockquote>\n<p>우리는 decreaseStock stub 메서드를 로컬 객체를 호출하는 것처럼 호출하지만 실제적으로는 inventory 원격객체를 호출합니다.</p>\n<p>재고량 수정을 위하여 qty 값을 전달하는 Command 객체와 해당 제품 id 를 path 로 전달하는 첫번째 아규먼트로 productId를 전달합니다.</p>\n</blockquote>\n<ul>\n<li>monolith/../ external 패키지 내에 생성된 FeignClient 관련 Stub 코드들을 참고합니다 (InventoryService.java, DecreaseStockCommand.java, Inventory.java)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@FeignClient(name = &quot;inventory&quot;, url = &quot;${api.url.inventory}&quot;)\npublic interface InventoryService {\n    @RequestMapping(\n        method = RequestMethod.PUT,\n        path = &quot;/inventories/{id}/decreasestock&quot;\n    )\n    public void decreaseStock(\n        @PathVariable(&quot;id&quot;) Long id,\n        @RequestBody DecreaseStockCommand decreaseStockCommand\n    );\n\n}</code></pre>\n<blockquote>\n<p>FeignClient 는 실제로는 inventory 원격객체를 호출하는 proxy 객체를 생성합니다.</p>\n<p>application.yaml 의 api.url.inventory 설정값의 url 로 PUT 메서드를 해당 path 로 호출하는 원격 호출의 구현체가 채워집니다. </p>\n</blockquote>\n<h2 id=\"피호출-측-소스코드의-확인과-구현\"><a href=\"#%ED%94%BC%ED%98%B8%EC%B6%9C-%EC%B8%A1-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C%EC%9D%98-%ED%99%95%EC%9D%B8%EA%B3%BC-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>피호출 측 소스코드의 확인과 구현</h2>\n<ul>\n<li>inventory/.. /infra/InventoryController.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">public class InventoryController {\n\n    @Autowired\n    InventoryRepository inventoryRepository;\n\n    @RequestMapping(value = &quot;inventories/{id}/decreasestock&quot;, method = RequestMethod.PUT, produces = &quot;application/json;charset=UTF-8&quot;)\n    public Inventory decreaseStock(\n        @PathVariable(value = &quot;id&quot;) Long id,\n        @RequestBody DecreaseStockCommand decreaseStockCommand,\n        HttpServletRequest request,\n        HttpServletResponse response\n    ) throws Exception {\n        System.out.println(&quot;##### /inventory/decreaseStock  called #####&quot;);\n        Optional&lt;Inventory&gt; optionalInventory = inventoryRepository.findById(\n            id\n        );\n\n        optionalInventory.orElseThrow(() -&gt; new Exception(&quot;No Entity Found&quot;));\n        Inventory inventory = optionalInventory.get();\n        inventory.decreaseStock(decreaseStockCommand);\n\n        inventoryRepository.save(inventory);\n        return inventory;\n    }\n}</code></pre>\n<blockquote>\n<p>decreaseStock 에 대한 원격호출을 받을 수 있는 REST Service Mapping 입니다.</p>\n<p>호출을 받으면 Inventory 어그리거트의 decreaseStock 으로 전달하는 input adapter 역할을 합니다(hexagonal architecture). </p>\n<p>실제 비즈니스 로직 (재고량 감소)은 어그리거트 내부에서만 ubiquitous 언어로 구현되어야 합니다.</p>\n</blockquote>\n<ul>\n<li>inventory/../Inventory.java 의 구현</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public void decreaseStock(DecreaseStockCommand decreaseStockCommand) {\n        setStock(getStock() - decreaseStockCommand.getQty().longValue());  // Copy &amp; Paste this code\n    }</code></pre>\n<h3 id=\"proxy-객체를-통한-동기호출-테스트\"><a href=\"#proxy-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%8F%99%EA%B8%B0%ED%98%B8%EC%B6%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Proxy 객체를 통한 동기호출 테스트</h3>\n<h4 id=\"inventory-서비스의-테스트\"><a href=\"#inventory-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>inventory 서비스의 테스트</h4>\n<ul>\n<li>inventory 서비스를 기동시키고 httpie 툴을 통해 서비스가 잘 호출되는지 테스트합니다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd inventory\nmvn spring-boot:run</code></pre>\n<ul>\n<li>인벤토리에 테스트할 상품을 먼저 등록하고 사전 검증합니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8083/inventories id=1 stock=10\nhttp PUT :8083/inventories/1/decreasestock qty=3\nhttp :8083/inventories/1  # stock must be 7</code></pre>\n<h4 id=\"monolith-를-통하여-inventory-동기호출\"><a href=\"#monolith-%EB%A5%BC-%ED%86%B5%ED%95%98%EC%97%AC-inventory-%EB%8F%99%EA%B8%B0%ED%98%B8%EC%B6%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>monolith 를 통하여 inventory 동기호출</h4>\n<ul>\n<li>monolith 를 기동시키고 실제 주문을 통하여 inventory 가 호출되는지 확인합니다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd monolith\nmvn spring-boot:run\n\n#새 터미널\nhttp :8082/orders productId=1 qty=5\nhttp :8083/inventories/1  # stock must be 2</code></pre>\n<h1 id=\"참고\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>참고</h1>\n<ol>\n<li>파일 다운로드 받기:  터미널 열고 > zip -r test.zip ./* 하신후, 생성된 test.zip 을 우클릭 다운로드</li>\n</ol>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Req/Res 방식의 MSA 연동","anchor":"#reqres-방식의-msa-연동"},{"depth":2,"value":"이벤트스토밍 모델 준비","anchor":"#이벤트스토밍-모델-준비"},{"depth":3,"value":"기존 Monolith에서 일부 영역을 마이크로서비스로 분리","anchor":"#기존-monolith에서-일부-영역을-마이크로서비스로-분리"},{"depth":3,"value":"이벤트스토밍","anchor":"#이벤트스토밍"},{"depth":2,"value":"Code 생성 및 내 Git Repository에 Push","anchor":"#code-생성-및-내-git-repository에-push"},{"depth":3,"value":"호출 측 소스코드의 확인","anchor":"#호출-측-소스코드의-확인"},{"depth":2,"value":"피호출 측 소스코드의 확인과 구현","anchor":"#피호출-측-소스코드의-확인과-구현"},{"depth":3,"value":"Proxy 객체를 통한 동기호출 테스트","anchor":"#proxy-객체를-통한-동기호출-테스트"},{"depth":4,"value":"inventory 서비스의 테스트","anchor":"#inventory-서비스의-테스트"},{"depth":4,"value":"monolith 를 통하여 inventory 동기호출","anchor":"#monolith-를-통하여-inventory-동기호출"},{"depth":1,"value":"참고","anchor":"#참고"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}