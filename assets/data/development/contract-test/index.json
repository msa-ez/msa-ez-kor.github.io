{"hash":"df6e0475c0b3857191eb7ee4baf4cb76b031ebe3","data":{"markdownPage":{"id":"e2cdaa0d231956c07fab172754ae8c9a","title":"Contract Test (Consumer Driven Test)","description":"","path":"/development/contract-test/","timeToRead":3,"content":"<h1 id=\"contract-test-consumer-driven-test\"><a href=\"#contract-test-consumer-driven-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Contract Test (Consumer Driven Test)</h1>\n<h2 id=\"contract-test\"><a href=\"#contract-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Contract Test</h2>\n<p>주문서비스와 상품서비스간 계약(Contract)테스트를 통해 마이크로서비스와 같은 분산 환경에서 API 일관성이 유지되는 실습을 수행한다.  </p>\n<h3 id=\"서비스-기동\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B8%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 기동</h3>\n<ul>\n<li>주문서비스(8081)를 기동한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> contract-test\n\n<span class=\"token builtin class-name\">cd</span> order\nmvn spring-boot:run</code></pre>\n<ul>\n<li>새로운 터미널을 열어 상품서비스(8085)를 기동한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd contract-test\n\ncd inventory\nmvn spring-boot:run</code></pre>\n<ul>\n<li>실행된 주문 서비스에 주문을 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://localhost:8081/orders productId=2 quantity=3 customerId=1@uengine.org</code></pre>\n<h4 id=\"상품팀의-일방적-api-수정으로-오류상황-연출하기\"><a href=\"#%EC%83%81%ED%92%88%ED%8C%80%EC%9D%98-%EC%9D%BC%EB%B0%A9%EC%A0%81-api-%EC%88%98%EC%A0%95%EC%9C%BC%EB%A1%9C-%EC%98%A4%EB%A5%98%EC%83%81%ED%99%A9-%EC%97%B0%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상품팀의 일방적 API 수정으로 오류상황 연출하기</h4>\n<ul>\n<li>\n<p>주문서비스에서 주문을 할때, 상품서비스의 api 를 호출하고 있다.</p>\n<ul>\n<li>Order.java 파일(45행)의 restTemplate.getForEntity 확인</li>\n<li>프로세스에 필요한 아래 웹 URL을 호출한다. </li>\n<li><a href=\"http://%EC%83%81%ED%92%88%EC%84%9C%EB%B9%84%EC%8A%A4\" target=\"_blank\" rel=\"noopener noreferrer\">http://상품서비스</a> URL/product/[productId]</li>\n</ul>\n</li>\n<li>\n<p>이때, 상품서비스에서 참조되는 리소스의 해당 api 를 다른 이름으로('item') 임의 수정한다.</p>\n<ul>\n<li>상품서비스의 해당 리소스명 : ProductController.java </li>\n<li>16행에서 @GetMapping(\"/product/{productId}\") 을, @GetMapping(\"/item/{productId}\") 으로 변경</li>\n</ul>\n</li>\n<li>상품서비스를 재시작 하고</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">상품서비스 Console 화면에서 ^C\nmvn spring-boot:run</code></pre>\n<ul>\n<li>다시 주문해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://localhost:8081/orders productId=2 quantity=3 customerId=1@uengine.org</code></pre>\n<ul>\n<li>주문팀에서 필요한 API가 소실되어 콘솔상에 404오류가 발생한다.</li>\n</ul>\n<h3 id=\"일방적-api-수정을-방지하기-위한-계약-체결\"><a href=\"#%EC%9D%BC%EB%B0%A9%EC%A0%81-api-%EC%88%98%EC%A0%95%EC%9D%84-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EA%B3%84%EC%95%BD-%EC%B2%B4%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>일방적 API 수정을 방지하기 위한 계약 체결</h3>\n<ul>\n<li>Consumer가 참조하는 코드를 Provider의 일방적인 수정방지를 위해 Contract 적용</li>\n<li>Consumer인 주문 서비스 주도적으로 계약서(Consumer Driven Contract)를 작성한다.</li>\n<li>작성한 계약서는 주문서비스 최상위 root에 존재(productGet.groovy) 한다.</li>\n</ul>\n<pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">package</span> contracts<span class=\"token punctuation\">.</span>rest\n\nContract<span class=\"token punctuation\">.</span>make <span class=\"token punctuation\">{</span>\n    request <span class=\"token punctuation\">{</span>\n        method <span class=\"token string\">'GET'</span>\n        url <span class=\"token punctuation\">(</span><span class=\"token string\">'/product/1'</span><span class=\"token punctuation\">)</span>\n        headers <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token function\">applicationJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    response <span class=\"token punctuation\">{</span>\n        status <span class=\"token number\">200</span>\n        <span class=\"token function\">body</span><span class=\"token punctuation\">(</span>\n                id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                name<span class=\"token punctuation\">:</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"TV\"</span></span><span class=\"token punctuation\">,</span>\n                price<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n                stock<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n                imageUrl<span class=\"token punctuation\">:</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"testUrl\"</span></span>\n        <span class=\"token punctuation\">)</span>\n        bodyMatchers <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$.id'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">byRegex</span><span class=\"token punctuation\">(</span><span class=\"token function\">nonEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$.name'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">byRegex</span><span class=\"token punctuation\">(</span><span class=\"token function\">nonEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$.price'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">byRegex</span><span class=\"token punctuation\">(</span><span class=\"token function\">nonEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$.stock'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">byRegex</span><span class=\"token punctuation\">(</span><span class=\"token function\">nonEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$.imageUrl'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">byRegex</span><span class=\"token punctuation\">(</span><span class=\"token function\">nonEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        headers <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token function\">applicationJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p>productGet.groovy 파일을 복사해, inventory 서비스의 test/resources/contracts/rest 폴더에 복사를 한다.</p>\n<blockquote>\n<ul>\n<li>Git 환경에서 PR(Pull Request)을 요청하고 이를 상품팀이 수락한다.</li>\n<li>(contracts/rest 폴더는 새로 생성한다.)</li>\n<li>(contracts/rest 폴더를 만드는 이유는 productGet.groovy 파일에 package contracts.rest 라고 선언했기 때문이다.)</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"계약-체결-후-배포를-위한-빌드-실행\"><a href=\"#%EA%B3%84%EC%95%BD-%EC%B2%B4%EA%B2%B0-%ED%9B%84-%EB%B0%B0%ED%8F%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%B9%8C%EB%93%9C-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>계약 체결 후 배포를 위한 빌드 실행</h3>\n<ul>\n<li>계약에 의해서 product 서비스에서는 빌드단계에서 에러가 발생한다.</li>\n<li>상품서비스를 종료하고, 다시 배포를 위한 빌드를 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">상품서비스 Console 화면에서 ^C\nmvn clean package</code></pre>\n<ul>\n<li>test fail 에러 발생!!\n<img src=\"https://user-images.githubusercontent.com/35618409/231977809-da0f6a45-0e9f-4de2-b325-c812ae65a032.png\" alt=\"image\"></li>\n</ul>\n<blockquote>\n<p>Consumer와 체결한 계약(Contract)을 위반하여 상품팀에서는 빌드단계에서부터 실패하게 된다.\n계약서에 명시된 응답 속성이 하나라도 리턴되지 않아도 빌드는 실패한다. </p>\n</blockquote>\n<ul>\n<li>계약 위반을 해결하기 위하여 product 서비스는 기존의 /product 라는 api 를 유지 해야한다.</li>\n<li>product 서비스의 ProductController.java 에서 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">   @GetMapping(&quot;/v2/item/{productId}&quot;)\n    Product productStockCheck_v2(@PathVariable(value = &quot;productId&quot;) Long productId) {\n        return productStockCheck(productId);\n    }\n\n    @GetMapping(&quot;/product/{productId}&quot;)\n    Product productStockCheck(@PathVariable(value = &quot;productId&quot;) Long productId) {\n\n        return  this.productService.getProductById(productId);\n    }</code></pre>\n<p>위의 같이 기존 API를 준수하면서 신규 API가 추가될 수 있도록 코드를 수정한다.</p>\n<ul>\n<li>product 서비스의 package 명령을 다시 호출해 본다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> inventory\nmvn clean package</code></pre>\n<ul>\n<li>테스트 성공 및 jar 파일 생성 완료!!</li>\n</ul>\n<h3 id=\"provder-계약테스트-후-consumer-테스트-실행\"><a href=\"#provder-%EA%B3%84%EC%95%BD%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%9B%84-consumer-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Provder 계약테스트 후, Consumer 테스트 실행</h3>\n<ul>\n<li>주문서비스는 상품서비스에서 정상적으로 테스트를 적용하여 배포중인지 테스트를 할 수 있다.</li>\n<li>주문서비스가 상품서비스의 api 를 테스트 하기 위해서는 상품서비스에서 stub 파일을 제공해 주어야 한다.</li>\n<li>상품 서비스에서 mvn install 을 하여 stub 파일을 Local(.m2 folder)이나 Remote(mvn deploy) 리파지토리에 저장한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> inventory\nmvn <span class=\"token function\">install</span></code></pre>\n<ul>\n<li>주문서비스에서는 상품서비스에서 만들어진 stub 파일(Mock Server)을 바라보며 테스트를 진행한다.</li>\n<li>\n<p>order 서비스의 test/java/com.example.template/ProductContractTest.java 파일 참고</p>\n<ul>\n<li>생성된 Stub을 로컬에서 Mock서버로 8090포트로 실행한다. (@AutoConfigureStubRunner)</li>\n</ul>\n</li>\n<li>@Test Code는\n- OrderController에 등록된 /order/validateProduct/1 URL을 호출하고,\n- OrderController에서는 Local Mock 서버로 \"<a href=\"http://localhost:8090/product/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8090/product/</a>\" + productId 로 Get 요청을 보낸다.\n- 이처럼 주문서비스의 Biz 로직을 활용해 배포 시, 상품서비스 Stub을 통해 참조하는 API 테스트를 수행한다.\n- (Test 시엔 Stub URL을, 클라우드 환경에서는 Cloud URL을 profile로 관리)</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> order\nmvn clean <span class=\"token builtin class-name\">test</span></code></pre>\n<ul>\n<li>Test 로그를 보면, Mock Server에 대해 Request와 Response가 성공적으로 실행되었고,\n<img src=\"https://user-images.githubusercontent.com/35618409/232052587-c8136327-8fdb-4e78-84e1-6c6833b2a852.png\" alt=\"image\"></li>\n<li>전체 Contract 테스트도 성공적으로 종료되었다.\n<img src=\"https://user-images.githubusercontent.com/35618409/232053136-6e875302-a95f-48c0-a444-2c0b2ea8da0d.png\" alt=\"image\"></li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Contract Test (Consumer Driven Test)","anchor":"#contract-test-consumer-driven-test"},{"depth":2,"value":"Contract Test","anchor":"#contract-test"},{"depth":3,"value":"서비스 기동","anchor":"#서비스-기동"},{"depth":4,"value":"상품팀의 일방적 API 수정으로 오류상황 연출하기","anchor":"#상품팀의-일방적-api-수정으로-오류상황-연출하기"},{"depth":3,"value":"일방적 API 수정을 방지하기 위한 계약 체결","anchor":"#일방적-api-수정을-방지하기-위한-계약-체결"},{"depth":3,"value":"계약 체결 후 배포를 위한 빌드 실행","anchor":"#계약-체결-후-배포를-위한-빌드-실행"},{"depth":3,"value":"Provder 계약테스트 후, Consumer 테스트 실행","anchor":"#provder-계약테스트-후-consumer-테스트-실행"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}