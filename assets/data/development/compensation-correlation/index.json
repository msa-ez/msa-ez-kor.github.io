{"hash":"b24f55f24a80a19e61aead4912784feb36cc15c1","data":{"markdownPage":{"id":"b6ee9c1c33c72b014629b6acafed1edf","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation","description":"","path":"/development/compensation-correlation/","timeToRead":2,"content":"<h1 id=\"pubsub-방식의-연동---compensation-과-correlation\"><a href=\"#pubsub-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%97%B0%EB%8F%99---compensation-%EA%B3%BC-correlation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub 방식의 연동 - Compensation 과 Correlation</h1>\n<h3 id=\"compensation-and-correlation\"><a href=\"#compensation-and-correlation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compensation and Correlation</h3>\n<p>어떠한 이벤트로 인하여 발생한 변경사항들에 대하여 고객이 원하거나 어떠한 기술적 이유로 인하여 해당 트랜잭션을 취소해야 하는 경우 이를 원복하거나 보상해주는 처리를 Compensation 이라고 한다. 그리고 해당 취소건에 대하여 여러개의 마이크로 서비스 내의 데이터간 상관 관계를 키값으로 연결하여 취소해야 하는데, 이러한 관계값에 대한 처리를 Correlation 이라고 한다. </p>\n<h3 id=\"실습-시나리오\"><a href=\"#%EC%8B%A4%EC%8A%B5-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실습 시나리오</h3>\n<p>이전 랩에서 주문을 생성하는 OrderPlaced 라는 이벤트를 발행하였다.<br>\n이번 랩에서는 주문서비스에서 주문을 취소하는 OrderCancelled 라는 이벤트를 발행 하고,  Inventory 에서는 해당 주문량에 대한 재고량을 다시 원복하는 Compensation을 수행한다. inventory 에 대해서는 해당 주문의 상품 id 를 상관관계 키 (Correlation Key)로 초기 주문되었던 개수만큼을 다시 추가하는 방법으로 복구가 이루어진다. </p>\n<h3 id=\"작업순서\"><a href=\"#%EC%9E%91%EC%97%85%EC%88%9C%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>작업순서</h3>\n<h4 id=\"이벤트-스토밍\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%8A%A4%ED%86%A0%EB%B0%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 스토밍</h4>\n<ul>\n<li>\"cancel\" Command 의 부착. 이때 해당 이벤트는 Order Aggregate 의 왼쪽에 인접하도록 부착한다.</li>\n<li>cancel command의 설정창을 열고(더블클릭) http method 로 \"DELETE\" 를 선택한다.</li>\n<li>\"OrderCancelled\" Event 를 부착한다. cancel command 에 따라서 OrderCancelled 라는 이벤트를 발행하도록 Aggregate 의 우측편에 인접하도록 부착한다.</li>\n<li>OrderCancelled Event 의 속성을 Aggregate 의 것에서 복사한다 (Sync Attributes 클릭)</li>\n<li>cancel command 와 OrderCancelled event 를 선으로 연결한다.</li>\n<li>inventory bounded context 내에 Policy 를 추가하고 이름을 \"increase stock\" 으로 설정한다.</li>\n<li>OrderCancelled Event 와 \"increase stock\" Policy 를 연결한다.</li>\n</ul>\n<h4 id=\"코드의-생성\"><a href=\"#%EC%BD%94%EB%93%9C%EC%9D%98-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드의 생성</h4>\n<ul>\n<li>order/../ Order.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">   @PreRemove\n    public void onPreRemove() {\n        OrderCancelled orderCancelled = new OrderCancelled(this);\n        orderCancelled.publishAfterCommit();\n    }</code></pre>\n<ul>\n<li>order/../   OrderCancelled.java 와 inventory/../ OrderCancelled.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package labshopcompensation.domain;\n\nimport java.util.*;\nimport labshopcompensation.domain.*;\nimport labshopcompensation.infra.AbstractEvent;\nimport lombok.*;\n\n@Data\n@ToString\npublic class OrderCancelled extends AbstractEvent {\n\n    private Long id;\n    private String productId;\n    private Integer qty;\n    private String customerId;\n    private Double amount;\n    private String status;\n    private String address;\n\n    public OrderCancelled(Order aggregate) {\n        super(aggregate);\n    }\n\n    public OrderCancelled() {\n        super();\n    }\n    // keep\n\n}</code></pre>\n<ul>\n<li>inventory/../ PolicyHandler.java 의 wheneverOrderCancelled_increaseStock method</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    @StreamListener(\n        value = KafkaProcessor.INPUT,\n        condition = &quot;headers[&#39;type&#39;]==&#39;OrderCancelled&#39;&quot;\n    )\n    public void wheneverOrderCancelled_IncreaseStock(\n        @Payload OrderCancelled orderCancelled\n    ) {\n        OrderCancelled event = orderCancelled;\n        System.out.println(\n            &quot;\\n\\n##### listener IncreaseStock : &quot; + orderCancelled + &quot;\\n\\n&quot;\n        );\n\n        // Sample Logic //\n        Inventory.increaseStock(event);\n    }</code></pre>\n<ul>\n<li>inventory/../ Inventory.java 의 increaseStock method</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public static void increaseStock(OrderCancelled orderCancelled) {\n\n        /** fill out following code  */\n\n    }</code></pre>\n<h3 id=\"유틸리티-설치-필요시\"><a href=\"#%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0-%EC%84%A4%EC%B9%98-%ED%95%84%EC%9A%94%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>유틸리티 설치 (필요시)</h3>\n<ul>\n<li>httpie 와 kafka</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">pip install httpie\n\ncd kafka\ndocker-compose up</code></pre>\n<h4 id=\"주문-취소와-이벤트-확인\"><a href=\"#%EC%A3%BC%EB%AC%B8-%EC%B7%A8%EC%86%8C%EC%99%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문 취소와 이벤트 확인</h4>\n<ul>\n<li>생성된 코드를 반영한 후, 주문을 서비스를 재기동 한다.</li>\n<li>초기 재고량 설정</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories id=1  stock=10</code></pre>\n<ul>\n<li>다음 명령으로 주문 생성한다:     </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 productName=TV qty=3</code></pre>\n<ul>\n<li>주문에 의한 재고량 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories/1    # stock=7</code></pre>\n<ul>\n<li>주문을 취소한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http DELETE localhost:8081/orders/1</code></pre>\n<ul>\n<li>취소에 의한 재고량 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories/1    # stock=10</code></pre>\n<ul>\n<li>Kafka consumer 를 이용하여 OrderCancelled 이벤트가 발행되는 것을 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin\n\n./kafka-console-consumer --bootstrap-server localhost:9092 --topic labshopcompensation --from-beginning</code></pre>\n<h4 id=\"inventory-서비스의-구현\"><a href=\"#inventory-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>inventory 서비스의 구현</h4>\n<ul>\n<li>inventory의 Aggregate 인 Inventory.java  에 increaseStock method 를 다음과 같이 구현한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public static void increaseStock(OrderCancelled orderCancelled) {\n\n        repository().findById(Long.valueOf(orderCancelled.getProductId())).ifPresent(inventory-&gt;{\n            \n            inventory.setStock(inventory.getStock() + orderCancelled.getQty()); \n            repository().save(inventory);\n\n\n         });\n\n    }</code></pre>\n<h3 id=\"확장시나리오-배송서비스에서-주문-삭제시-배송을-취소하는-작업\"><a href=\"#%ED%99%95%EC%9E%A5%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4-%EB%B0%B0%EC%86%A1%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EC%84%9C-%EC%A3%BC%EB%AC%B8-%EC%82%AD%EC%A0%9C%EC%8B%9C-%EB%B0%B0%EC%86%A1%EC%9D%84-%EC%B7%A8%EC%86%8C%ED%95%98%EB%8A%94-%EC%9E%91%EC%97%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>확장시나리오: 배송서비스에서 주문 삭제시 배송을 취소하는 작업</h3>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Pub/Sub 방식의 연동 - Compensation 과 Correlation","anchor":"#pubsub-방식의-연동---compensation-과-correlation"},{"depth":3,"value":"Compensation and Correlation","anchor":"#compensation-and-correlation"},{"depth":3,"value":"실습 시나리오","anchor":"#실습-시나리오"},{"depth":3,"value":"작업순서","anchor":"#작업순서"},{"depth":4,"value":"이벤트 스토밍","anchor":"#이벤트-스토밍"},{"depth":4,"value":"코드의 생성","anchor":"#코드의-생성"},{"depth":3,"value":"유틸리티 설치 (필요시)","anchor":"#유틸리티-설치-필요시"},{"depth":4,"value":"주문 취소와 이벤트 확인","anchor":"#주문-취소와-이벤트-확인"},{"depth":4,"value":"inventory 서비스의 구현","anchor":"#inventory-서비스의-구현"},{"depth":3,"value":"확장시나리오: 배송서비스에서 주문 삭제시 배송을 취소하는 작업","anchor":"#확장시나리오-배송서비스에서-주문-삭제시-배송을-취소하는-작업"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/wireframe-generate/","title":"DDD 기반 UI 설계 및 자동 구현"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/ddl-to-eventstorming2/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}