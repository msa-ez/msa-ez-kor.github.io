{"hash":"66059a77643c8199fa0bc8835d08b0ad34b00b1c","data":{"markdownPage":{"id":"24b5631c36cc1b2b9a6a67ff6070dd1e","title":"Kafka scaling & Concurrenty handling","description":"","path":"/development/kafka-scaling-concurrenty-handling/","timeToRead":3,"content":"<h1 id=\"kafka-scaling--concurrenty-handling\"><a href=\"#kafka-scaling--concurrenty-handling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka scaling &#x26; Concurrenty handling</h1>\n<h2 id=\"kafka-메시지-동시성-처리\"><a href=\"#kafka-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%B2%98%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 메시지 동시성 처리</h2>\n<ul>\n<li>Kafka 파티션 스케일아웃에 따른 동시성 이슈를 확인한다.</li>\n<li>컨슈머 측에서 순서가 보장되기 위한 설정을 이해하고 실습한다.</li>\n<li>CODE > ProjectIDE로 GitPod 실습환경을 실행한다.</li>\n</ul>\n<h3 id=\"주문-배송서비스-실행\"><a href=\"#%EC%A3%BC%EB%AC%B8-%EB%B0%B0%EC%86%A1%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문, 배송서비스 실행</h3>\n<ul>\n<li>카프카 실행상태를 확인하고, 사용할 MySQL DB를 시작한다.</li>\n<li>주문, 배송 마이크로서비스를 실행하고, 주문에 따른 배송 프로세스를 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd mysql\ndocker-compose up -d\n\ncd order\nmvn clean spring-boot:run\n\ncd delivery\nmvn clean spring-boot:run</code></pre>\n<h2 id=\"test---싱글-파티션-싱글-컨슈머-환경\"><a href=\"#test---%EC%8B%B1%EA%B8%80-%ED%8C%8C%ED%8B%B0%EC%85%98-%EC%8B%B1%EA%B8%80-%EC%BB%A8%EC%8A%88%EB%A8%B8-%ED%99%98%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test - 싱글 파티션, 싱글 컨슈머 환경</h2>\n<ul>\n<li>새로운 터미널에서 카프카 토픽을 실시간 모니터링한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec kafka /bin/bash\ncd /bin\n./kafka-console-consumer --bootstrap-server localhost:9092 --topic kafka.scaling --from-beginning</code></pre>\n<ul>\n<li>새로운 터미널을 오픈해 주문을 실행한다.</li>\n<li>PARK(id: 1000) 주문에 이어, KIM(id: 2000) 주문도 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders customerId=1000 productId=100 productName=TV qty=3 address=SEOUL\nhttp :8081/orders customerId=2000 productId=100 productName=RADIO qty=3 address=PUSAN</code></pre>\n<ul>\n<li>KIM이 배송지 정보를 수정(PUSAN > SEOUL)한다.</li>\n<li>주문수정이 일어나면 배송서비스에서는 10초의 딜레이가 발생하도록 설정되어 있다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http PATCH :8081/orders/2 address=SEOUL</code></pre>\n<ul>\n<li>KIM이 주문을 삭제한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http DELETE :8081/orders/2</code></pre>\n<ul>\n<li>컨슈머가 하나일 때는 싱글 스레드로 동작해 설정된 딜레이 시간이 경과된 후 수정,삭제가 일어난다. </li>\n<li>'배송수정(DELIVERY MODIFIED)'에 이어 '배송취소(DELIVERY CANCELLED)' 이벤트가 카프카에 수신되었다. </li>\n<li>새로운 터미널에서 데이터베이스를 조회해 보자.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd mysql\ndocker-compose exec -it master-server bash\nmysql --user=root --password=1234\nuse my-database;\nselect * from Delivery_table;</code></pre>\n<ul>\n<li>배송서비스 테이블에 최종 배송취소 상태값(DELIVERY CANCELLED)이 정상적으로 조회된다.</li>\n</ul>\n<h2 id=\"test---멀티-파티션-멀티-컨슈머-환경\"><a href=\"#test---%EB%A9%80%ED%8B%B0-%ED%8C%8C%ED%8B%B0%EC%85%98-%EB%A9%80%ED%8B%B0-%EC%BB%A8%EC%8A%88%EB%A8%B8-%ED%99%98%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test - 멀티 파티션, 멀티 컨슈머 환경</h2>\n<p><u>12st Mall 사용량이 증가해 카프카와 배송서비스를 증설(스케일 아웃)할 필요가 생겼다고 가정해 보자. </u></p>\n<ul>\n<li>열린 카프카 터미널에서 파티션을 2개(default 1)로 Scale Out 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">./kafka-topics --bootstrap-server 127.0.0.1:9092 --alter --topic kafka.scaling -partitions 2\n./kafka-topics --bootstrap-server 127.0.0.1:9092 --topic kafka.scaling --describe</code></pre>\n<ul>\n<li>새로운 터미널에서 두번째 배송 서비스를 실행(Scale Out) 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd delivery-2nd\nmvn clean spring-boot:run</code></pre>\n<h2 id=\"1-처리순서가-지켜지지-않는-메시징\"><a href=\"#1-%EC%B2%98%EB%A6%AC%EC%88%9C%EC%84%9C%EA%B0%80-%EC%A7%80%EC%BC%9C%EC%A7%80%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%A9%94%EC%8B%9C%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 처리순서가 지켜지지 않는 메시징</h2>\n<h3 id=\"동일한-주문이-여러-파티션에-랜덤하게-적재되는-경우\"><a href=\"#%EB%8F%99%EC%9D%BC%ED%95%9C-%EC%A3%BC%EB%AC%B8%EC%9D%B4-%EC%97%AC%EB%9F%AC-%ED%8C%8C%ED%8B%B0%EC%85%98%EC%97%90-%EB%9E%9C%EB%8D%A4%ED%95%98%EA%B2%8C-%EC%A0%81%EC%9E%AC%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동일한 주문이 여러 파티션에 랜덤하게 적재되는 경우,</h3>\n<ul>\n<li>KIM(id: 2000)이 주문을 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders customerId=2000 productId=100 productName=RADIO qty=3 address=PUSAN</code></pre>\n<ul>\n<li>KIM이 배송지 정보를 수정(PUSAN > SEOUL)한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http PATCH :8081/orders/{order-id} address=SEOUL</code></pre>\n<ul>\n<li>KIM이 주문을 삭제한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http DELETE :8081/orders/{order-id}</code></pre>\n<ul>\n<li>'주문수정'과 '주문취소' 메시지는 라운드로빈으로 각각 다른 파티션에 저장된다. </li>\n<li>배송 서비스는 각 매칭된 파티션으로부터 이벤트를 수신하여 동시성 처리가 일어난다.</li>\n<li>이때, 한 배송 서비스가 '주문수정' 이벤트를 수신하여 딜레이(10초)만큼 대기하는 동안에,</li>\n<li>다른 배송 서비스가 '주문취소' 이벤트를 수신하여 해당 배송정보를 먼저 삭제 처리해 버린다.</li>\n<li>이는 곧, 고객에 의해 삭제 처리된 배송정보에 대해 배송수정 로직을 적용하는 모순이 벌어지게 된다. </li>\n<li>카프카 컨슈머로 토픽을 조회해 보자.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">./kafka-console-consumer --bootstrap-server localhost:9092 --topic kafka.scaling --from-beginning</code></pre>\n<ul>\n<li>'DeliveryCancelled' 이벤트가 'DeliveryModified' 이벤트보다 먼저 카프카에 퍼블리시 되었다. </li>\n<li>데이터베이스를 조회해 보자.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">select * from Delivery_table;</code></pre>\n<ul>\n<li>삭제되어야 할 배송정보가 수정된 채로 조회되고 있으며, 이는 메시지 처리 순서상 문제가 발생했음을 알 수 있다. </li>\n</ul>\n<h2 id=\"2-처리순서가-보장되는-메시징\"><a href=\"#2-%EC%B2%98%EB%A6%AC%EC%88%9C%EC%84%9C%EA%B0%80-%EB%B3%B4%EC%9E%A5%EB%90%98%EB%8A%94-%EB%A9%94%EC%8B%9C%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 처리순서가 보장되는 메시징</h2>\n<h3 id=\"동일한-주문이-동일-파티션에-적재되는-경우\"><a href=\"#%EB%8F%99%EC%9D%BC%ED%95%9C-%EC%A3%BC%EB%AC%B8%EC%9D%B4-%EB%8F%99%EC%9D%BC-%ED%8C%8C%ED%8B%B0%EC%85%98%EC%97%90-%EC%A0%81%EC%9E%AC%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동일한 주문이 동일 파티션에 적재되는 경우,</h3>\n<ul>\n<li>멀티 파티션, 멀티 컨슈머 환경에서 처리순서가 보장되려면, 키(Key)와 함께 이벤트를 퍼블리시 한다.</li>\n<li>카프카 파티셔너는 동일한 키에 대해 동일 파티션에 이벤트를 적재해 준다.</li>\n<li>이를 적용해 보자.</li>\n<li>주문 서비스에서 Order id를 메시지 키로 하여 퍼블리시 되도록 Key를 추가한다.</li>\n<li>Order > Order.java 포트 메소드에서 아래대로 수정한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># 34,40,49 line modify\norderPlaced.publishAfterCommit(getId());</code></pre>\n<ul>\n<li>아래 코드를 복사하여 Order > AbstractEvent.java 62라인에 추가한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public void publish(String messageKey) {\n        /**\n         * spring streams 방식\n         */\n        KafkaProcessor processor = OrderApplication.applicationContext.getBean(\n            KafkaProcessor.class\n        );\n        MessageChannel outputChannel = processor.outboundTopic();\n \n        outputChannel.send(\n            MessageBuilder\n                .withPayload(this)\n                .setHeader(\n                    MessageHeaders.CONTENT_TYPE,\n                    MimeTypeUtils.APPLICATION_JSON\n                )\n                .setHeader(&quot;type&quot;, getEventType())\n                .setHeader(KafkaHeaders.MESSAGE_KEY, messageKey.getBytes())\n                .build()\n        );\n    }\n\n    public void publishAfterCommit(Long messageKey) {\n        TransactionSynchronizationManager.registerSynchronization(\n            new TransactionSynchronizationAdapter() {\n                @Override\n                public void afterCompletion(int status) {\n                    AbstractEvent.this.publish(String.valueOf(messageKey));\n                }\n            }\n        );\n    }</code></pre>\n<ul>\n<li>주문서비스를 재시작한다. </li>\n<li>KIM(id: 2000)이 주문을 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders customerId=2000 productId=100 productName=RADIO qty=3 address=PUSAN</code></pre>\n<ul>\n<li>KIM이 배송지 정보를 수정(PUSAN > SEOUL)한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http PATCH :8081/orders/{order-id} address=SEOUL</code></pre>\n<ul>\n<li>KIM이 주문을 삭제한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http DELETE :8081/orders/{order-id}</code></pre>\n<ul>\n<li>카프카 컨슈머로 토픽을 조회해 보자.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">./kafka-console-consumer --bootstrap-server localhost:9092 --topic kafka.scaling --from-beginning</code></pre>\n<ul>\n<li>'배송수정' 이벤트에 이어 '배송취소' 이벤트가 순서에 맞게 퍼블리시 되었다. </li>\n<li>데이터베이스를 조회해 보자.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">select * from Delivery_table;</code></pre>\n<ul>\n<li>최종 상태인 배송취소('DELIVERY CANCELLED') 상태가 조회된다.</li>\n</ul>\n<ul>\n<li>주문수정과 주문취소가 (Key 설정으로) 동일한 파티션으로 퍼블리쉬 되었다. </li>\n<li>해당 파티션에 매칭된 배송 서비스가 순서대로 처리해 처리순서가 보장됨을 알 수 있다.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Kafka scaling & Concurrenty handling","anchor":"#kafka-scaling--concurrenty-handling"},{"depth":2,"value":"Kafka 메시지 동시성 처리","anchor":"#kafka-메시지-동시성-처리"},{"depth":3,"value":"주문, 배송서비스 실행","anchor":"#주문-배송서비스-실행"},{"depth":2,"value":"Test - 싱글 파티션, 싱글 컨슈머 환경","anchor":"#test---싱글-파티션-싱글-컨슈머-환경"},{"depth":2,"value":"Test - 멀티 파티션, 멀티 컨슈머 환경","anchor":"#test---멀티-파티션-멀티-컨슈머-환경"},{"depth":2,"value":"1. 처리순서가 지켜지지 않는 메시징","anchor":"#1-처리순서가-지켜지지-않는-메시징"},{"depth":3,"value":"동일한 주문이 여러 파티션에 랜덤하게 적재되는 경우,","anchor":"#동일한-주문이-여러-파티션에-랜덤하게-적재되는-경우"},{"depth":2,"value":"2. 처리순서가 보장되는 메시징","anchor":"#2-처리순서가-보장되는-메시징"},{"depth":3,"value":"동일한 주문이 동일 파티션에 적재되는 경우,","anchor":"#동일한-주문이-동일-파티션에-적재되는-경우"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}