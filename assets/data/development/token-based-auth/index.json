{"hash":"2fab052f0bad860b581c456e67dba81b7650fa45","data":{"markdownPage":{"id":"6e72743611a8c175cb47001816904f5e","title":"JWT Token 기반 인증 인가","description":"","path":"/development/token-based-auth/","timeToRead":3,"content":"<h1 id=\"jwt-token-기반-인증-인가\"><a href=\"#jwt-token-%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D-%EC%9D%B8%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT Token 기반 인증 인가</h1>\n<h3 id=\"jwt-토큰기반-인증-w-keycloak\"><a href=\"#jwt-%ED%86%A0%ED%81%B0%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D-w-keycloak\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT 토큰기반 인증 w/ Keycloak</h3>\n<h4 id=\"oauth2-stackholders\"><a href=\"#oauth2-stackholders\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Stackholders</h4>\n<ul>\n<li>Spring Security와 Spring oauth2를 사용하고, Resource Owner, Client, Authorization Server, Resource Server간의 인증/인가를 실습한다.</li>\n<li>여기서 Resouce란 Gateway를 경유하는 Rest APIs를 말한다. </li>\n<li>JWT기반 Access_Token을 활용한다.</li>\n<li>이번 랩에서는 Gateway를 Client와 Resource Server 역할로 설정한다. </li>\n<li>인증/인가 서버로 Standalone Keycloak(<a href=\"https://www.keycloak.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.keycloak.org/</a>) 서버를 활용한다.</li>\n</ul>\n<h4 id=\"oauth2-인증인가keycloak-endpoint-설정\"><a href=\"#oauth2-%EC%9D%B8%EC%A6%9D%EC%9D%B8%EA%B0%80keycloak-endpoint-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 인증/인가(Keycloak) Endpoint 설정</h4>\n<p>본 예제의 디렉토리로 이동한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\"> cd token-based-auth-Keycloak/</code></pre>\n<ul>\n<li>Gateway 서비스의 application.yml 파일을 열어본다.</li>\n<li>인증/인가를 위한 Authorization Sever의 Endpoint가 등록된다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">oauth2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">my-keycloak-provider</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">issuer-uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8080/realms/my_realm</code></pre>\n<ul>\n<li>KeyCloak에 등록된 Client(Gateway)의 Credential정보(client-id, client-secret)가 설정된다.</li>\n<li>OAuth2의 Grant Type을 password 방식으로 설정한다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">keycloak-spring-gateway-client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>keycloak<span class=\"token punctuation\">-</span>provider\n    <span class=\"token key atrule\">client-id</span><span class=\"token punctuation\">:</span> my_client\n    <span class=\"token key atrule\">client-secret</span><span class=\"token punctuation\">:</span> HKFKYP7kb8OMldAgfvnk27FhRPOv8Y7H\n    <span class=\"token key atrule\">authorization-grant-type</span><span class=\"token punctuation\">:</span> password</code></pre>\n<h4 id=\"oauth2-security-상세설정\"><a href=\"#oauth2-security-%EC%83%81%EC%84%B8%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Security 상세설정</h4>\n<ul>\n<li>Gateway 서비스의 SecurityConfig.java 파일을 열어본다.</li>\n<li>spring-cloud-gateway 는 webflux로 기동되기 때문에 @EnableWebFluxSecurity를 적용한다.</li>\n<li>ServerHttpSecurity에  리소스별  접근제어목록(ACL)을 기술한다.</li>\n<li>.oauth2Login() OAuth2의 디폴트 로그인 설정이 적용된다.</li>\n<li>.oauth2ResourceServer() 리소스서버 역할을 부여하고 jwt 형식의 Authorization을 지정한다.</li>\n</ul>\n<h4 id=\"서비스-구동\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 구동</h4>\n<ul>\n<li>먼저 Keycloak 서버를 구동한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> keycloak/bin\n<span class=\"token function\">chmod</span> <span class=\"token number\">744</span> kc.sh\n./kc.sh start-dev</code></pre>\n<ul>\n<li>keycloak 서버의 default 포트인 8080으로 실행된다.</li>\n<li>Gateway, Order 서비스를 구동한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> gateway\nmvn spring-boot:run\n<span class=\"token builtin class-name\">cd</span> order\nmvn spring-boot:run</code></pre>\n<ul>\n<li>각각 8088, 8081 포트로 기동된다.</li>\n</ul>\n<h4 id=\"protected-리소스-접근\"><a href=\"#protected-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%91%EA%B7%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Protected 리소스 접근</h4>\n<ul>\n<li>Security ACL설정(SecurityConfig.java)에 따라 Gateway 서버 및 주문서비스에 접근해 본다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http http://localhost:8088\nhttp http://localhost:8088/orders</code></pre>\n<ul>\n<li>JWT인증 토큰이 없어 401(Unauthorized) 접근오류 응답이 내려온다.</li>\n<li>이제는 허가된 리소스에 접근해 본다. (gateway > TestController.java)</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http http://localhost:8088/test/permitAll</code></pre>\n<ul>\n<li>접근 가능하다. </li>\n</ul>\n<h4 id=\"jwt-access_token-발급\"><a href=\"#jwt-access_token-%EB%B0%9C%EA%B8%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT access_token 발급</h4>\n<ul>\n<li>Keycloak의 인증/인가 Endpoint에 토큰을 요청한다.</li>\n<li>\n<p>OAuth2의 'password' Grant type으로 Keycloak에 기 등록된 Client 크리덴셜과 사용자 정보를 제출한다.</p>\n<blockquote>\n<p>'password' Grant type은 Client(Gateway)의 로그인 Form으로 제출받은 사용자 정보를 인증서버에 Posting하는 방식이다.</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"http://localhost:8080/realms/my_realm/protocol/openid-connect/token\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--header</span> <span class=\"token string\">\"Content-Type: application/x-www-form-urlencoded\"</span> <span class=\"token punctuation\">\\</span>\n--data-urlencode <span class=\"token string\">\"grant_type=password\"</span> <span class=\"token punctuation\">\\</span>\n--data-urlencode <span class=\"token string\">\"client_id=my_client\"</span> <span class=\"token punctuation\">\\</span>\n--data-urlencode <span class=\"token string\">\"client_secret=HKFKYP7kb8OMldAgfvnk27FhRPOv8Y7H\"</span> <span class=\"token punctuation\">\\</span>\n--data-urlencode <span class=\"token string\">\"username=user@uengine.org\"</span> <span class=\"token punctuation\">\\</span>\n--data-urlencode <span class=\"token string\">\"password=1\"</span> </code></pre>\n<ul>\n<li>응답으로 access_token과 refresh_token이 내려온다.</li>\n<li>\n<p>출력된 access_token을 복사하여 <a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://jwt.io/</a> 페이지에 접속 후 decode해 본다.</p>\n<blockquote>\n<p>Header, Payload, Signature로 파싱된다.\t</p>\n</blockquote>\n</li>\n<li>user@uengine.org 계정이 가진 Role은 ROLE_USER임을 확인한다.</li>\n</ul>\n<h4 id=\"access_token으로-protected-리소스-접근\"><a href=\"#access_token%EC%9C%BC%EB%A1%9C-protected-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%91%EA%B7%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>access_token으로 Protected 리소스 접근</h4>\n<ul>\n<li>access_token을 복사하여 Request Header에 넣어 Protected 리소스에 접근한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">access_token</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>ACCESS_TOKEN<span class=\"token punctuation\">]</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$access_token</span>\nhttp localhost:8088/orders <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$access_token</span>\"</span>\nhttp localhost:8088/test/user <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$access_token</span>\"</span>\nhttp localhost:8088/test/authenticated <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$access_token</span>\"</span>\nhttp localhost:8088/test/admin <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$access_token</span>\"</span></code></pre>\n<ul>\n<li>'/test/admin' 리소스는 권한이 불충분(403 Fobidden)하여 접근할 수 없다.</li>\n<li>관리자 권한이 있는 계정으로 다시 한번 토큰을 요청한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"http://localhost:8080/realms/my_realm/protocol/openid-connect/token\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--header</span> <span class=\"token string\">\"Content-Type: application/x-www-form-urlencoded\"</span> <span class=\"token punctuation\">\\</span>\n--data-urlencode <span class=\"token string\">\"grant_type=password\"</span> <span class=\"token punctuation\">\\</span>\n--data-urlencode <span class=\"token string\">\"client_id=my_client\"</span> <span class=\"token punctuation\">\\</span>\n--data-urlencode <span class=\"token string\">\"client_secret=HKFKYP7kb8OMldAgfvnk27FhRPOv8Y7H\"</span> <span class=\"token punctuation\">\\</span>\n--data-urlencode <span class=\"token string\">\"username=admin@uengine.org\"</span> <span class=\"token punctuation\">\\</span>\n--data-urlencode <span class=\"token string\">\"password=1\"</span> </code></pre>\n<ul>\n<li>access_token을 복사하여 Request Header에 넣어 Protected 리소스에 접근한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">access_token</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>ACCESS_TOKEN<span class=\"token punctuation\">]</span>\nhttp localhost:8088/test/admin <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$access_token</span>\"</span></code></pre>\n<ul>\n<li>정상적으로 접근이 가능하다.</li>\n</ul>\n<h4 id=\"wrap-up\"><a href=\"#wrap-up\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wrap up</h4>\n<ul>\n<li>Gateway가 리소스서버 역할까지 수행하므로 각 마이크로서비스 리소스들의 Fine grained한 접근제어를 Gateway에서 관리</li>\n<li>이로 인해 ACL 정보 가독성이 떨어지거나, ACL 오류발생 시 잠재적 분쟁 소지</li>\n<li>MSA별 Autonomous ACL 관리책임 분산을 위해 인증 및 인가를 분리하는 정책 권고</li>\n<li>Gateway는 인증을 포함한 Coarse grained ACL Policy를 담당하고, 각 MSA에서 Fine grained한 ACL Policy 적용</li>\n</ul>\n<h4 id=\"service-clear\"><a href=\"#service-clear\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Clear</h4>\n<ul>\n<li>다음 Lab을 위해 기동된 모든 서비스 종료</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8080/tcp\nfuser -k 8081/tcp\nfuser -k 8088/tcp</code></pre>\n<h4 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h4>\n<div style=\"position: relative; padding-bottom: 56.25%; padding-top: 0px; height: 0; overflow: hidden;\">\n\t<iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" \n        src=\"https://www.youtube.com/embed/dsUW_JTvqIA\" \n        frameborder=\"0\" crolling=\"no\" frameborder=\"none\" allowfullscreen=\"\">\n    </iframe>\n</div>\n<br>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"JWT Token 기반 인증 인가","anchor":"#jwt-token-기반-인증-인가"},{"depth":3,"value":"JWT 토큰기반 인증 w/ Keycloak","anchor":"#jwt-토큰기반-인증-w-keycloak"},{"depth":4,"value":"OAuth2 Stackholders","anchor":"#oauth2-stackholders"},{"depth":4,"value":"OAuth2 인증/인가(Keycloak) Endpoint 설정","anchor":"#oauth2-인증인가keycloak-endpoint-설정"},{"depth":4,"value":"OAuth2 Security 상세설정","anchor":"#oauth2-security-상세설정"},{"depth":4,"value":"서비스 구동","anchor":"#서비스-구동"},{"depth":4,"value":"Protected 리소스 접근","anchor":"#protected-리소스-접근"},{"depth":4,"value":"JWT access_token 발급","anchor":"#jwt-access_token-발급"},{"depth":4,"value":"access_token으로 Protected 리소스 접근","anchor":"#access_token으로-protected-리소스-접근"},{"depth":4,"value":"Wrap up","anchor":"#wrap-up"},{"depth":4,"value":"Service Clear","anchor":"#service-clear"},{"depth":4,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}