{"hash":"1bc339860510e64b92a3e100caa188418dc2dde5","data":{"markdownPage":{"id":"db669da7bebf77135a2f86a552ce6e85","title":"API Mock Server","description":"","path":"/toppings/test-microcks/","timeToRead":2,"content":"<h1 id=\"api-mock-server\"><a href=\"#api-mock-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>API Mock Server</h1>\n<h2 id=\"local-microservice-development-dependencies\"><a href=\"#local-microservice-development-dependencies\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Local Microservice Development Dependencies</h2>\n<p>Local Microservice Development Dependencies는 마이크로 서비스간 API 호출을 통해 테스트를 진행할 때, 대상 서비스가 실행되지 않을 때에도 Mock서버를 통해 API 호출을 가능하게 하여 테스트 작업을 수행할 때 사용할 수 있습니다.<br></p>\n<p>외부 서비스가 아닌 Mock 서버를 활용하기에 개발 초기단계에 서비스의 불안정한 상황에 영향 받지않고 테스트가 가능하며, 실제 API 호출보다 빠른 응답처리로 테스트 작업 속도가 향상되는 장점이 있습니다.</p>\n<h2 id=\"적용-방법\"><a href=\"#%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>적용 방법</h2>\n<h3 id=\"step1-모델링\"><a href=\"#step1-%EB%AA%A8%EB%8D%B8%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP1. 모델링</h3>\n<p>재고팀에 설정된 상품이 주문팀에서 발생된 주문의 수량에 따라 재고가 감소하는 시나리오를 토대로 아래와 같이 모델링을 진행합니다.\n<img src=\"https://github.com/kyusooK/lab-shop-microcks/assets/123912988/f9ee56fa-5eb0-449f-bd87-da2945e8ae53\" alt=\"image\"></p>\n<h3 id=\"step2-examples\"><a href=\"#step2-examples\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP2. EXAMPLES</h3>\n<p>Command(decreaseStock)스티커를 더블 클릭 > 우측 패널 'EXAMPLES' 클릭하면 Given-When-Then 패턴의 예제를 작성할 수 있는 다이얼로그가 나타나는 것을 확인할 수 있습니다.</p>\n<p>시나리오를 토대로 Inventory(Given)의 stock이 decreaseStock(When)에 의해서 StockDecreased(Then) 이벤트로 발행되는 예제를 아래와 같이 생성합니다.\n<img src=\"https://github.com/kyusooK/lab-shop-microcks/assets/123912988/ee5e615e-7c16-4a5e-af4e-8672dde411a8\" alt=\"image\"></p>\n<h3 id=\"step3-topping-적용\"><a href=\"#step3-topping-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP3. Topping 적용</h3>\n<p>Code > Code Preview를 클릭하여 좌측 상단에 Base: spring-boot가 선택되어 있는지 확인합니다. <br>\n*spring-boot가 아닐 경우 spring-boot 클릭 > Marketplace 클릭 > Template > Spring-boot > Apply로 spring-boot를 적용합니다. <br>\n우측 상단 Toppings > Marketplace를 클릭하여 아래와 같은 화면으로 진입합니다. <br>\n<img src=\"https://github.com/user-attachments/assets/58b2c46c-1155-4340-bbfe-8372830bbecb\"></p>\n<p>상단의  'TOPPINGS' > 'Local Microservice Development Dependencies' > Apply 클릭을 통해 토핑을 적용합니다. <br></p>\n<p>적용 후, order/infra/api를 확인하면 'openai.yaml'파일이 생성되며 'EXAMPLES'에서 작성한 given, when, then에 따른 코드가 아래와 같이 생성된것을 확인할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">paths:\n  &#39;/inventories/{id}/decreasestock&#39;:\n    summary: decrease stock operation on inventories\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  description: id of this DecreaseStock\n                  type: integer\n                qty:\n                  description: qty of this DecreaseStock\n                  type: integer\n            examples:\n              Example 0:\n                value:\n                  id: 1\n                  qty: 5\n              Example 1:\n                value:\n                  id: 2\n                  qty: 13\n      parameters:\n        - name: id\n          description: DecreaseStock name\n          schema:\n            type: integer\n          in: path\n          required: true\n          examples:\n            Example 0:\n              value: 1\n            Example 1:\n              value: 2\n      responses:\n        &#39;200&#39;:\n          content:\n            application/json:\n              schema:\n                $ref: &#39;#/components/schemas/Inventory&#39;\n              examples:\n                Example 0:\n                  value:\n                    id: 1\n                    stock: 5\n                Example 1:\n                  value:\n                    id: 2\n                    stock: 12\n          description: DecreaseStock Operation\n      operationId: DecreaseStock\n      summary: DecreaseStock\n      description: DecreaseStock</code></pre>\n<h2 id=\"실행-방법\"><a href=\"#%EC%8B%A4%ED%96%89-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실행 방법</h2>\n<h3 id=\"step1-mock서버-기동하기\"><a href=\"#step1-mock%EC%84%9C%EB%B2%84-%EA%B8%B0%EB%8F%99%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP1. Mock서버 기동하기</h3>\n<p>order서비스에서 가상의 inventory서비스를 띄운 상태로 작성한 Examples에 대한 테스트를 진행하기 위해서는 터미널에 다음과 같이 입력하여 inventory Mock 서버를 실행합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\ncd infra\ndocker-compose up</code></pre>\n<p>infra 폴더에 위치한 docker-compose.yml이 실행되면서 아래와 같이 8080포트의 Mock서버가 실행되는 것을 확인할 수 있습니다.</p>\n<p><img src=\"https://github.com/kyusooK/lab-shop-microcks/assets/123912988/d16962ce-b34b-40a1-974f-c79cf7e3eeeb\" alt=\"image\"></p>\n<h3 id=\"step2-mocking-test\"><a href=\"#step2-mocking-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP2. Mocking Test</h3>\n<p>Mock서버의 'APIs | Services'를 클릭하면 가상의 Mock서버가 바라보는 Inventory가 생성되어있으며, 클릭하면 아래와 같이 Inventory 서비스에서 처리하는 작업에 대해 5개의 API가 제공된 것을 확인할 수 있습니다.\n<img src=\"https://github.com/kyusooK/lab-shop-microcks/assets/123912988/61fc5428-66ad-4c96-992a-63d612914a21\" alt=\"image\"></p>\n<ul>\n<li>사전에 ExtendVerb로 정의한 'PUT/inventories/{id}/decreasestock'를 클릭하면 아래와 같이 생성했던 Examples에 대한 Mock URL과 Response 결과를 확인할 수 있습니다.\n<img src=\"https://github.com/kyusooK/lab-shop-microcks/assets/123912988/3bed6c79-7cc2-4d1d-bbe3-e062d50a3082\" alt=\"image\"></li>\n<li>예시에 있는 MockURL을 토대로 테스트를 진행하기 위해 PORTS > 8080포트 자물쇠를 Public으로 설정을 변경한 후, 아래와 같이 터미널에 입력합니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http PUT &lt;Example`s MockURL&gt; qty=5</code></pre>\n<p>응답결과 Mock서버에 나타난 Response결과와 동일하게 나오면서 예시에 대한 API 테스트가 정상적으로 이루어진 것을 확인할 수 있습니다.\n<img src=\"https://github.com/kyusooK/lab-shop-microcks/assets/123912988/7e495f52-c231-4a63-a76a-48dee42b7754\" alt=\"image\"></p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"API Mock Server","anchor":"#api-mock-server"},{"depth":2,"value":"Local Microservice Development Dependencies","anchor":"#local-microservice-development-dependencies"},{"depth":2,"value":"적용 방법","anchor":"#적용-방법"},{"depth":3,"value":"STEP1. 모델링","anchor":"#step1-모델링"},{"depth":3,"value":"STEP2. EXAMPLES","anchor":"#step2-examples"},{"depth":3,"value":"STEP3. Topping 적용","anchor":"#step3-topping-적용"},{"depth":2,"value":"실행 방법","anchor":"#실행-방법"},{"depth":3,"value":"STEP1. Mock서버 기동하기","anchor":"#step1-mock서버-기동하기"},{"depth":3,"value":"STEP2. Mocking Test","anchor":"#step2-mocking-test"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/plsql-2-java/","title":"PL/SQL to Java 자동 테스팅"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}