{"hash":"0c9b7ddc8295eed2e4b30530c2d2d8f76265ba2a","data":{"markdownPage":{"id":"f7b539f413c4534971e79b20a7e16a07","title":"Github Action","description":"","path":"/toppings/cicd-git-action/","timeToRead":2,"content":"<h1 id=\"github-action\"><a href=\"#github-action\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Github Action</h1>\n<h2 id=\"ci---github-action\"><a href=\"#ci---github-action\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI - Github Action</h2>\n<p>GitHub Action은 코드 저장소에서 직접 소프트웨어 개발 워크플로우를 자동화할 수 있게 해주는 GitHub의 내장 도구이며 코드 변경사항이 push되거나 pull request가 생성될 때 자동으로 작업을 실행할 수 있습니다.</p>\n<p>GitHub Action은 CI프로세르를 구현하는데 효과적이며 여러 운영체제와 버전에서 테스트를 실행할 수 있다는 이점과 다양한 액션을 조합하여 원하는 워크플로우를 만들 수 있고, Github와의 통합으로 접근성이 용이하다는 이점이 있습니다.</p>\n<h2 id=\"적용-방법\"><a href=\"#%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>적용 방법</h2>\n<h3 id=\"step1-topping-적용\"><a href=\"#step1-topping-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP1. Topping 적용</h3>\n<p>Code > Code Preview를 클릭 > 우측 상단 Toppings > Marketplace를 클릭하여 아래와 같은 화면으로 진입합니다. <br>\n<img src=\"https://github.com/user-attachments/assets/58b2c46c-1155-4340-bbfe-8372830bbecb\"></p>\n<p>상단의  'TOPPINGS' > 'Github Action' > Apply 클릭을 통해 토핑을 적용합니다. <br></p>\n<p>적용 후 최상위 루트의 'github/workflows'를 확인하면 아래와 같은 'github-action.yml'파일이 생성된 것을 확인할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">name: github-action\nrun-name: ${{ github.actor }} is out building GitHub Actions\n\non:\n  push:\n    # Pattern matched against refs/tags\n    tags:        \n      - &#39;**&#39; \n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      \n      - name: Create and use multi-platform builder\n        run: |\n          docker buildx create --use --name builder --platform linux/amd64,linux/arm64\n          docker buildx inspect --bootstrap\n      \n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      \n      - name: Build Maven Projects\n        run: |\n\n      - name: Set lowercase names to use in tags\n        run: |\n          echo &quot;REPO_NAME=$(echo ${{ github.repository }} | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)&quot; &gt;&gt; $GITHUB_ENV\n          echo &quot;REF_NAME=$(echo ${{ github.ref_name }} | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)&quot; &gt;&gt; $GITHUB_ENV\n\n\n      - name: Update Kubernetes manifests\n        run: |\n          git config --global user.email ${{ github.actor }}@users.noreply.github.com\n          git config --global user.name &quot;${{ github.actor }}&quot;\n          git add ./kubernetes/template/template.yml\n          git commit -m &quot;Update image tag to ${{ env.REF_NAME }}&quot;\n          git push origin HEAD:main\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}</code></pre>\n<h3 id=\"step2-git-repo-생성\"><a href=\"#step2-git-repo-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP2. Git repo 생성</h3>\n<p>토핑을 적용한 상태에서 Code Preview 상단의 'push to Git' 아이콘을 클릭 > 'Create'를 진행하여 연결된 Github에 repo를 생성합니다.\n<img width=\"667\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8d8bb5a0-16d1-49e6-874d-26569d842e61\"></p>\n<h3 id=\"step3-github-action-설정\"><a href=\"#step3-github-action-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP3. Github Action 설정</h3>\n<p>생성된 repo의 github폴더 명을 다음과 같이 수정합니다. <br></p>\n<pre class=\"language-text\"><code class=\"language-text\">github -&gt; .github</code></pre>\n<p>이후, 저장소의 설정을 다음의 단계로 확인합니다.</p>\n<ol>\n<li>'Settings'을 클릭하여 해당 repo의 설정에 접근합니다.\n<img width=\"931\" alt=\"setting1\" src=\"https://github.com/sooheon45/topping-github-action/assets/54785805/4007c96b-1244-43ad-bf5c-042a114a0ba1\"></li>\n<li>좌측 메뉴 Actions > Genernal 클릭 후, Workflow permissions 항목을 확인합니다.\n<img width=\"333\" alt=\"setting2\" src=\"https://github.com/sooheon45/topping-github-action/assets/54785805/059d6d61-ee9e-41ec-8e08-1021031a18fe\"></li>\n<li>\"Read and write Permissions.\" 옵션을 선택한 후 'Sava'를 통해 설정을 완료합니다.\n<img width=\"903\" alt=\"setting3\" src=\"https://github.com/sooheon45/topping-github-action/assets/54785805/fe562497-e860-4d8b-9d5a-f189ef3dce8d\"></li>\n</ol>\n<h2 id=\"실행-방법\"><a href=\"#%EC%8B%A4%ED%96%89-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실행 방법</h2>\n<p>해당 repo의 변경사항이 발생하였을 때, commit &#x26; push를 진행한 다음 아래와 같이 Releases > 'Create a new release'를 클릭합니다.\n<img width=\"1130\" alt=\"스크린샷 2024-08-09 오후 1 42 47\" src=\"https://github.com/user-attachments/assets/323f9f4e-7b21-4983-aba0-c12c024ce874\"></p>\n<p>'Choose a tag' > 생성할 태그 (ex. v0.x) 생성 및 선택 > 'Publish release' 클릭을 통해 release를 생성합니다.</p>\n<ul>\n<li>tag생성을 하는 이유는 github-action 실행 조건을 tag 설정하였기 때문입니다.</li>\n</ul>\n<p>생성 후, 상단 'Actions'를 클릭하면 아래와 같이 Github action이 실행되는 것을 확인 할 수 있습니다.\n<img width=\"1035\" alt=\"image\" src=\"https://github.com/user-attachments/assets/d6aaa850-b874-45c9-974f-d99c404b2b3f\"></p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Github Action","anchor":"#github-action"},{"depth":2,"value":"CI - Github Action","anchor":"#ci---github-action"},{"depth":2,"value":"적용 방법","anchor":"#적용-방법"},{"depth":3,"value":"STEP1. Topping 적용","anchor":"#step1-topping-적용"},{"depth":3,"value":"STEP2. Git repo 생성","anchor":"#step2-git-repo-생성"},{"depth":3,"value":"STEP3. Github Action 설정","anchor":"#step3-github-action-설정"},{"depth":2,"value":"실행 방법","anchor":"#실행-방법"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/wireframe-generate/","title":"모델 기반 바이브코딩을 통한 프론트엔드 구현"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/ddl-to-eventstorming2/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}