{"hash":"4a9dd111f9f2d73a5ca10231c364dc0f850a73b9","data":{"markdownPage":{"id":"a8639f2fd47b7f6d6a51af5c3d1bead9","title":"Contract Test (비동기호출)","description":"","path":"/toppings/test-messaging/","timeToRead":2,"content":"<h1 id=\"contract-test-비동기호출\"><a href=\"#contract-test-%EB%B9%84%EB%8F%99%EA%B8%B0%ED%98%B8%EC%B6%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Contract Test (비동기호출)</h1>\n<h2 id=\"consumer-driven-contract-test\"><a href=\"#consumer-driven-contract-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Consumer Driven Contract Test</h2>\n<p>Contract Test는 분산된 마이크로서비스간 테스트를 진행할 때, Consumer측에서 상호간의 계약서를 토대로 테스트를 진행하여 API의 일관성을 유지하며 테스트를 진행하는 방법입니다. <br></p>\n<p>계약서를 토대로 테스트가 진행됨에 따라 분산환경에서 개발상의 통신 오류 발생이 감소하고 문서화되어 상호간 테스트에 대한 이해력이 높아진다는 장점이 있습니다.</p>\n<h2 id=\"적용-방법\"><a href=\"#%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>적용 방법</h2>\n<h3 id=\"step1-모델링\"><a href=\"#step1-%EB%AA%A8%EB%8D%B8%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP1. 모델링</h3>\n<p>Provider의 Biz 로직이 Message Broker에 이벤트를 제대로 Pubish하는지 테스트 하기 위해 아래와 같이 모델링을 진행합니다.\n<img width=\"823\" alt=\"image\" src=\"https://github.com/user-attachments/assets/fadc46cf-6105-41d0-8402-6eaeb8d824e3\"></p>\n<h3 id=\"step2-examples\"><a href=\"#step2-examples\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP2. EXAMPLES</h3>\n<p>시나리오를 토대로 Inventory(Given) stock이 OrderPlaced(When)에 의해서 StockDecreased(Then) 이벤트로 발행되는 예제를 아래와 같이 생성합니다.\n<img src=\"https://github.com/msa-ez/topping-cdc-test/assets/123912988/e25607cd-f232-4cde-bda8-bbaa7db5286b\" alt=\"image\"></p>\n<h3 id=\"step3-topping-적용\"><a href=\"#step3-topping-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP3. Topping 적용</h3>\n<p>Code > Code Preview를 클릭하여 좌측 상단에 Base: spring-boot가 선택되어 있는지 확인합니다. <br>\n*spring-boot가 아닐 경우 spring-boot 클릭 > Marketplace 클릭 > Template > Spring-boot > Apply로 spring-boot를 적용합니다. <br>\n우측 상단 Toppings > Marketplace를 클릭하여 아래와 같은 화면으로 진입합니다. <br>\n<img src=\"https://github.com/user-attachments/assets/58b2c46c-1155-4340-bbfe-8372830bbecb\"></p>\n<p>상단의  'TOPPINGS' > 'Contract Test' > Apply 클릭을 통해 토핑을 적용합니다. <br></p>\n<p>적용 후, 주문 서비스 최상위루트에 생성된 getInventory.groovy를 확인하면 Provider측에 제공할 계약서가 아래와 같이 생성된것을 확인할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">package contracts.messaging\nimport org.springframework.cloud.contract.spec.Contract\n\nContract.make {\n    // The Identifier which can be used to identify it later.\n    label &#39;OrderPlaced&#39;\n    input {\n        // Contract will be triggered by the following method.\n        triggeredBy(&#39;orderPlaced()&#39;)\n    }\n    outputMessage {\n        sentTo &#39;eventTopic&#39;\n        // Consumer Expected Payload spec. that a JSON message must have, \n        // If the Producer-side test is OK, then send the following msg to event-out channel.\n        body(\n            eventType: &quot;OrderPlaced&quot;,\n                id: 1,\n                customerId: &quot;1&quot;,\n                productId: &quot;1&quot;,\n                productName: &quot;TV&quot;,\n                qty: 5,\n        )\n        bodyMatchers {\n            jsonPath(&#39;$.id&#39;, byRegex(nonEmpty()).asLong())\n            jsonPath(&#39;$.customerId&#39;, byRegex(nonEmpty()).asString())\n            jsonPath(&#39;$.productId&#39;, byRegex(nonEmpty()).asString())\n            jsonPath(&#39;$.productName&#39;, byRegex(nonEmpty()).asString())\n            jsonPath(&#39;$.qty&#39;, byRegex(nonEmpty()).asInteger())\n        }\n        headers {\n            messagingContentType(applicationJson())\n        }\n    }\n}</code></pre>\n<h2 id=\"실행-방법\"><a href=\"#%EC%8B%A4%ED%96%89-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실행 방법</h2>\n<h3 id=\"step1-계약-체결-및-테스트-실행\"><a href=\"#step1-%EA%B3%84%EC%95%BD-%EC%B2%B4%EA%B2%B0-%EB%B0%8F-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP1. 계약 체결 및 테스트 실행</h3>\n<p>Consumer인 inventory에 생성된 contract계약서를 Provider인 order에 제공하기 위해, order 서비스의 test/resources/contracts/messaging 폴더에 복사를 진행합니다. <br></p>\n<p>복사 후, Provider측에서 다음과 같이 명령어를 입력하여 배포를 위한 빌드 테스트를 진행합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nmvn clean test</code></pre>\n<p>주문서비스 로직실행 결과 도메인 이벤트가 정상적으로 퍼블리쉬하면서 테스트가 성공적으로 실행된다.\n<img src=\"https://github.com/msa-ez/topping-cdc-test/assets/123912988/a95ac124-3055-442c-b38c-f1c6ab73f5d7\" alt=\"image\"></p>\n<p>Test가 성공하여 주문팀과 상품팀이 계약한 Contract를 Provider인 주문팀이 Contract를 준수하고 있음을 확인할 수 있습니다.</p>\n<p>테스트 후, stub 파일을 제공하기 위해 order서비스에서 다음과 같은 명령어를 입력하여 stub 파일을 Maven 라이브러리에 배포합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">mvn install</code></pre>\n<h3 id=\"step2-consumer-테스트-실행\"><a href=\"#step2-consumer-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP2. Consumer 테스트 실행</h3>\n<p>order 서비스의 테스트를 통해 생성된 stub 파일을 갖고 상품 컨슈머의 최종 테스트를 수행합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">cd inventory\nmvn clean test</code></pre>\n<p>테스트가 성공적으로 수행되었음을 확인할 수 있습니다.\n<img src=\"https://github.com/msa-ez/topping-cdc-test/assets/123912988/5cb3539e-5981-48ee-93de-66f8de1713a8\" alt=\"image\"></p>\n<p>이와 같이 상품서비스가 참조하는 주문 서버가 현행화되어 Consumer인 상품서비스에서도 Contract를 준수하고 있음을 확인할 수 있습니다.</p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Contract Test (비동기호출)","anchor":"#contract-test-비동기호출"},{"depth":2,"value":"Consumer Driven Contract Test","anchor":"#consumer-driven-contract-test"},{"depth":2,"value":"적용 방법","anchor":"#적용-방법"},{"depth":3,"value":"STEP1. 모델링","anchor":"#step1-모델링"},{"depth":3,"value":"STEP2. EXAMPLES","anchor":"#step2-examples"},{"depth":3,"value":"STEP3. Topping 적용","anchor":"#step3-topping-적용"},{"depth":2,"value":"실행 방법","anchor":"#실행-방법"},{"depth":3,"value":"STEP1. 계약 체결 및 테스트 실행","anchor":"#step1-계약-체결-및-테스트-실행"},{"depth":3,"value":"STEP2. Consumer 테스트 실행","anchor":"#step2-consumer-테스트-실행"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/wireframe-generate/","title":"모델 기반 바이브코딩을 통한 프론트엔드 구현"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/ddl-to-eventstorming2/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}