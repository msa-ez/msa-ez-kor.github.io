{"hash":"dbe4667f391ffaebd2e2f88ca0e25610f527c243","data":{"markdownPage":{"id":"cd3afd9f1c16c868b72f56d5397050a5","title":"Argo","description":"","path":"/toppings/cicd-argo/","timeToRead":2,"content":"<h1 id=\"argo\"><a href=\"#argo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo</h1>\n<h2 id=\"cd---argo\"><a href=\"#cd---argo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CD - Argo</h2>\n<p>Argo CD는 Kubernetes를 위한 선언적이고 GitOps 기반의 지속적 배포(CD) 도구입니다. Git 저장소에 정의된 애플리케이션의 원하는 상태를 Kubernetes 클러스터의 실제 상태와 자동으로 동기화합니다.</p>\n<p>Argo CD는 Git 저장소의 변경사항을 감지하고 자동으로 클러스터에 적용하며 롤백 및 배포 이력 추적에 용이하다는 이점이 있습니다.</p>\n<h2 id=\"적용-방법\"><a href=\"#%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>적용 방법</h2>\n<p>Code > Code Preview를 클릭 > 우측 상단 Toppings > Marketplace를 클릭하여 아래와 같은 화면으로 진입합니다. <br>\n<img src=\"https://github.com/user-attachments/assets/58b2c46c-1155-4340-bbfe-8372830bbecb\"></p>\n<p>상단의  'TOPPINGS' > 'Argo' > Apply 클릭을 통해 토핑을 적용합니다. <br></p>\n<p>적용 후 최상위 루트의 'kubernetes/template'를 확인하면 Argo 자동 배포를 위한 'istom.yml'파일이 생성된 것을 확인할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: &quot;networking.istio.io/v1alpha3&quot;\nkind: &quot;Gateway&quot;\nmetadata: \n  name: untitled\nspec: \n  selector: \n    istio: &quot;ingressgateway&quot;\n  servers: \n    - \n      port: \n        number: 80\n        name: &quot;http&quot;\n        protocol: &quot;HTTP&quot;\n      hosts: \n        - &quot;*&quot;\n---\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: rollout-order\nspec:\n  replicas: 5\n  strategy:\n    canary:\n      trafficRouting:\n        istio:\n          virtualService: \n            name: vsvc-order        # required\n            routes:\n            - primary                 # required\n          destinationRule:\n            name: destrule-order    # required\n            canarySubsetName: canary  # required\n            stableSubsetName: stable  # required\n      steps:\n      - setWeight: 5\n      - pause:\n          duration: 10s\n      - setWeight: 20\n      - pause:\n          duration: 10s\n      - setWeight: 40\n      - pause:\n          duration: 10s\n      - setWeight: 60\n      - pause:\n          duration: 10s\n      - setWeight: 80\n      - pause:\n          duration: 10s\n  revisionHistoryLimit: 2\n  selector:\n    matchLabels:\n      app: order\n  template:\n    metadata:\n      labels:\n        app: order\n    spec:\n      containers:\n      - name: order\n        image: &quot;userid/order:version&quot;\n        ports:\n        - name: http\n          containerPort: 80\n          protocol: TCP\n        resources:\n          requests:\n            memory: 32Mi\n            cpu: 5m\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: vsvc-order\nspec:\n  gateways:\n  - untitled\n  hosts:\n  - &quot;*&quot;\n  http:\n  - name: primary       # referenced in canary.trafficRouting.istio.virtualService.routes\n    match: \n    - uri: \n        exact: &quot;/orders&quot;\n    rewrite:\n      uri: &quot;/&quot;\n    route:\n    - destination:\n        host: order\n        subset: stable  # referenced in canary.trafficRouting.istio.destinationRule.stableSubsetName\n      weight: 100\n    - destination:\n        host: order\n        subset: canary  # referenced in canary.trafficRouting.istio.destinationRule.canarySubsetName\n      weight: 0</code></pre>\n<h2 id=\"실행-방법\"><a href=\"#%EC%8B%A4%ED%96%89-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실행 방법</h2>\n<h3 id=\"step1-agro-cd-설치-및-접속\"><a href=\"#step1-agro-cd-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%A0%91%EC%86%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP1. Agro CD 설치 및 접속</h3>\n<p>터미널에 입력하여 Argo CD를 클러스터에 설치합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</code></pre>\n<p>Agro CD UI에 접속하기 위해 LoadBalancer로 전환합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl patch svc argocd-server -n argocd -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;\nkubectl get svc argocd-server -n argocd\n&lt;External IP&gt;:80로 접속</code></pre>\n<p>Secret password를 얻기 위해 다음의 명령어를 입력한 후, 결과값을 pwd에 입력하여 로그인을 진행합니다. <br>\n(id: admin / pwd: secret password)</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&quot;{.data.password}&quot; | base64 -d</code></pre>\n<ul>\n<li>로그인에 성공하면 아래와 같은 화면을 확인할 수 있습니다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/00719984-5f28-4aab-adc7-11af7769099b\" alt=\"argo-main\"></li>\n</ul>\n<h3 id=\"step2-argo-cd-gitops-설정\"><a href=\"#step2-argo-cd-gitops-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP2. Argo CD GitOps 설정</h3>\n<p>상단에 보여지는 'NEW APP'을 클릭하여 애플리케이션을 등록합니다.</p>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/new-app.png\"></p>\n<p>Guestbook 어플리케이션을 아래처럼 생성합니다.</p>\n<ul>\n<li>Application Name에는 'argocd'을, Project에는 'default'를 입력. </li>\n<li>SYNC Option에서 'AUTO-CREATE NAMESPACE'에 체크.\n<img width=\"1046\" alt=\"image\" src=\"https://github.com/user-attachments/assets/72bdc714-d7d7-48a9-8394-9105da477ad8\"></li>\n</ul>\n<ul>\n<li>내 계정으로 복제된 application 의 Git 주소를 argo 에 등록합니다.</li>\n<li>Repository URL에는 Git repo url을, Path에는 istio.yml의 파일 경로를 입력합니다.</li>\n</ul>\n<img width=\"1030\" alt=\"image\" src=\"https://github.com/user-attachments/assets/6e90054e-27f9-4021-a2ea-b4cca4734468\">\n<p>배포될 타겟 클러스터를 지정한 후, CREATE를 클릭하여 설정을 저장합니다.</p>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/destination.png\"></p>\n<p>이후, 생성된 Application 상단의 'SYNC' 버튼을 눌러 istio.yml에 있는 배포스펙과 함께 배포 및 모니터링을 진행할 수 있습니다.</p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Argo","anchor":"#argo"},{"depth":2,"value":"CD - Argo","anchor":"#cd---argo"},{"depth":2,"value":"적용 방법","anchor":"#적용-방법"},{"depth":2,"value":"실행 방법","anchor":"#실행-방법"},{"depth":3,"value":"STEP1. Agro CD 설치 및 접속","anchor":"#step1-agro-cd-설치-및-접속"},{"depth":3,"value":"STEP2. Argo CD GitOps 설정","anchor":"#step2-argo-cd-gitops-설정"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/tool/plsql-2-java/","title":"PL/SQL to Java 자동 테스팅"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}