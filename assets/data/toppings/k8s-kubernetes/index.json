{"hash":"dab75dae6b4e6632bb15138b603988f0d7678a61","data":{"markdownPage":{"id":"32f95e24d00473fbcf8495e7e08bea9b","title":"Kubernetes","description":"","path":"/toppings/k8s-kubernetes/","timeToRead":2,"content":"<h1 id=\"kubernetes\"><a href=\"#kubernetes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kubernetes</h1>\n<p>Kubernetes는 컨테이너화된 애플리케이션의 배포, 확장 및 관리를 자동화하는 오픈소스 컨테이너 오케스트레이션 플랫폼이며, 자동 배포 및 롤백, 서비스 디스커버리와 로드 밸런싱, 자동 스케일링 및 치유 등의 기능을 사용할 수 있습니다.</p>\n<p>중단 없는 운영을 통한 높은 가용성과 확장성을 지니며 확장 및 축소에 용이하고 효율적인 리소스 사용에 이점을 보이고 있습니다.</p>\n<h2 id=\"적용-방법\"><a href=\"#%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>적용 방법</h2>\n<h3 id=\"step1-kubernetes-모델링-확인\"><a href=\"#step1-kubernetes-%EB%AA%A8%EB%8D%B8%EB%A7%81-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP1. Kubernetes 모델링 확인</h3>\n<p>모델링 상단의 kubernetes아이콘을 클릭하여 모델링 페이지로 진입합니다.\n<img src=\"https://github.com/user-attachments/assets/5595603d-3983-41fe-91eb-0211afc2baf1\" alt=\"image\"></p>\n<p>진입하면 아래와 같이 좌측에는 모델링을 통해 생성된 Kubernetes 배포 모델링이, 우측에는 특정 모델 스티커에 선언된 배포스펙을 확인할 수 있으며 수정 및 삭제를 통해 배포스펙을 수정할 수 있습니다.\n<img width=\"800\" alt=\"image\" src=\"https://github.com/user-attachments/assets/0f410e0e-1a71-41ef-a4e4-448fb810fc17\"></p>\n<h3 id=\"step2-topping-적용\"><a href=\"#step2-topping-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP2. Topping 적용</h3>\n<p>Code > Code Preview를 클릭하여 코드 프리뷰 화면에 진입합니다. <br>\n우측 상단 Toppings > Marketplace를 클릭하여 아래와 같은 화면으로 진입합니다. <br>\n<img src=\"https://github.com/user-attachments/assets/58b2c46c-1155-4340-bbfe-8372830bbecb\"></p>\n<p>상단의  'TOPPINGS' > 'IsVanillaK8s' > Apply 클릭을 통해 토핑을 적용합니다. <br></p>\n<p>적용 후 최상위 루트에 위치한 'kubernetes/template'에 'template.yml'파일이 생성되며 아래와 같이 진행한 모델링에 대한 베포 스펙을 확인할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: &quot;apps/v1&quot;\nkind: &quot;Deployment&quot;\nmetadata: \n  name: &quot;order&quot;\n  labels: \n    app: &quot;order&quot;\n  namespace: &quot;&quot;\n  annotations: \n    msaez.io/x: &quot;775&quot;\n    msaez.io/y: &quot;556&quot;\nspec: \n  selector: \n    matchLabels: \n      app: &quot;order&quot;\n  replicas: 1\n  template: \n    metadata: \n      labels: \n        app: &quot;order&quot;\n    spec: \n      containers: \n        - \n          name: &quot;order&quot;\n          image: &quot;ghcr.io/undefined&quot;\n          ports: \n            - \n              containerPort: 8080\n          readinessProbe: \n            httpGet: \n              path: &quot;/actuator/health&quot;\n              port: 8080\n            initialDelaySeconds: 10\n            timeoutSeconds: 2\n            periodSeconds: 5\n            failureThreshold: 10\n          livenessProbe: \n            httpGet: \n              path: &quot;/actuator/health&quot;\n              port: 8080\n            initialDelaySeconds: 120\n            timeoutSeconds: 2\n            periodSeconds: 5\n            failureThreshold: 5\n---\n\napiVersion: &quot;apps/v1&quot;\nkind: &quot;Deployment&quot;\nmetadata: \n  name: &quot;inventory&quot;\n  labels: \n    app: &quot;inventory&quot;\n  namespace: &quot;&quot;\n  annotations: \n    msaez.io/x: &quot;775&quot;\n    msaez.io/y: &quot;556&quot;\nspec: \n  selector: \n    matchLabels: \n      app: &quot;inventory&quot;\n  replicas: 1\n  template: \n    metadata: \n      labels: \n        app: &quot;inventory&quot;\n    spec: \n      containers: \n        - \n          name: &quot;inventory&quot;\n          image: &quot;ghcr.io/undefined&quot;\n          ports: \n            - \n              containerPort: 8080\n          readinessProbe: \n            httpGet: \n              path: &quot;/actuator/health&quot;\n              port: 8080\n            initialDelaySeconds: 10\n            timeoutSeconds: 2\n            periodSeconds: 5\n            failureThreshold: 10\n          livenessProbe: \n            httpGet: \n              path: &quot;/actuator/health&quot;\n              port: 8080\n            initialDelaySeconds: 120\n            timeoutSeconds: 2\n            periodSeconds: 5\n            failureThreshold: 5\n---\n\napiVersion: &quot;v1&quot;\nkind: &quot;Service&quot;\nmetadata: \n  name: &quot;order&quot;\n  labels: \n    app: &quot;order&quot;\n  namespace: &quot;&quot;\n  annotations: \n    msaez.io/x: &quot;775&quot;\n    msaez.io/y: &quot;356&quot;\nspec: \n  ports: \n    - \n      port: 8080\n      targetPort: 8080\n  selector: \n    app: &quot;order&quot;\n---\n\napiVersion: &quot;v1&quot;\nkind: &quot;Service&quot;\nmetadata: \n  name: &quot;inventory&quot;\n  labels: \n    app: &quot;inventory&quot;\n  namespace: &quot;&quot;\n  annotations: \n    msaez.io/x: &quot;775&quot;\n    msaez.io/y: &quot;356&quot;\nspec: \n  ports: \n    - \n      port: 8080\n      targetPort: 8080\n  selector: \n    app: &quot;inventory&quot;</code></pre>\n<h2 id=\"사용-방법\"><a href=\"#%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>사용 방법</h2>\n<h3 id=\"step1-패키징\"><a href=\"#step1-%ED%8C%A8%ED%82%A4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP1. 패키징</h3>\n<p>클러스터에 배포할 이미지를 생성하기 위해 다음의 명령어를 입력하여 각 마이크로서비스에 대한 패키지 파일을 생성합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">cd &lt;microservice&gt;\nmvn package -B -Dmaven.test.skip=true</code></pre>\n<h3 id=\"step2-도커라이징\"><a href=\"#step2-%EB%8F%84%EC%BB%A4%EB%9D%BC%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP2. 도커라이징</h3>\n<p>완료된 패키지 파일과 각 마이크로서비스에 생성된 Dokerfile을 통해 도커로 이미지를 생성이 가능하며 다음의 명령어로 이미지를 생성할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">docker login # 최초, 한번만 실행해도 됨\ndocker build -t [dockerhub ID]/[마이크로서비스 이름]:[태그명] .     \ndocker image ls\ndocker push [dockerhub ID]/[마이크로서비스 이름]:[태그명]  </code></pre>\n<h3 id=\"step3-배포\"><a href=\"#step3-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP3. 배포</h3>\n<p>도커에 Build &#x26; Push한 이미지를 kubernetes cluster에 배포하기 위해 다음과 같이 진행합니다.</p>\n<ol>\n<li>이미지명 변경\ntemplate.yml의 스펙에 image명을 다음과 같이 수정합니다.</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">spec: \n      containers: \n        - \n          name: &quot;order&quot;\n          image: &quot;[dockerhub ID]/[마이크로서비스 이름]:[태그명]&quot;\n          ports: </code></pre>\n<ol start=\"2\">\n<li>클러스터 배포\nimage명 변경 후, 클러스터 배포를 위해 다음의 명령어를 입력하여 template.yml 배포를 진행합니다.</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f kubernetes/template/template.yml</code></pre>\n<p>이후 클러스터를 조회하면 생성한 이미지에 대한 배포스펙에 따라 pod, svc, deploy가 생성된 것을 확인할 수 있습니다.</p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Kubernetes","anchor":"#kubernetes"},{"depth":2,"value":"적용 방법","anchor":"#적용-방법"},{"depth":3,"value":"STEP1. Kubernetes 모델링 확인","anchor":"#step1-kubernetes-모델링-확인"},{"depth":3,"value":"STEP2. Topping 적용","anchor":"#step2-topping-적용"},{"depth":2,"value":"사용 방법","anchor":"#사용-방법"},{"depth":3,"value":"STEP1. 패키징","anchor":"#step1-패키징"},{"depth":3,"value":"STEP2. 도커라이징","anchor":"#step2-도커라이징"},{"depth":3,"value":"STEP3. 배포","anchor":"#step3-배포"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}