{"hash":"0b468e1b2701901760ac603c85123063c3bf6636","data":{"markdownPage":{"id":"bed6dd812f5e5b754b8fdb90e1919ceb","title":"Unit-Test","description":"","path":"/toppings/test-unit/","timeToRead":2,"content":"<h1 id=\"unit-test\"><a href=\"#unit-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Unit-Test</h1>\n<h2 id=\"unit-test-1\"><a href=\"#unit-test-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Unit Test</h2>\n<p>Unit Test(단위 테스트)는 소프트웨어 개발 과정에서 개별 함수 단위의 기능을 검증하는 테스트 방법입니다. 함수가 수행됨에 따라 생성되는 결과에 대하여 Given-When-Then 패턴을 사용하여 특정 함수에 대한 테스트를 효율적으로 수행할 수 있습니다. <br></p>\n<p>Unit Test를 활용하여 코드 품질을 향상할 수 있으며, 테스트 작성 과정에서 코드의 구조와 인터페이스를 개선할 수 있다는 장점이 있습니다.</p>\n<h2 id=\"적용-방법\"><a href=\"#%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>적용 방법</h2>\n<h3 id=\"step1-모델링\"><a href=\"#step1-%EB%AA%A8%EB%8D%B8%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP1. 모델링</h3>\n<p>재고팀에 설정된 상품이 주문팀에서 발생된 주문의 수량에 따라 재고가 감소하는 시나리오를 토대로 아래와 같이 모델링을 진행합니다.\n<img src=\"https://github.com/kyusooK/lab-shop-unit-test/assets/123912988/b5a52c0a-916b-4f60-8bb4-43524ddf033c\"></p>\n<h3 id=\"step2-examples\"><a href=\"#step2-examples\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP2. EXAMPLES</h3>\n<p>Policy(decrease stock)스티커를 더블 클릭 > 우측 패널 'EXAMPLES' 클릭하면 Given-When-Then 패턴의 예제를 작성할 수 있는 다이얼로그가 나타나는 것을 확인할 수 있습니다.</p>\n<p>시나리오를 토대로 Inventory(Given)의 stock이 OrderPlaced(When)에 의해서 StockDecreased(Then) 이벤트로 발행되는 예제를 아래와 같이 생성합니다.\n<img src=\"https://github.com/kyusooK/lab-shop-unit-test/assets/123912988/7382fa38-1902-4471-a4ec-782789f54367\"></p>\n<h3 id=\"step3-topping-적용\"><a href=\"#step3-topping-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP3. Topping 적용</h3>\n<p>Code > Code Preview를 클릭하여 좌측 상단에 Base: spring-boot가 선택되어 있는지 확인합니다. <br>\n*spring-boot가 아닐 경우 spring-boot 클릭 > Marketplace 클릭 > Template > Spring-boot > Apply로 spring-boot를 적용합니다. <br>\n우측 상단 Toppings > Marketplace를 클릭하여 아래와 같은 화면으로 진입합니다. <br>\n<img src=\"https://github.com/user-attachments/assets/58b2c46c-1155-4340-bbfe-8372830bbecb\"></p>\n<p>상단의 'TOPPINGS' > 'Unit Test for Microservices' > Apply로  Unit test 토핑을 적용합니다. <br></p>\n<p>적용 후, inventory/src/test를 확인하면 'DecreaseStockTest.java'파일이 생성되며 'EXAMPLES'에서 작성한 given, when, then에 따른 코드가 아래와 같이 생성된것을 확인할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">public void test0() {\n        //given:\n        Inventory entity = new Inventory();\n\n        entity.setId(1L);\n        entity.setStock(10);\n\n        repository.save(entity);\n\n        //when:\n\n        OrderPlaced event = new OrderPlaced();\n\n        event.setId(1L);\n        event.setProductId(&quot;1&quot;);\n        event.setQty(5);\n        event.setCustomerId(&quot;Customer1&quot;);\n\n        InventoryApplication.applicationContext = applicationContext;\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        try {\n            String msg = objectMapper.writeValueAsString(event);\n\n            processor\n                .inboundTopic()\n                .send(\n                    MessageBuilder\n                        .withPayload(msg)\n                        .setHeader(\n                            MessageHeaders.CONTENT_TYPE,\n                            MimeTypeUtils.APPLICATION_JSON\n                        )\n                        .setHeader(&quot;type&quot;, event.getEventType())\n                        .build()\n                );\n\n            //then:\n\n            Message&lt;String&gt; received = (Message&lt;String&gt;) messageCollector\n                .forChannel(processor.outboundTopic())\n                .poll();\n\n            assertNotNull(&quot;Resulted event must be published&quot;, received);\n\n            StockDecreased outputEvent = objectMapper.readValue(\n                received.getPayload(),\n                StockDecreased.class\n            );\n            LOGGER.info(&quot;Response received: {}&quot;, received.getPayload());\n\n            assertEquals(String.valueOf(outputEvent.getId()), &quot;1&quot;);\n            assertEquals(String.valueOf(outputEvent.getStock()), &quot;5&quot;);\n        } catch (JsonProcessingException e) {\n            // TODO Auto-generated catch block\n            assertTrue(&quot;exception&quot;, false);\n        }\n    }</code></pre>\n<h2 id=\"실행-방법\"><a href=\"#%EC%8B%A4%ED%96%89-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실행 방법</h2>\n<h3 id=\"step1-테스트-로직-생성\"><a href=\"#step1-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%A1%9C%EC%A7%81-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP1. 테스트 로직 생성</h3>\n<p>생성된 'DecreaseStockTest.java'의 테스트를 진행하기 위해서는 inventory서비스에 테스트가 이루어질 로직이 존재해야 합니다. <br></p>\n<p>Inventory.java' > decreaseStock()의 로직을 다음과 같이 수정합니다. <br></p>\n<pre class=\"language-text\"><code class=\"language-text\">repository().findById(Long.valueOf(orderPlaced.getProductId().substring(orderPlaced.getProductId().length() - 1))).ifPresent(inventory-&gt;{\n        inventory.setStock(inventory.getStock() - orderPlaced.getQty()); // do something\n        repository().save(inventory);\n\n        StockDecreased stockDecreased = new StockDecreased(inventory);\n        stockDecreased.publishAfterCommit();\n});</code></pre>\n<h3 id=\"step2-서비스-테스트\"><a href=\"#step2-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>STEP2. 서비스 테스트</h3>\n<p>DecreaseStockTest파일과 inventory서비스에 생성한 로직을 통해 테스트를 진행하기 위해 터미널에 다음과 같은 명령어를 입력합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">cd inventory\nmvn test</code></pre>\n<p>테스트가 실행되면 생성한 로직을 토대로 테스트 파일의 given, when, then이 정상 처리 되는지 검증하며, 테스트가 성공되면 아래와 같이 Build Success가 출력된 것을 확인할 수 있습니다. <br></p>\n<p><img src=\"https://github.com/kyusooK/lab-shop-unit-test/assets/123912988/414f2a38-3bf9-4323-b721-a6d47dcb5fe1\"></p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Unit-Test","anchor":"#unit-test"},{"depth":2,"value":"Unit Test","anchor":"#unit-test-1"},{"depth":2,"value":"적용 방법","anchor":"#적용-방법"},{"depth":3,"value":"STEP1. 모델링","anchor":"#step1-모델링"},{"depth":3,"value":"STEP2. EXAMPLES","anchor":"#step2-examples"},{"depth":3,"value":"STEP3. Topping 적용","anchor":"#step3-topping-적용"},{"depth":2,"value":"실행 방법","anchor":"#실행-방법"},{"depth":3,"value":"STEP1. 테스트 로직 생성","anchor":"#step1-테스트-로직-생성"},{"depth":3,"value":"STEP2. 서비스 테스트","anchor":"#step2-서비스-테스트"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}