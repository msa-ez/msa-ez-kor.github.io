{"hash":"2d1df6197d72b7edf75fa6d19efb902a251e81ad","data":{"markdownPage":{"id":"82b0cdfcd830aa75deb79618e8ecfa0e","title":"템플릿 파일 구조","description":"","path":"/custom-template/template-structure/","timeToRead":3,"content":"<h1 id=\"템플릿-파일-구조\"><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF-%ED%8C%8C%EC%9D%BC-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>템플릿 파일 구조</h1>\n<p>템플릿 파일은 필수로 적용해야하는 옵션들을 설정하는 metadata와, 동적으로 변화할 데이터들을 선언하는 템플릿 코드로 구성되어 있습니다.</p>\n<p>이전에 생성한 Aggregate.java 파일을 기준으로 템플릿 파일을 구성하는 방법은 다음과 같습니다.</p>\n<h2 id=\"1-metadata-정의\"><a href=\"#1-metadata-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Metadata 정의</h2>\n<p>Metadata란 템플릿이 데이터를 반복하는 방식, 생성되는 파일의 유형 및 위치, 그 외 설정할 옵션 등을 의미하며,\n템플릿 파일의 최상단에 사용할 옵션들을 아래와 같이 설정할 수 있습니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">forEach: Aggregate\nfileName: {{#namePascalCase name}}.java\npath: {{boundedContext.name}}/{{{options.packagePath}}}/domain\n---</code></pre>\n<h3 id=\"11-파일-유형-설정\"><a href=\"#11-%ED%8C%8C%EC%9D%BC-%EC%9C%A0%ED%98%95-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1 파일 유형 설정</h3>\n<p>템플릿 파일은 생성될 때 어떠한 유형으로 생성될지를 설정해야하며 이때, forEach를 사용할 수 있습니다.</p>\n<p>forEach의 값으로는 모델링한 스티커들을 가져올 수 있으며 여기서는 Aggregate 기준으로 설정하였습니다.</p>\n<h3 id=\"12-파일-이름-정의\"><a href=\"#12-%ED%8C%8C%EC%9D%BC-%EC%9D%B4%EB%A6%84-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.2 파일 이름 정의</h3>\n<p>forEach를 Aggregate로 설정한 템플릿파일은 Aggregate 스티커의 수만큼 생성되기 때문에 각각의 고유한 이름으로 생성될 수 있도록 설정해야합니다. </p>\n<p>이때, fileName을 통해 생성될 각각의 Aggregate파일의 이름을 구분지을 수 있습니다.</p>\n<p>예시에서는 {{#namePascalCase name}}.java로 지정하였습니다. 이를 통해 각 Aggregate의 namePascalCase에 해당하는 결과값이 대체되어 파일이 생성됩니다. </p>\n<h3 id=\"13-파일-경로-설정\"><a href=\"#13-%ED%8C%8C%EC%9D%BC-%EA%B2%BD%EB%A1%9C-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.3 파일 경로 설정</h3>\n<p>마지막으로 path를 통해 Aggregate.java가 생성될 경로를 설정합니다.</p>\n<p>현재 Aggregate.java가 생성되어야 할 경로는 domain의 하위이며, 'Model Explorer'의 속성을 참조하여 경로를 설정할 수 있습니다.</p>\n<p>Metadata의 옵션 설정들이 완료되면 하단에 작성할 템플릿코드와 분리되기 위해 마지막 메타데이터의 하단에 하이푼('---')처리를 입력하면 metadata설정이 완료됩니다.</p>\n<h2 id=\"2-template-code\"><a href=\"#2-template-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Template code</h2>\n<p>템플릿 파일은 모델링을 통해 생성된 'Model Explorer'에 있는 속성을 활용하여 템플릿 코드를 구성할 수 있습니다.</p>\n<p>이때, 속성을 가져오기 위해 Mustache ('{{}}')를 사용할 수 있습니다. </p>\n<p>Mustache란 다양한 언어를 지원하는 심플한 템플릿 엔진을 의미합니다.</p>\n<p>모델링을 통해 생성된 속성을 Mustache 내부에 입력하면 속성에 해당하는 값을 가져올 수 있으며, 상황에 따라 조건문, 반복문 등의 형태로 활용하여 유동적으로 원하는 속성의 결과값을 가져올 수 있습니다.</p>\n<h3 id=\"21-mustache\"><a href=\"#21-mustache\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.1 Mustache</h3>\n<p>Aggregate 스티커의 속성중 name에 해당하는 속성을 Mustache를 활용하여 아래와 같이 Java의 클래스를 생성할 수 있습니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">forEach: Aggregate\nfileName: {{#namePascalCase name}}.java\npath: {{boundedContext.name}}/{{{options.packagePath}}}/domain\n---\n\npublic class {{name}} {\n\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class Order {\n\n}</code></pre>\n<h3 id=\"22-내부-속성-접근\"><a href=\"#22-%EB%82%B4%EB%B6%80-%EC%86%8D%EC%84%B1-%EC%A0%91%EA%B7%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.2 내부 속성 접근</h3>\n<p>스티커의 객체에 접근할 때는 {{속성}}의 형식으로 접근 가능합니다.</p>\n<p>하지만 특정 속성의 내부에 있는 속성에 접근할 때는 '.'을 이용하며, </p>\n<p>{{속성.내부속성}}로 작성할 수 있습니다.</p>\n<p>다음은 내부 속성을 활용하여 클래스 내부에 키필드의 타입과 이름을 선언하는 방법입니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">forEach: Aggregate\nfileName: {{#namePascalCase name}}.java\npath: {{boundedContext.name}}/{{{options.packagePath}}}/domain\n---\npublic class {{name}} {\n\n    private {{keyFieldDescriptor.className}} {{keyFieldDescriptor.name}}\n\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class Order {\n\n    private Long id;\n\n}</code></pre>\n<p>Aggregate 스티커의 필드 중, 현재 id필드가 keyField로 설정되어 있습니다. </p>\n<p>따라서 id필드의 이름과 타입을 가져오기 위해서는 keyFieldDescriptor 내부에 존재하는 className과 name 속성에 접근하여 가져올 수 있게 됩니다.</p>\n<h3 id=\"23-외부-범위-속성-접근\"><a href=\"#23-%EC%99%B8%EB%B6%80-%EB%B2%94%EC%9C%84-%EC%86%8D%EC%84%B1-%EC%A0%91%EA%B7%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.3 외부 범위 속성 접근</h3>\n<p>내부 속성에 접근하는 것과 반대로 외부의 속성에 접근해야할 때가 있습니다.</p>\n<p>이때, 외부 범위의 속성에 접근하기 위해서는 '../'를 이용하며, {{../외부속성}}로 작성할 수 있습니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class {{name}} {\n\n    {{#aggregateRoot}}\n    private {{../keyFieldDescriptor.className}} {{../keyFieldDescriptor.name}}\n    {{/aggregateRoot}}\n\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class Order {\n\n    private Long id;\n\n}</code></pre>\n<p>예시에서 Aggregate의 내부 속성인 aggregateRoot로 접근한 상태에서 외부 범위에 존재하는 keyFieldDescriptor 속성에 접근하려면 외부 속성으로 접근해야합니다.</p>\n<p>따라서 {{../keyFieldDescriptor}}를 사용하여 상위 속성으로 이동하여 keyFieldDescriptor의 속성에 접근한 후, 내부속성 className과 name에 접근할 수 있게됩니다.</p>\n<h3 id=\"24-네이밍-컨벤션\"><a href=\"#24-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EC%BB%A8%EB%B2%A4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.4 네이밍 컨벤션</h3>\n<p>스티커의 속성중 이름과 관련된 속성은 여러 네이밍 컨벤션으로 생성되어 있으며, 이를 활용하여 상황에 맞게 적절하게 활용할 수 있습니다.</p>\n<p>다음은 네이밍 컨벤션을 활용하여 클래스와 필드를 설정하는 방법입니다.\nTemplate</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class {{#pascalCase name}} {\n    {{#aggregateRoot.fieldDescriptors}}\n    private {{className}} {{#camelCase name}}\n    {{/aggregateRoot.fieldDescriptors}}\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class Order {\n\n    private Long id;\n\n    private String userId;\n\n    private String productName;\n\n}</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"템플릿 파일 구조","anchor":"#템플릿-파일-구조"},{"depth":2,"value":"1. Metadata 정의","anchor":"#1-metadata-정의"},{"depth":3,"value":"1.1 파일 유형 설정","anchor":"#11-파일-유형-설정"},{"depth":3,"value":"1.2 파일 이름 정의","anchor":"#12-파일-이름-정의"},{"depth":3,"value":"1.3 파일 경로 설정","anchor":"#13-파일-경로-설정"},{"depth":2,"value":"2. Template code","anchor":"#2-template-code"},{"depth":3,"value":"2.1 Mustache","anchor":"#21-mustache"},{"depth":3,"value":"2.2 내부 속성 접근","anchor":"#22-내부-속성-접근"},{"depth":3,"value":"2.3 외부 범위 속성 접근","anchor":"#23-외부-범위-속성-접근"},{"depth":3,"value":"2.4 네이밍 컨벤션","anchor":"#24-네이밍-컨벤션"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}