{"hash":"df6e0475c0b3857191eb7ee4baf4cb76b031ebe3","data":{"markdownPage":{"id":"d8374bc7dbad074db9eb47017b273ef6","title":"Built-in Helper functions","description":"","path":"/custom-template/designing-template-helper/","timeToRead":4,"content":"<h1 id=\"built-in-helper-functions\"><a href=\"#built-in-helper-functions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Built-in Helper functions</h1>\n<h4 id=\"helper-function-생성하기\"><a href=\"#helper-function-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Helper function 생성하기</h4>\n<p>특정 조건에만 해당되는 결과값을 반환하기 위해서는 function블록에 helper를 만들어 이를 해결할 수 있습니다.</p>\n<p>먼저 script 블록 하단에 function 블록을 생성 합니다.</p>\n<p>이후, 특정 조건에 동작할 helper를 작성합니다. Handlebars는 JavaScript 템플릿 엔진으로 데이터를 템플릿에 동적으로 삽입할 때 사용합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;/scirpt&gt;\n&lt;function&gt;\nwindow.$HandleBars.registerHelper(&#39;{Handlebars 이름}&#39;, function ({parameter값}){\n    실행할 코드\n}\n&lt;/function&gt;</code></pre>\n<p>Handlebars가 완성되면 script 블록 내부에 Handlebars 이름과 parameter로 보낼 값을 mustache 구문에 작성합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;script&gt;\n{{#Handlebars 이름 parameter로 보낼 데이터}}\n{{/Handlebars 이름}}\n&lt;/script&gt;</code></pre>\n<p>예시) Date type의 필요한 import문  생성.</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;script&gt;\n{{#checkDateType aggregateRoot.fieldDescriptors}}\n{{/checkDateType}}\n&lt;/script&gt;\n&lt;function&gt;\nwindow.$HandleBars.registerHelper(&#39;checkDateType&#39;, function (fieldDescriptors) {\n    for(var i = 0; i &lt; fieldDescriptors.length; i ++ ){\n        if(fieldDescriptors[i] &amp;&amp; fieldDescriptors[i].className == &#39;Date&#39;){\n            return &quot;import java.util.Date;&quot;\n        }\n    }\n});\n&lt;/function&gt;</code></pre>\n<p>이 경우 aggregateRoot.fieldDescriptors의 className이 Date일 경우 </p>\n<p>결과값에 \"import java.util.Date;\"가 반환됩니다.</p>\n<h4 id=\"built-in-helper-function\"><a href=\"#built-in-helper-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Built in Helper function</h4>\n<p>Globar helper란 Template에서 스티커에 관계없이 공통적으로 사용할 수 있는 handlebars를 의미합니다.</p>\n<p>현재 Msa-EZ내에 정의되어있는 Globar helper에 대하여 예시와 사용방법을 설명하겠습니다.</p>\n<p>2) checkEntityMember</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;checkEntityMember&#39;, function (className, options) {\n    if(!(className.endsWith(&quot;Address&quot;) || className.endsWith(&quot;Photo&quot;) || className.endsWith(&quot;User&quot;) || className.endsWith(&quot;Email&quot;) \n            || className.endsWith(&quot;Payment&quot;) || className.endsWith(&quot;Money&quot;) || className.endsWith(&quot;Weather&quot;) || className.endsWith(&quot;Rating&quot;)) \n            || className.endsWith(&quot;Likes&quot;)|| className.endsWith(&quot;Tags&quot;)|| className.endsWith(&quot;Comment&quot;) &amp;&amp; className.indexOf(&quot;java.&quot;) == -1 &amp;&amp; className.indexOf(&quot;List&quot;) == -1){\n        return options.fn(this);\n    } else {\n        return options.inverse(this);\n    }\n})</code></pre>\n<p>checkEntityMember는 parameter로 받아온 className의 문자열이 지정된 문자열과 일치하지 않고 className에 'java.', 'List'가 포함되지 않는 경우 블록을 실행합니다.\n지정된 VO가 아닌 직접 만든 VO를 사용하는 경우 해당 handlebars를 이용합니다.</p>\n<p>예시) className이 Status인 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#checkEntityMember className}}\n    &lt;{{className}} offline label=&quot;{{namePascalCase}}&quot; v-model=&quot;value.{{nameCamelCase}}&quot; :editMode=&quot;editMode&quot; @change=&quot;change&quot;/&gt;\n{{/checkEntityMember}}\n\n=&gt; &lt;Status offline label=&quot;Status인&quot; v-model=&quot;value.status&quot; :editMode=&quot;editMode&quot; @change=&quot;change&quot;/&gt;</code></pre>\n<p>3) url</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&quot;url&quot;, function(str){\n    return  str ? str.toLowerCase().replaceAll(&quot; &quot;, &quot;-&quot;) : str;\n});</code></pre>\n<p>url은 parameter로 받아온 str의 값을 판별합니다. str의 값이 존재하면 소문자로 변환하고 공백에 대시(-)로 대체하여 결과값을 반환합니다.</p>\n<p>예시) name이 Custom Template일 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#url name}}\n{{/url}}\n=&gt; custom-template</code></pre>\n<p>5) ifEquals</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;ifEquals&#39;, function (arg1, arg2, options) {\n    return (arg1 == arg2) ? options.fn(this) : options.inverse(this);\n});</code></pre>\n<p>ifEquals는 parameter arg1과 arg2의 값을 비교하여 동일할 경우 블록 실행합니다.</p>\n<p>예시) dataProjection이 query-for-aggregate일 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#ifEquals dataProjection &quot;query-for-aggregate&quot;}}\n    &lt;!-- 내부 코드 --&gt;\n{{/ifEquals}}\n=&gt; =&gt; &lt;!-- 내부 코드 --&gt; </code></pre>\n<p>6) ifContains</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;ifContains&#39;, function (jsonPath, value, options) {\n    var evaluatedVal = window.jp.query(this, jsonPath);\n    if(evaluatedVal.length &amp;&amp; evaluatedVal.length == 1){\n        evaluatedVal = evaluatedVal[0];\n    }\n    if( evaluatedVal == value || evaluatedVal.includes(value)\n\n    ){\n        return options.fn(this)\n    }else{\n        return options.inverse(this)\n    }\n\n});</code></pre>\n<p>ifContains는 parameter jsonPath에서 특정 경로에 해당하는 값을 추출하여 value와 동일하거나 evaluatedVal값에 value가 포함되는 경우 블록을 실행합니다.</p>\n<p>예시) $.target._type에 위치한 값이 View일 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#ifContains &quot;$.target._type&quot; &quot;View&quot;}}\n    &lt;!-- 내부 코드 --&gt; \n{{/ifContains}}\n=&gt; &lt;!-- 내부 코드 --&gt; </code></pre>\n<p>7) jp</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;jp&#39;, function (jsonPath, options) {\n    try{\n        var evaluatedVal = window.jp.query(this, jsonPath);\n        if(evaluatedVal){\n            return options.fn(evaluatedVal)\n        }else{\n            return options.inverse(this)\n        }\n    }catch(e){\n        return options.inverse(this)\n    }\n});</code></pre>\n<p>jp는 parameter jsonPath의 경로값을 특정 경로에 해당하는 값을 추출하여 evaluatedVal 변수에 담고 해당 변수가 존재할 경우 블록을 실행하며 evaluatedVal를 반환합니다.</p>\n<p>예시) $.target._type에 위치한 값이 View일 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#jp &quot;$.target._type&quot;}}\n{{/jp}}\n=&gt; View</code></pre>\n<p>8) outgoing</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;outgoing&#39;, function (type, value, options) {\n    if(value==null)\n        value = this;\n    var evaluatedVal = window.jp.query(value, `$.outgoingRelations[?(@.target.type==&#39;${type}&#39;)]`);\n    \n    if(evaluatedVal &amp;&amp; evaluatedVal.length){\n        let result = &quot;&quot;;\n        evaluatedVal.forEach((item, index) =&gt; {\n            result += options.fn(item.target);\n        })\n        return result;\n    \n    }else{\n        return options.inverse(value)\n    }\n});</code></pre>\n<p>outgoing은 patameter type을 JSONPath를 이용하여 taget.tyoe와 일치하는 항목을 찾고 존재할 경우 블록을 실행하여 item.target을 반환합니다.</p>\n<p>즉, outgoingRelations에 해당되는 특정 스티커와 일치되는 항목이 있을 경우 블록을 실행하고 해당 스티커의 target에 해당하는 정보를 반환합니다.</p>\n<p>예시) Aggregate 스티커 UserInfo와 User가 존재하고 User에서 UserInfo로 outgoingRelations가 형성되어 있는 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#outgoing &#39;Aggregate&#39; this}}\n    {{nameCamelCase}}\n{{/outgoing}}\n=&gt; userInfo</code></pre>\n<p>9) incoming</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;incoming&#39;, function (type, value, options) {\n    var evaluatedVal = window.jp.query(value, `$.incomingRelations[?(@.source.type==&#39;${type}&#39;)]`);\n    \n    if(evaluatedVal &amp;&amp; evaluatedVal.length){\n        let result = &quot;&quot;;\n        evaluatedVal.forEach((item, index) =&gt; {\n            result += options.fn(item.source);\n        })\n        return result;\n    \n    }else{\n        return options.inverse(this)\n    }\n});</code></pre>\n<p>incoming은 outgoing과 반대로 incomingRelations에 해당되는 스티커의 정보가 일치할 경우 블록이 실행되며 source에 해당하는 정보를 반환합니다.\n예시) Aggregate 스티커 UserInfo와 User가 존재하고 UserInfo와에서 User로 incomingRelations가 형성되어 있는 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#incoming &#39;Aggregate&#39; this}}\n    {{namePascalCase}}\n{{/incoming}}\n=&gt; User</code></pre>\n<p>10)attached</p>\n<pre class=\"language-text\"><code class=\"language-text\">window.$HandleBars.registerHelper(&#39;attached&#39;, function (type, value, options) {\n    let attachedElementsInTheType\n    \n    if(value.attached)\n        attachedElementsInTheType = value.attached.filter(\n            element =&gt; (element._type.endsWith(type) || (type==&#39;ReadModel&#39; &amp;&amp; element._type.endsWith(&#39;View&#39;)))\n        )\n\n    if(attachedElementsInTheType &amp;&amp; attachedElementsInTheType.length){\n        let result = &quot;&quot;;\n        attachedElementsInTheType.forEach((item, index) =&gt; {\n            result += options.fn(item);\n        })\n\n        return result;\n    }else{\n        return options.inverse(this)\n    }\n\n});</code></pre>\n<p>attached는 특정 스티커를 기준으로 parameter로 받아오는 type과 일치한 스티커가 있을 경우 블록이 실행되며 일치한 type에 해당하는 스티커의 정보를 반환합니다.</p>\n<p>예시) Aggregate스티커 User기준 부착된 ReadModel스티커 UserQuery의 queryParameters 정보를 불러오는 경우</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#attached &#39;View&#39; this}}\n    {{#queryParameters}}{{nameCamelCase}}{{/queryParameters}}\n    &quot;queryParameters에 name, age가 있다고 가정&quot;\n{{/attached}}\n=&gt; name age</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Built-in Helper functions","anchor":"#built-in-helper-functions"},{"depth":4,"value":"Helper function 생성하기","anchor":"#helper-function-생성하기"},{"depth":4,"value":"Built in Helper function","anchor":"#built-in-helper-function"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}