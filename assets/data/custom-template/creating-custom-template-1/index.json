{"hash":"f0ae7aa92c70db42b7abbf0758aa4b61df3c9a7e","data":{"markdownPage":{"id":"d6590978d780cafb9b346c0a316777c1","title":"커스텀 템플릿 생성","description":"","path":"/custom-template/creating-custom-template-1/","timeToRead":4,"content":"<h1 id=\"커스텀-템플릿-생성\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스텀 템플릿 생성</h1>\n<p>커스텀 템플릿은 원하는 템플릿을 제공된 기본 템플릿에 추가하여 이벤트스토밍 모델의 결과에 따라 원하는 템플릿으로 코드를 생성합니다.</p>\n<h2 id=\"step-1-템플릿-구조-정의하기\"><a href=\"#step-1-%ED%85%9C%ED%94%8C%EB%A6%BF-%EA%B5%AC%EC%A1%B0-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 1. 템플릿 구조 정의하기</h2>\n<p>먼저 파일 최상단에 metadata를 선언합니다.  </p>\n<p>metadata란 템플릿이 데이터를 반복하는 방식, 생성되는 파일의 유형 및 위치, 그 외 설정할 옵션 등을 의미합니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">forEach: Aggregate\nfileName: {{namePascalCase}}.java\npath: {{boundedContext.name}}/{{{options.packagePath}}}/domain\n---</code></pre>\n<h3 id=\"11-파일-유형-설정\"><a href=\"#11-%ED%8C%8C%EC%9D%BC-%EC%9C%A0%ED%98%95-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1 파일 유형 설정</h3>\n<p>여기서 forEach를 통해 템플릿이 생성될 파일의 유형을 설정합니다.</p>\n<p>forEach의 값으로는 이벤트스티커들을 가져올 수 있으며 여기서는 Aggregate 기준으로 설정하였습니다.</p>\n<h3 id=\"12-파일-이름-정의\"><a href=\"#12-%ED%8C%8C%EC%9D%BC-%EC%9D%B4%EB%A6%84-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.2 파일 이름 정의</h3>\n<p>그 다음 fileName을 통해 생성될 파일의 이름을 설정합니다.</p>\n<p>fileName을 {{namePascalCase}}.java로 지정하였기 때문에 이 파일이 Company.java로 생성됩니다.</p>\n<h3 id=\"13-파일-경로-설정\"><a href=\"#13-%ED%8C%8C%EC%9D%BC-%EA%B2%BD%EB%A1%9C-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.3 파일 경로 설정</h3>\n<p>마지막으로 path를 통해 Company.java가 생성될 경로를 설정합니다.</p>\n<p>현재 {{boundedContext.name}}/{{{options.packagePath}}}/domain로 설정함으로써 해당 Aggregate가 속한 BoundedContext의 하위 폴더 domain에 Company.java 파일이 생성됩니다.</p>\n<p>metadata의 옵션 설정들이 완료되면 하단에 작성할 템플릿코드와 분리되기 위해 마지막 메타데이터의 하단에 하이푼('---')처리를 입력하면 metadata설정이 완료됩니다.</p>\n<h2 id=\"step-2-패키지-및-임포트-생성하기\"><a href=\"#step-2-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B0%8F-%EC%9E%84%ED%8F%AC%ED%8A%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 2. 패키지 및 임포트 생성하기</h2>\n<h3 id=\"21-데이터-접근을-활용한-패키지-설정\"><a href=\"#21-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%91%EA%B7%BC%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.1 데이터 접근을 활용한 패키지 설정</h3>\n<p>일반적으로 기준이 되는 스티커의 데이터에 접근할 때는 {{데이터}}의 형식으로 접근 가능합니다.</p>\n<p>하지만 특정 데이터의 내부에 있는 데이터 속성에 접근할 때는 '.'을 이용하며, {{데이터.내부속성}}로 작성할 수 있습니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">package {{options.package}}.domain;</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">package customtemplate.domain;</code></pre>\n<p>예시에서는 Aggregate의 데이터중 options의 내부 데이터 속성 package에 접근하기 위해 options.package를 이용하여 결과값을 반환하였습니다.</p>\n<h3 id=\"22-데이터-접근을-활용한-임포트-설정\"><a href=\"#22-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%91%EA%B7%BC%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%9E%84%ED%8F%AC%ED%8A%B8-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.2 데이터 접근을 활용한 임포트 설정</h3>\n<p>내부 데이터로 접근하는 것과 반대로 외부 데이터에 접근해야할 때가 있습니다.</p>\n<p>이때, 외부 범위의 데이터를 접근하기 위해서는 '../'를 이용하며, {{../외부데이터}}로 작성할 수 있습니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#lifeCycles}}\n{{#events}}\nimport {{../../options.package}}.domain.{{namePascalCase}};\n{{/events}}\n{{/lifeCycles}}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">import customtemplate.domain.CompanyCreated;</code></pre>\n<p>예시에서 데이터의 위치가 Aggregate가 아닌 event로 변경됨에 따라 다시 Aggregate의 데이터 options에 접근하려면 외부 데이터 접근 방식을 사용해야됩니다.</p>\n<p>따라서 2번의 범위가 변경됨에 따라 {{../../options.package}}를 사용하여 Aggregate의 options 데이터에 접근할 수 있게 됩니다.</p>\n<h2 id=\"step-3-클래스-및-필드-생성하기\"><a href=\"#step-3-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B0%8F-%ED%95%84%EB%93%9C-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 3. 클래스 및 필드 생성하기</h2>\n<h3 id=\"31-mustache구문을-활용한-클래스-정의\"><a href=\"#31-mustache%EA%B5%AC%EB%AC%B8%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3.1 mustache구문을 활용한 클래스 정의</h3>\n<p>mustache구문을 이용하여 Company 클래스를 생성하겠습니다.</p>\n<p>mustache구문을 활용하면 동적으로 변경되어야 할 데이터를 설정할 수 있습니다. </p>\n<p>여기서는 클래스 이름이 각각의 Aggregate의 이름에 따라 변화되어야하며, 네이밍컨벤션을 통해 대문자로 생성하도록 처리합니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class {{namePascalCase}} {\n\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class Company {\n\n}</code></pre>\n<h3 id=\"32-반복문을-활용한-필드-정의\"><a href=\"#32-%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%95%84%EB%93%9C-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3.2 반복문을 활용한 필드 정의</h3>\n<p>다음은 반복문을 통하여 필드를 정의하겠습니다.</p>\n<p>반복문은 데이터의 유형이 배열로되어 해당 데이터를 순회하여 각각의 정보를 가져올 때 사용할 수 있습니다.</p>\n<p>기본 형태로는 {{#반복가능한객체}}{{/반복가능한객체}}로 정의하며, {{#each 반복가능한객체}}{{/each}}로도 반복문을 사용할 수 있습니다.</p>\n<p>each의 경우 {{#each 반복가능한객체}}{{@key}}{{/each}} 의 형태로 사용하여 반복한 객체의 속성중 key에 해당하는 값들을 결과값으로 반환할 수도 있습니다. </p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class {{namePascalCase}} {\n\n    {{#aggregateRoot.fieldDescriptors}}\n        private {{className}} {{nameCamelCase}};\n    {{/aggregateRoot.fieldDescriptors}}\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class Company {\n\n    private Long id;\n\n    private String name;\n\n    private Address address;\n}</code></pre>\n<p>여기서는 aggregateRoot.fieldDescriptors의 데이터를 {{#반복할 데이터}}{{/반복할 데이터}}을 통해 가져옴으로써 각 필드의 데이터중 {{className}}과 {{nameCamelCase}}에 접근할 수 있게 됩니다.</p>\n<h3 id=\"33-조건문을-활용한-어노테이션-정의\"><a href=\"#33-%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3.3 조건문을 활용한 어노테이션 정의</h3>\n<p>다음은 각 필드에 어노테이션(@)이 필요한 경우를 조건문을 통해 생성해보겠습니다.</p>\n<p>조건문은 특정 속성에 대하여 참인 경우 하단의 블록을 실행하며, {{#조건문}}{{/조건문}}의 형태나 {{#if 조건문}}{{/if}}의 형태로 사용가능합니다.</p>\n<p>반대로 특정 속성에 대하여 거짓인 경우에 하단의 블록을 실행할 수 있습니다.</p>\n<p>일반적으로 {{^ 조건문}}{{/조건문}}으로 사용하며 {{#if 조건문}}{{else}}{{/if}}처럼 조건이 참일 경우와 거짓일 경우에 대해 설정할 수 있습니다.</p>\n<p>또한 {{#unless 조건문}}{{/unless}}를 통해서도 조건이 거짓인 경우에 대해 설정할 수 있습니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class {{namePascalCase}} {\n\n    {{#aggregateRoot.fieldDescriptors}}\n        {{^isVO}}\n        {{#isKey}}\n        @Id\n        {{/isKey}}\n        {{/isVO}}\n        private {{className}} {{nameCamelCase}};\n    {{/aggregateRoot.fieldDescriptors}}\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class Company {\n\n    @Id\n    private Long id;\n\n    private String name;\n}</code></pre>\n<p>예시는 @Id를 생성하는 과정에 대한 설명입니다.</p>\n<p>먼저 {{^isVO}}를 통해 필드의 속성중 isVO가 false 조건에 부합하는 필드를 선별하였습니다.</p>\n<p>이후 {{#isKey}}{{/isKey}}를 통해 isKey가 true인 필드를 선별하였습니다.</p>\n<p>두 조건문을 통해 VO필드가 아니면서 동시에 key값을 가진 필드 id에만 @Id가 생성되는 것을 확인할 수 있습니다.</p>\n<h2 id=\"step-4-메소드-생성하기\"><a href=\"#step-4-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 4. 메소드 생성하기</h2>\n<h3 id=\"41-네이밍-컨벤션을-활용한-repository-메소드-생성\"><a href=\"#41-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EC%BB%A8%EB%B2%A4%EC%85%98%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-repository-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4.1 네이밍 컨벤션을 활용한 Repository 메소드 생성</h3>\n<p>스티커의 데이터에는 네이밍컨벤션을 활용하여 결과값을 반환할 수 있습니다.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">public static {{namePascalCase}}Repository repository(){\n    {{namePascalCase}}Repository {{nameCamelCase}}Repository = {{boundedContext.namePascalCase}}Application.applicationContext.getBean({{namePascalCase}}Repository.class);\n    return {{nameCamelCase}}Repository;\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public static CompanyRepository repository() {\n    CompanyRepository companyRepository = BasicApplication.applicationContext.getBean(\n        CompanyRepository.class\n    );\n    return companyRepository;\n}</code></pre>\n<p>예시에서는 네이밍컨벤션 namePascalCase와 nameCamelCase를 이용하여 'Company'와 'company'로 결과값을 반환하여 필요한 상황에 데이터를 동적으로 변화하여 코드를 완성하였습니다.</p>\n<h2 id=\"step-5-적용-결과\"><a href=\"#step-5-%EC%A0%81%EC%9A%A9-%EA%B2%B0%EA%B3%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 5. 적용 결과</h2>\n<p>위의 Step을 통해 템플릿파일을 구성하면 다음과 같은 코드를 생성할 수 있습니다.</p>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">package customtemplate.domain;\n\nimport customtemplate.domain.CompanyCreated;\n\npublic class Company {\n\n    @Id\n    private Long id;\n\n    private String companyName;\n\n    public static CompanyRepository repository() {\n        CompanyRepository companyRepository = BasicApplication.applicationContext.getBean(\n            CompanyRepository.class\n        );\n        return companyRepository;\n    }\n}</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"커스텀 템플릿 생성","anchor":"#커스텀-템플릿-생성"},{"depth":2,"value":"Step 1. 템플릿 구조 정의하기","anchor":"#step-1-템플릿-구조-정의하기"},{"depth":3,"value":"1.1 파일 유형 설정","anchor":"#11-파일-유형-설정"},{"depth":3,"value":"1.2 파일 이름 정의","anchor":"#12-파일-이름-정의"},{"depth":3,"value":"1.3 파일 경로 설정","anchor":"#13-파일-경로-설정"},{"depth":2,"value":"Step 2. 패키지 및 임포트 생성하기","anchor":"#step-2-패키지-및-임포트-생성하기"},{"depth":3,"value":"2.1 데이터 접근을 활용한 패키지 설정","anchor":"#21-데이터-접근을-활용한-패키지-설정"},{"depth":3,"value":"2.2 데이터 접근을 활용한 임포트 설정","anchor":"#22-데이터-접근을-활용한-임포트-설정"},{"depth":2,"value":"Step 3. 클래스 및 필드 생성하기","anchor":"#step-3-클래스-및-필드-생성하기"},{"depth":3,"value":"3.1 mustache구문을 활용한 클래스 정의","anchor":"#31-mustache구문을-활용한-클래스-정의"},{"depth":3,"value":"3.2 반복문을 활용한 필드 정의","anchor":"#32-반복문을-활용한-필드-정의"},{"depth":3,"value":"3.3 조건문을 활용한 어노테이션 정의","anchor":"#33-조건문을-활용한-어노테이션-정의"},{"depth":2,"value":"Step 4. 메소드 생성하기","anchor":"#step-4-메소드-생성하기"},{"depth":3,"value":"4.1 네이밍 컨벤션을 활용한 Repository 메소드 생성","anchor":"#41-네이밍-컨벤션을-활용한-repository-메소드-생성"},{"depth":2,"value":"Step 5. 적용 결과","anchor":"#step-5-적용-결과"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/toppings/test-unit/","title":"Unit-Test"}},{"node":{"path":"/toppings/test-microcks/","title":"API Mock Server"}},{"node":{"path":"/toppings/test-messaging/","title":"Contract Test (비동기호출)"}},{"node":{"path":"/toppings/test-contract/","title":"Contract Test (동기호출)"}},{"node":{"path":"/toppings/cicd-argo/","title":"Argo"}},{"node":{"path":"/toppings/k8s-kubernetes/","title":"Kubernetes"}},{"node":{"path":"/toppings/cicd-git-action/","title":"Github Action"}},{"node":{"path":"/tool/si-gpt/","title":""}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/on-prem-inst/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/plsql-2-java/","title":"PL/SQL to Java 자동 테스팅"}},{"node":{"path":"/tool/pbc-marketplace/","title":"컴포저블 엔터프라이즈 구현을 위한 PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"코드 생성"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s 배포 모델링"}},{"node":{"path":"/tool/marketplace/","title":"마켓플레이스"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"인프라 모델링 (쿠버네티스)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Quick Start"}},{"node":{"path":"/tool/development-practice/","title":"강의 개발 및 실습 환경"}},{"node":{"path":"/tool/event-storming-tool/","title":"이벤트스토밍"}},{"node":{"path":"/tool/event-monitoring/","title":"이벤트 모니터링"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"클라우드 IDE"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/chat-gpt/","title":"AI 기반 모델 생성"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template(준비중)"}},{"node":{"path":"/templates-language/python-template/","title":"Python Template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template"}},{"node":{"path":"/started/event-storming-learning/","title":"이벤트스토밍 학습"}},{"node":{"path":"/started/key-features/","title":"주요 기능"}},{"node":{"path":"/started/","title":"소개"}},{"node":{"path":"/started/domain-driven/","title":"도메인 주도 설계 학습"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress 배포모델 설계"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"자동확장(HPA) 배포"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/info/pricing/","title":"가격 정책"}},{"node":{"path":"/info/consulting/","title":"컨설팅"}},{"node":{"path":"/info/partnership/","title":"파트너 프로그램"}},{"node":{"path":"/example-scenario/online-lecture/","title":"인터넷 강의수강 시스템"}},{"node":{"path":"/info/company/","title":"기업 사례"}},{"node":{"path":"/example-scenario/library-system/","title":"도서관 시스템"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"숙소예약"}},{"node":{"path":"/example-scenario/food-delivery/","title":"음식배달"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"동물병원 진료시스템"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/custom-template/understanding-template-structure/","title":"템플릿 구조의 이해"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/unit-test/","title":"테스트 자동화"}},{"node":{"path":"/custom-template/template-syntax/","title":"Template 문법의 이해"}},{"node":{"path":"/custom-template/tutorial/","title":"커스텀 템플릿 개념"}},{"node":{"path":"/custom-template/template-structure/","title":"템플릿 파일 구조"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0 기반 목 서버 생성 토핑(New)"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"커스텀 템플릿 생성 방법"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"반복문 & 조건문"}},{"node":{"path":"/custom-template/designing-template-helper/","title":"Built-in Helper functions"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Eventstorming Template Objects"}},{"node":{"path":"/business/","title":"이벤트스토밍"}},{"node":{"path":"/custom-template/creating-custom-template-1/","title":"커스텀 템플릿 생성"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}